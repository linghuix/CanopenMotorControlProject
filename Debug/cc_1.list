
cc_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d548  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001468  0800d72c  0800d72c  0001d72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb94  0800eb94  00025bd0  2**0
                  CONTENTS
  4 .ARM          00000000  0800eb94  0800eb94  00025bd0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800eb94  0800eb94  00025bd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb94  0800eb94  0001eb94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb98  0800eb98  0001eb98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00005bd0  20000000  0800eb9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038c0  20005bd0  0801476c  00025bd0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009490  0801476c  00029490  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00025bd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040fae  00000000  00000000  00025bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005f84  00000000  00000000  00066ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017f8  00000000  00000000  0006cb30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001538  00000000  00000000  0006e328  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fc96  00000000  00000000  0006f860  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b13b  00000000  00000000  0008f4f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000908be  00000000  00000000  000aa631  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013aeef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065d0  00000000  00000000  0013af6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000084  00000000  00000000  0014153c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000117  00000000  00000000  001415c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20005bd0 	.word	0x20005bd0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d714 	.word	0x0800d714

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20005bd4 	.word	0x20005bd4
 8000220:	0800d714 	.word	0x0800d714

08000224 <OS_CPU_SR_Save>:
 8000224:	f3ef 8010 	mrs	r0, PRIMASK
 8000228:	b672      	cpsid	i
 800022a:	4770      	bx	lr

0800022c <OS_CPU_SR_Restore>:
 800022c:	f380 8810 	msr	PRIMASK, r0
 8000230:	4770      	bx	lr

08000232 <OSStartHighRdy>:
 8000232:	481d      	ldr	r0, [pc, #116]	; (80002a8 <PendSV_Handler_nosave+0x2e>)
 8000234:	f04f 01ff 	mov.w	r1, #255	; 0xff
 8000238:	7001      	strb	r1, [r0, #0]
 800023a:	2000      	movs	r0, #0
 800023c:	f380 8809 	msr	PSP, r0
 8000240:	481a      	ldr	r0, [pc, #104]	; (80002ac <PendSV_Handler_nosave+0x32>)
 8000242:	2101      	movs	r1, #1
 8000244:	7001      	strb	r1, [r0, #0]
 8000246:	481a      	ldr	r0, [pc, #104]	; (80002b0 <PendSV_Handler_nosave+0x36>)
 8000248:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 800024c:	6001      	str	r1, [r0, #0]
 800024e:	b662      	cpsie	i

08000250 <OSStartHang>:
 8000250:	e7fe      	b.n	8000250 <OSStartHang>

08000252 <OSCtxSw>:
 8000252:	4817      	ldr	r0, [pc, #92]	; (80002b0 <PendSV_Handler_nosave+0x36>)
 8000254:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8000258:	6001      	str	r1, [r0, #0]
 800025a:	4770      	bx	lr

0800025c <OSIntCtxSw>:
 800025c:	4814      	ldr	r0, [pc, #80]	; (80002b0 <PendSV_Handler_nosave+0x36>)
 800025e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8000262:	6001      	str	r1, [r0, #0]
 8000264:	4770      	bx	lr

08000266 <PendSV_Handler>:
 8000266:	b672      	cpsid	i
 8000268:	f3ef 8009 	mrs	r0, PSP
 800026c:	b128      	cbz	r0, 800027a <PendSV_Handler_nosave>
 800026e:	3820      	subs	r0, #32
 8000270:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000274:	490f      	ldr	r1, [pc, #60]	; (80002b4 <PendSV_Handler_nosave+0x3a>)
 8000276:	6809      	ldr	r1, [r1, #0]
 8000278:	6008      	str	r0, [r1, #0]

0800027a <PendSV_Handler_nosave>:
 800027a:	b500      	push	{lr}
 800027c:	480e      	ldr	r0, [pc, #56]	; (80002b8 <PendSV_Handler_nosave+0x3e>)
 800027e:	4780      	blx	r0
 8000280:	f85d eb04 	ldr.w	lr, [sp], #4
 8000284:	480d      	ldr	r0, [pc, #52]	; (80002bc <PendSV_Handler_nosave+0x42>)
 8000286:	490e      	ldr	r1, [pc, #56]	; (80002c0 <PendSV_Handler_nosave+0x46>)
 8000288:	780a      	ldrb	r2, [r1, #0]
 800028a:	7002      	strb	r2, [r0, #0]
 800028c:	4809      	ldr	r0, [pc, #36]	; (80002b4 <PendSV_Handler_nosave+0x3a>)
 800028e:	490d      	ldr	r1, [pc, #52]	; (80002c4 <PendSV_Handler_nosave+0x4a>)
 8000290:	680a      	ldr	r2, [r1, #0]
 8000292:	6002      	str	r2, [r0, #0]
 8000294:	6810      	ldr	r0, [r2, #0]
 8000296:	e890 0ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
 800029a:	3020      	adds	r0, #32
 800029c:	f380 8809 	msr	PSP, r0
 80002a0:	f04e 0e04 	orr.w	lr, lr, #4
 80002a4:	b662      	cpsie	i
 80002a6:	4770      	bx	lr
 80002a8:	e000ed22 	.word	0xe000ed22
 80002ac:	2000866d 	.word	0x2000866d
 80002b0:	e000ed04 	.word	0xe000ed04
 80002b4:	20008a2c 	.word	0x20008a2c
 80002b8:	0800afef 	.word	0x0800afef
 80002bc:	20008675 	.word	0x20008675
 80002c0:	20008674 	.word	0x20008674
 80002c4:	20008a10 	.word	0x20008a10

080002c8 <Task_Start>:
 */

void CANOpen_App_Init(void);
void Remote_App_Init(void);
void Task_Start(void *p_arg)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
    (void)p_arg;                // 'p_arg' 并没有用到，防止编译器提示警告

	Task_MSG("Canopen motor controller ...");
 80002d0:	480d      	ldr	r0, [pc, #52]	; (8000308 <Task_Start+0x40>)
 80002d2:	f00c fa97 	bl	800c804 <iprintf>
 80002d6:	2223      	movs	r2, #35	; 0x23
 80002d8:	490c      	ldr	r1, [pc, #48]	; (800030c <Task_Start+0x44>)
 80002da:	480d      	ldr	r0, [pc, #52]	; (8000310 <Task_Start+0x48>)
 80002dc:	f00c fa92 	bl	800c804 <iprintf>
	Task_MSG("task priority include: 2 3 5 6 7 ");
 80002e0:	480c      	ldr	r0, [pc, #48]	; (8000314 <Task_Start+0x4c>)
 80002e2:	f00c fa8f 	bl	800c804 <iprintf>
 80002e6:	2224      	movs	r2, #36	; 0x24
 80002e8:	4908      	ldr	r1, [pc, #32]	; (800030c <Task_Start+0x44>)
 80002ea:	4809      	ldr	r0, [pc, #36]	; (8000310 <Task_Start+0x48>)
 80002ec:	f00c fa8a 	bl	800c804 <iprintf>

	CANOpen_App_Init();			// canopen协议
 80002f0:	f000 f812 	bl	8000318 <CANOpen_App_Init>
	//Remote_App_Init();			// 红外通讯远程遥控
	OSStatInit();
 80002f4:	f00a ff9c 	bl	800b230 <OSStatInit>

    while (1)
    {
			OSTimeDlyHMSM(0, 10,0,0);
 80002f8:	2300      	movs	r3, #0
 80002fa:	2200      	movs	r2, #0
 80002fc:	210a      	movs	r1, #10
 80002fe:	2000      	movs	r0, #0
 8000300:	f00c f9ce 	bl	800c6a0 <OSTimeDlyHMSM>
 8000304:	e7f8      	b.n	80002f8 <Task_Start+0x30>
 8000306:	bf00      	nop
 8000308:	0800d72c 	.word	0x0800d72c
 800030c:	0800d74c 	.word	0x0800d74c
 8000310:	0800d760 	.word	0x0800d760
 8000314:	0800d76c 	.word	0x0800d76c

08000318 <CANOpen_App_Init>:
 */

OS_Q *	gg;
#include "func_CanOpen.h"
void CANOpen_App_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af06      	add	r7, sp, #24
	MX_CAN1_Init(CAN_MODE_NORMAL);
 800031e:	2000      	movs	r0, #0
 8000320:	f000 f9c6 	bl	80006b0 <MX_CAN1_Init>
	MX_TIM_CounterInterrupt(CANOPEN_TIMx, CANOPEN_TIM_COUNTER_CLOCK, CANOPEN_TIM_PERIOD);
 8000324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000328:	492c      	ldr	r1, [pc, #176]	; (80003dc <CANOpen_App_Init+0xc4>)
 800032a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800032e:	f000 fb0f 	bl	8000950 <MX_TIM_CounterInterrupt>

	HAL_TIM_Base_Start_IT(CANOPEN_TIMx_handle);
 8000332:	482b      	ldr	r0, [pc, #172]	; (80003e0 <CANOpen_App_Init+0xc8>)
 8000334:	f002 fe35 	bl	8002fa2 <HAL_TIM_Base_Start_IT>
	CAN_Start(&hcan1);
 8000338:	482a      	ldr	r0, [pc, #168]	; (80003e4 <CANOpen_App_Init+0xcc>)
 800033a:	f000 ff96 	bl	800126a <CAN_Start>

	CRCV_WAIT_Semp = OSSemCreate(0);
 800033e:	2000      	movs	r0, #0
 8000340:	f00b fe28 	bl	800bf94 <OSSemCreate>
 8000344:	4602      	mov	r2, r0
 8000346:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <CANOpen_App_Init+0xd0>)
 8000348:	601a      	str	r2, [r3, #0]

	CANRcv_Q  = OSQCreate(&canrxMsgGrp[0],N_MESSAGES); 			//创建消息队列
 800034a:	2114      	movs	r1, #20
 800034c:	4827      	ldr	r0, [pc, #156]	; (80003ec <CANOpen_App_Init+0xd4>)
 800034e:	f00b fc7b 	bl	800bc48 <OSQCreate>
 8000352:	4602      	mov	r2, r0
 8000354:	4b26      	ldr	r3, [pc, #152]	; (80003f0 <CANOpen_App_Init+0xd8>)
 8000356:	601a      	str	r2, [r3, #0]
	CANSend_Q = OSQCreate(&cantxMsgGrp[0],N_MESSAGES);
 8000358:	2114      	movs	r1, #20
 800035a:	4826      	ldr	r0, [pc, #152]	; (80003f4 <CANOpen_App_Init+0xdc>)
 800035c:	f00b fc74 	bl	800bc48 <OSQCreate>
 8000360:	4602      	mov	r2, r0
 8000362:	4b25      	ldr	r3, [pc, #148]	; (80003f8 <CANOpen_App_Init+0xe0>)
 8000364:	601a      	str	r2, [r3, #0]

	gg = (OS_Q*)CANRcv_Q->OSEventPtr;
 8000366:	4b22      	ldr	r3, [pc, #136]	; (80003f0 <CANOpen_App_Init+0xd8>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	4a23      	ldr	r2, [pc, #140]	; (80003fc <CANOpen_App_Init+0xe4>)
 800036e:	6013      	str	r3, [r2, #0]

	/*OSTaskCreate(CANRcv_Task,(void *)0,		  				//创建CANRcv_Task任务
	   &canrcv_task_stk[TASK_A_STK_SIZE-1], TASK_canrcv_PRIO);*/
	OSTaskCreateExt(CANRcv_Task,(void *)0,&canrcv_task_stk[CAN_RECEIVE_STK-1],
 8000370:	2303      	movs	r3, #3
 8000372:	9304      	str	r3, [sp, #16]
 8000374:	2300      	movs	r3, #0
 8000376:	9303      	str	r3, [sp, #12]
 8000378:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800037c:	9302      	str	r3, [sp, #8]
 800037e:	4b20      	ldr	r3, [pc, #128]	; (8000400 <CANOpen_App_Init+0xe8>)
 8000380:	9301      	str	r3, [sp, #4]
 8000382:	2300      	movs	r3, #0
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	2306      	movs	r3, #6
 8000388:	4a1e      	ldr	r2, [pc, #120]	; (8000404 <CANOpen_App_Init+0xec>)
 800038a:	2100      	movs	r1, #0
 800038c:	481e      	ldr	r0, [pc, #120]	; (8000408 <CANOpen_App_Init+0xf0>)
 800038e:	f00b ff8f 	bl	800c2b0 <OSTaskCreateExt>
		TASK_canrcv_PRIO,0,&canrcv_task_stk[0],CAN_RECEIVE_STK,(void *)0,(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));

	/*OSTaskCreate(CANSend_Task,(void *)0,				   		//创建CANSend_Task任务
	  &cansend_task_stk[TASK_B_STK_SIZE-1], TASK_cansend_PRIO);*/
	OSTaskCreateExt(CANSend_Task,(void *)0,&cansend_task_stk[TASK_B_STK_SIZE-1],
 8000392:	2303      	movs	r3, #3
 8000394:	9304      	str	r3, [sp, #16]
 8000396:	2300      	movs	r3, #0
 8000398:	9303      	str	r3, [sp, #12]
 800039a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800039e:	9302      	str	r3, [sp, #8]
 80003a0:	4b1a      	ldr	r3, [pc, #104]	; (800040c <CANOpen_App_Init+0xf4>)
 80003a2:	9301      	str	r3, [sp, #4]
 80003a4:	2300      	movs	r3, #0
 80003a6:	9300      	str	r3, [sp, #0]
 80003a8:	2305      	movs	r3, #5
 80003aa:	4a19      	ldr	r2, [pc, #100]	; (8000410 <CANOpen_App_Init+0xf8>)
 80003ac:	2100      	movs	r1, #0
 80003ae:	4819      	ldr	r0, [pc, #100]	; (8000414 <CANOpen_App_Init+0xfc>)
 80003b0:	f00b ff7e 	bl	800c2b0 <OSTaskCreateExt>
			TASK_cansend_PRIO,0,&cansend_task_stk[0],TASK_B_STK_SIZE,(void *)0,(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
	
	/*OSTaskCreate(CANApp_Task,(void *)0,					  	//创建CANApp_Task任务
		 &canapp_task_stk[TASK_A_STK_SIZE-1], TASK_canapp_PRIO);*/
	OSTaskCreateExt(Epos_Task,(void *)0,&canapp_task_stk[TASK_canapp_STK_SIZE-1],
 80003b4:	2303      	movs	r3, #3
 80003b6:	9304      	str	r3, [sp, #16]
 80003b8:	2300      	movs	r3, #0
 80003ba:	9303      	str	r3, [sp, #12]
 80003bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80003c0:	9302      	str	r3, [sp, #8]
 80003c2:	4b15      	ldr	r3, [pc, #84]	; (8000418 <CANOpen_App_Init+0x100>)
 80003c4:	9301      	str	r3, [sp, #4]
 80003c6:	2300      	movs	r3, #0
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	2303      	movs	r3, #3
 80003cc:	4a13      	ldr	r2, [pc, #76]	; (800041c <CANOpen_App_Init+0x104>)
 80003ce:	2100      	movs	r1, #0
 80003d0:	4813      	ldr	r0, [pc, #76]	; (8000420 <CANOpen_App_Init+0x108>)
 80003d2:	f00b ff6d 	bl	800c2b0 <OSTaskCreateExt>
		TASK_canapp_PRIO,0,&canapp_task_stk[0],TASK_canapp_STK_SIZE,(void *)0,(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
}
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	000186a0 	.word	0x000186a0
 80003e0:	20007c94 	.word	0x20007c94
 80003e4:	200074ac 	.word	0x200074ac
 80003e8:	20006e64 	.word	0x20006e64
 80003ec:	20007e28 	.word	0x20007e28
 80003f0:	2000814c 	.word	0x2000814c
 80003f4:	20008150 	.word	0x20008150
 80003f8:	20008148 	.word	0x20008148
 80003fc:	20006e54 	.word	0x20006e54
 8000400:	20006364 	.word	0x20006364
 8000404:	20006e50 	.word	0x20006e50
 8000408:	08000445 	.word	0x08000445
 800040c:	20006e68 	.word	0x20006e68
 8000410:	200074a4 	.word	0x200074a4
 8000414:	08000521 	.word	0x08000521
 8000418:	20005d24 	.word	0x20005d24
 800041c:	200064f0 	.word	0x200064f0
 8000420:	08000425 	.word	0x08000425

08000424 <Epos_Task>:



#include "conf_epos.h"
void Epos_Task(void *p_arg)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	//Task_MSG("CANApp_Task ... ");
	EposMaster_Init();
 800042c:	f003 fabc 	bl	80039a8 <EposMaster_Init>
	EposMaster_Start();
 8000430:	f003 faca 	bl	80039c8 <EposMaster_Start>
	for(;;)
	{
		OSTimeDlyHMSM(0, 0,0,5); 
 8000434:	2305      	movs	r3, #5
 8000436:	2200      	movs	r2, #0
 8000438:	2100      	movs	r1, #0
 800043a:	2000      	movs	r0, #0
 800043c:	f00c f930 	bl	800c6a0 <OSTimeDlyHMSM>
 8000440:	e7f8      	b.n	8000434 <Epos_Task+0x10>
	...

08000444 <CANRcv_Task>:
}
INT8U err;
//CAN 接收任务
OS_SEM_DATA  sem_data;
void CANRcv_Task(void *p_arg)
{	
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	CanRxMsg *RxMsg;
	Message msg;

	uint8_t i = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	77fb      	strb	r3, [r7, #31]
	(void)p_arg;   
	while(1){
		if((RxMsg = (CanRxMsg *)OSQPend(CANRcv_Q, 0, &error)) != (void *)0){
 8000450:	4b2b      	ldr	r3, [pc, #172]	; (8000500 <CANRcv_Task+0xbc>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a2b      	ldr	r2, [pc, #172]	; (8000504 <CANRcv_Task+0xc0>)
 8000456:	2100      	movs	r1, #0
 8000458:	4618      	mov	r0, r3
 800045a:	f00b fc63 	bl	800bd24 <OSQPend>
 800045e:	61b8      	str	r0, [r7, #24]
 8000460:	69bb      	ldr	r3, [r7, #24]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d0f4      	beq.n	8000450 <CANRcv_Task+0xc>
			msg.cob_id = RxMsg->head.StdId;				   //CAN-ID
 8000466:	69bb      	ldr	r3, [r7, #24]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	b29b      	uxth	r3, r3
 800046c:	81bb      	strh	r3, [r7, #12]
			printf("CAN Rcv 0x%x  ",msg.cob_id);
 800046e:	89bb      	ldrh	r3, [r7, #12]
 8000470:	4619      	mov	r1, r3
 8000472:	4825      	ldr	r0, [pc, #148]	; (8000508 <CANRcv_Task+0xc4>)
 8000474:	f00c f9c6 	bl	800c804 <iprintf>

			if(CAN_RTR_REMOTE == RxMsg->head.RTR)
 8000478:	69bb      	ldr	r3, [r7, #24]
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	2b02      	cmp	r3, #2
 800047e:	d102      	bne.n	8000486 <CANRcv_Task+0x42>
				msg.rtr = 1;							   //远程帧
 8000480:	2301      	movs	r3, #1
 8000482:	73bb      	strb	r3, [r7, #14]
 8000484:	e001      	b.n	800048a <CANRcv_Task+0x46>
			else
				msg.rtr = 0;							   //数据帧
 8000486:	2300      	movs	r3, #0
 8000488:	73bb      	strb	r3, [r7, #14]

			msg.len = (UNS8)RxMsg->head.DLC;				   //长度
 800048a:	69bb      	ldr	r3, [r7, #24]
 800048c:	691b      	ldr	r3, [r3, #16]
 800048e:	b2db      	uxtb	r3, r3
 8000490:	73fb      	strb	r3, [r7, #15]

			for(i=0; i<msg.len; i++){				   //数据
 8000492:	2300      	movs	r3, #0
 8000494:	77fb      	strb	r3, [r7, #31]
 8000496:	e016      	b.n	80004c6 <CANRcv_Task+0x82>
				msg.data[i] = RxMsg->Data[i];
 8000498:	7ffa      	ldrb	r2, [r7, #31]
 800049a:	7ffb      	ldrb	r3, [r7, #31]
 800049c:	69b9      	ldr	r1, [r7, #24]
 800049e:	440a      	add	r2, r1
 80004a0:	7f12      	ldrb	r2, [r2, #28]
 80004a2:	f107 0120 	add.w	r1, r7, #32
 80004a6:	440b      	add	r3, r1
 80004a8:	f803 2c10 	strb.w	r2, [r3, #-16]
				printf("-0x%x ",msg.data[i]);
 80004ac:	7ffb      	ldrb	r3, [r7, #31]
 80004ae:	f107 0220 	add.w	r2, r7, #32
 80004b2:	4413      	add	r3, r2
 80004b4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80004b8:	4619      	mov	r1, r3
 80004ba:	4814      	ldr	r0, [pc, #80]	; (800050c <CANRcv_Task+0xc8>)
 80004bc:	f00c f9a2 	bl	800c804 <iprintf>
			for(i=0; i<msg.len; i++){				   //数据
 80004c0:	7ffb      	ldrb	r3, [r7, #31]
 80004c2:	3301      	adds	r3, #1
 80004c4:	77fb      	strb	r3, [r7, #31]
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	7ffa      	ldrb	r2, [r7, #31]
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d3e4      	bcc.n	8000498 <CANRcv_Task+0x54>
			}
			printf("\r\n");
 80004ce:	4810      	ldr	r0, [pc, #64]	; (8000510 <CANRcv_Task+0xcc>)
 80004d0:	f00c fa0c 	bl	800c8ec <puts>

			//HAL_TIM_Base_Stop_IT(CANOPEN_TIMx_handle);
			canDispatch(&TestMaster_Data, &msg);	   //调用协议相关接口
 80004d4:	f107 030c 	add.w	r3, r7, #12
 80004d8:	4619      	mov	r1, r3
 80004da:	480e      	ldr	r0, [pc, #56]	; (8000514 <CANRcv_Task+0xd0>)
 80004dc:	f00a f842 	bl	800a564 <canDispatch>
			//HAL_TIM_Base_Start_IT(CANOPEN_TIMx_handle);

			OSSemQuery (CRCV_WAIT_Semp, &sem_data);
 80004e0:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <CANRcv_Task+0xd4>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	490d      	ldr	r1, [pc, #52]	; (800051c <CANRcv_Task+0xd8>)
 80004e6:	4618      	mov	r0, r3
 80004e8:	f00b fe4d 	bl	800c186 <OSSemQuery>
			if(sem_data.OSCnt < 1)
 80004ec:	4b0b      	ldr	r3, [pc, #44]	; (800051c <CANRcv_Task+0xd8>)
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d1ad      	bne.n	8000450 <CANRcv_Task+0xc>
				OSSemPost(CRCV_WAIT_Semp);
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <CANRcv_Task+0xd4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f00b fe0b 	bl	800c114 <OSSemPost>
		if((RxMsg = (CanRxMsg *)OSQPend(CANRcv_Q, 0, &error)) != (void *)0){
 80004fe:	e7a7      	b.n	8000450 <CANRcv_Task+0xc>
 8000500:	2000814c 	.word	0x2000814c
 8000504:	200074a9 	.word	0x200074a9
 8000508:	0800d790 	.word	0x0800d790
 800050c:	0800d7a0 	.word	0x0800d7a0
 8000510:	0800d7a8 	.word	0x0800d7a8
 8000514:	20005924 	.word	0x20005924
 8000518:	20006e64 	.word	0x20006e64
 800051c:	20006e58 	.word	0x20006e58

08000520 <CANSend_Task>:
	}
}

//CAN 发送任务
void CANSend_Task(void *p_arg)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	CanTxMsg * TxMsg;

    (void)p_arg;   
     while (1){
		if((TxMsg = (CanTxMsg *)OSQPend(CANSend_Q, 0, &error)) != (void *)0) //获取发送队列中数据
 8000528:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <CANSend_Task+0x90>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a21      	ldr	r2, [pc, #132]	; (80005b4 <CANSend_Task+0x94>)
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f00b fbf7 	bl	800bd24 <OSQPend>
 8000536:	60b8      	str	r0, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f4      	beq.n	8000528 <CANSend_Task+0x8>
		{
			static MAIL pmailbox;
			if(MX_CANx_send(pHCANx, TxMsg, pmailbox) != HAL_OK ){
 800053e:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <CANSend_Task+0x98>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	461a      	mov	r2, r3
 8000544:	68b9      	ldr	r1, [r7, #8]
 8000546:	481d      	ldr	r0, [pc, #116]	; (80005bc <CANSend_Task+0x9c>)
 8000548:	f000 fe66 	bl	8001218 <MX_CANx_send>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d00a      	beq.n	8000568 <CANSend_Task+0x48>
				OSTimeDly(1);	//第一次发送失败, 延时1个滴答, 再次发送
 8000552:	2001      	movs	r0, #1
 8000554:	f00c f852 	bl	800c5fc <OSTimeDly>
				MX_CANx_send(pHCANx, TxMsg, pmailbox);
 8000558:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <CANSend_Task+0x98>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	461a      	mov	r2, r3
 800055e:	68b9      	ldr	r1, [r7, #8]
 8000560:	4816      	ldr	r0, [pc, #88]	; (80005bc <CANSend_Task+0x9c>)
 8000562:	f000 fe59 	bl	8001218 <MX_CANx_send>
 8000566:	e7df      	b.n	8000528 <CANSend_Task+0x8>
			}
			else{
				MSG("can send %u\r\n",OSTime);
 8000568:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <CANSend_Task+0xa0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	4815      	ldr	r0, [pc, #84]	; (80005c4 <CANSend_Task+0xa4>)
 8000570:	f00c f948 	bl	800c804 <iprintf>
				printf("CAN Send 0x%lx  ",TxMsg->head.StdId);
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	4813      	ldr	r0, [pc, #76]	; (80005c8 <CANSend_Task+0xa8>)
 800057c:	f00c f942 	bl	800c804 <iprintf>
				for(int i=0; i<TxMsg->head.DLC; i++){				   //数据
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	e00b      	b.n	800059e <CANSend_Task+0x7e>
					printf("-0x%x ",TxMsg->Data[i]);
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	4413      	add	r3, r2
 800058c:	3318      	adds	r3, #24
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	4619      	mov	r1, r3
 8000592:	480e      	ldr	r0, [pc, #56]	; (80005cc <CANSend_Task+0xac>)
 8000594:	f00c f936 	bl	800c804 <iprintf>
				for(int i=0; i<TxMsg->head.DLC; i++){				   //数据
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	3301      	adds	r3, #1
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	691a      	ldr	r2, [r3, #16]
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d8ee      	bhi.n	8000586 <CANSend_Task+0x66>
				}
				printf("\r\n");
 80005a8:	4809      	ldr	r0, [pc, #36]	; (80005d0 <CANSend_Task+0xb0>)
 80005aa:	f00c f99f 	bl	800c8ec <puts>
		if((TxMsg = (CanTxMsg *)OSQPend(CANSend_Q, 0, &error)) != (void *)0) //获取发送队列中数据
 80005ae:	e7bb      	b.n	8000528 <CANSend_Task+0x8>
 80005b0:	20008148 	.word	0x20008148
 80005b4:	200074a9 	.word	0x200074a9
 80005b8:	20005bec 	.word	0x20005bec
 80005bc:	200074ac 	.word	0x200074ac
 80005c0:	20008a30 	.word	0x20008a30
 80005c4:	0800d7ac 	.word	0x0800d7ac
 80005c8:	0800d7bc 	.word	0x0800d7bc
 80005cc:	0800d7a0 	.word	0x0800d7a0
 80005d0:	0800d7a8 	.word	0x0800d7a8

080005d4 <BSP_Init>:
 * 描述  ：时钟初始化、硬件初始化
 * 输入  ：无
 * 输出  ：无
 */
void BSP_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	Core_Config();		/* 配置系统时钟为72M */
 80005d8:	f000 fe56 	bl	8001288 <Core_Config>
	SysTick_init();		/* 初始化并使能SysTick定时器 */
 80005dc:	f000 f804 	bl	80005e8 <SysTick_init>
	Jlink_Init();
 80005e0:	f000 f80a 	bl	80005f8 <Jlink_Init>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <SysTick_init>:
 * 描述  ：配置SysTick定时器
 * 输入  ：无
 * 输出  ：无
 */
void SysTick_init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	tick_init(1000);
 80005ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f0:	f000 f94e 	bl	8000890 <tick_init>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <Jlink_Init>:
 */

#include "device_bsp.h"

void Jlink_Init(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
	  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
	  */
	  __HAL_AFIO_REMAP_SWJ_ENABLE();
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <Jlink_Init+0x24>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <Jlink_Init+0x24>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6053      	str	r3, [r2, #4]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	40010000 	.word	0x40010000

08000620 <CANHandle_Init>:
  ----------------------------------------------------------------------------*/
/* 包含的头文件 --------------------------------------------------------------*/
#include "conf_can.h"

void CANHandle_Init(uint32_t mode)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	hcan1.Instance = CAN1;
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <CANHandle_Init+0x6c>)
 800062a:	4a19      	ldr	r2, [pc, #100]	; (8000690 <CANHandle_Init+0x70>)
 800062c:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 3;
 800062e:	4b17      	ldr	r3, [pc, #92]	; (800068c <CANHandle_Init+0x6c>)
 8000630:	2203      	movs	r2, #3
 8000632:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = mode;
 8000634:	4a15      	ldr	r2, [pc, #84]	; (800068c <CANHandle_Init+0x6c>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6093      	str	r3, [r2, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <CANHandle_Init+0x6c>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <CANHandle_Init+0x6c>)
 8000642:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000646:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <CANHandle_Init+0x6c>)
 800064a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800064e:	615a      	str	r2, [r3, #20]
	hcan1.Init.TTCM = DISABLE; //时间触发模式 - 时间戳
 8000650:	4b0e      	ldr	r3, [pc, #56]	; (800068c <CANHandle_Init+0x6c>)
 8000652:	2200      	movs	r2, #0
 8000654:	761a      	strb	r2, [r3, #24]
	hcan1.Init.ABOM = DISABLE; //自动总线关闭管理模式
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <CANHandle_Init+0x6c>)
 8000658:	2200      	movs	r2, #0
 800065a:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AWUM = DISABLE; //自动唤醒模式
 800065c:	4b0b      	ldr	r3, [pc, #44]	; (800068c <CANHandle_Init+0x6c>)
 800065e:	2200      	movs	r2, #0
 8000660:	769a      	strb	r2, [r3, #26]
	hcan1.Init.NART = DISABLE; //禁止自动重发模式
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <CANHandle_Init+0x6c>)
 8000664:	2200      	movs	r2, #0
 8000666:	76da      	strb	r2, [r3, #27]
	hcan1.Init.RFLM = DISABLE; //接收FIFO锁定模式
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <CANHandle_Init+0x6c>)
 800066a:	2200      	movs	r2, #0
 800066c:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TXFP = ENABLE; //发送FIFO顺序优先级
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <CANHandle_Init+0x6c>)
 8000670:	2201      	movs	r2, #1
 8000672:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000674:	4805      	ldr	r0, [pc, #20]	; (800068c <CANHandle_Init+0x6c>)
 8000676:	f000 ff6b 	bl	8001550 <HAL_CAN_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d000      	beq.n	8000682 <CANHandle_Init+0x62>
	{
		Error_Handler()
 8000680:	e7fe      	b.n	8000680 <CANHandle_Init+0x60>
		;
	}
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200074ac 	.word	0x200074ac
 8000690:	40006400 	.word	0x40006400

08000694 <CAN_ITEnable>:

void CAN_ITEnable()
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	if (HAL_CAN_ActivateNotification(&hcan1,
 8000698:	2112      	movs	r1, #18
 800069a:	4804      	ldr	r0, [pc, #16]	; (80006ac <CAN_ITEnable+0x18>)
 800069c:	f001 fb4b 	bl	8001d36 <HAL_CAN_ActivateNotification>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d000      	beq.n	80006a8 <CAN_ITEnable+0x14>
			CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING)
			!= HAL_OK)
	{
		Error_Handler()
 80006a6:	e7fe      	b.n	80006a6 <CAN_ITEnable+0x12>
		;
	}
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200074ac 	.word	0x200074ac

080006b0 <MX_CAN1_Init>:
 * @brief : CAN的硬件功能初始化
 * Window > Preferences > C/C++ > Editor > Templates.
 */

void MX_CAN1_Init(uint32_t mode)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	CANHandle_Init(mode);
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff ffb1 	bl	8000620 <CANHandle_Init>
	CanFilter_Init(&hcan1, CAN_FILTER_FIFO0);
 80006be:	2100      	movs	r1, #0
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_CAN1_Init+0x24>)
 80006c2:	f000 f877 	bl	80007b4 <CanFilter_Init>
	CAN_ITEnable();
 80006c6:	f7ff ffe5 	bl	8000694 <CAN_ITEnable>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200074ac 	.word	0x200074ac

080006d8 <HAL_CAN_MspInit>:
 * @brief : 库函数提供的底层初始化 hook function: GPIO配置， 开启时钟， 中断设置
 * Window > Preferences > C/C++ > Editor > Templates.
 */

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN1)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a2f      	ldr	r2, [pc, #188]	; (80007a4 <HAL_CAN_MspInit+0xcc>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d157      	bne.n	800079a <HAL_CAN_MspInit+0xc2>
  {
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006ea:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <HAL_CAN_MspInit+0xd0>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	4a2e      	ldr	r2, [pc, #184]	; (80007a8 <HAL_CAN_MspInit+0xd0>)
 80006f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006f4:	61d3      	str	r3, [r2, #28]
 80006f6:	4b2c      	ldr	r3, [pc, #176]	; (80007a8 <HAL_CAN_MspInit+0xd0>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_AFIO_CLK_ENABLE();
 8000702:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <HAL_CAN_MspInit+0xd0>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	4a28      	ldr	r2, [pc, #160]	; (80007a8 <HAL_CAN_MspInit+0xd0>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6193      	str	r3, [r2, #24]
 800070e:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <HAL_CAN_MspInit+0xd0>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <HAL_CAN_MspInit+0xd0>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	4a22      	ldr	r2, [pc, #136]	; (80007a8 <HAL_CAN_MspInit+0xd0>)
 8000720:	f043 0308 	orr.w	r3, r3, #8
 8000724:	6193      	str	r3, [r2, #24]
 8000726:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <HAL_CAN_MspInit+0xd0>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	f003 0308 	and.w	r3, r3, #8
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]

    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800073c:	2301      	movs	r3, #1
 800073e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	4819      	ldr	r0, [pc, #100]	; (80007ac <HAL_CAN_MspInit+0xd4>)
 8000748:	f001 fe62 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800074c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000756:	2303      	movs	r3, #3
 8000758:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	4812      	ldr	r0, [pc, #72]	; (80007ac <HAL_CAN_MspInit+0xd4>)
 8000762:	f001 fe55 	bl	8002410 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_CAN_MspInit+0xd8>)
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
 800076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
 8000774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000776:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
 800077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
 8000784:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <HAL_CAN_MspInit+0xd8>)
 8000786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000788:	6053      	str	r3, [r2, #4]
    /* CAN1 interrupt Init */
    /*HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0,1);
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);*/
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2014      	movs	r0, #20
 8000790:	f001 fdeb 	bl	800236a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000794:	2014      	movs	r0, #20
 8000796:	f001 fe04 	bl	80023a2 <HAL_NVIC_EnableIRQ>

  }
}
 800079a:	bf00      	nop
 800079c:	3728      	adds	r7, #40	; 0x28
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40006400 	.word	0x40006400
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40010c00 	.word	0x40010c00
 80007b0:	40010000 	.word	0x40010000

080007b4 <CanFilter_Init>:
 * @brief : 过滤器配置
 * Window > Preferences > C/C++ > Editor > Templates.
 */

void CanFilter_Init(CAN_HandleTypeDef* hcan, uint32_t FILTER_FIFO)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	; 0x30
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
  CAN_FilterTypeDef canfilter;

  //use different filter for can1&can2
  if(hcan->Instance == CAN1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <CanFilter_Init+0x4c>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d111      	bne.n	80007ec <CanFilter_Init+0x38>
  {
	canfilter.FilterMode = CAN_FILTERMODE_IDMASK;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
	canfilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80007cc:	2301      	movs	r3, #1
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24

	//Filtered any ID you want here
	canfilter.FilterIdHigh = 0x0000;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
	canfilter.FilterIdLow = 0x0000;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
	canfilter.FilterMaskIdHigh = 0x0000;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
	canfilter.FilterMaskIdLow = 0x0000;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

	canfilter.FilterFIFOAssignment = FILTER_FIFO;
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	61bb      	str	r3, [r7, #24]
	canfilter.FilterActivation = ENABLE;
 80007e4:	2301      	movs	r3, #1
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28
	canfilter.FilterBank = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  }


  HAL_CAN_ConfigFilter(hcan, &canfilter);
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	4619      	mov	r1, r3
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f000 ffa7 	bl	8001746 <HAL_CAN_ConfigFilter>
}
 80007f8:	bf00      	nop
 80007fa:	3730      	adds	r7, #48	; 0x30
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40006400 	.word	0x40006400

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b090      	sub	sp, #64	; 0x40
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	2228      	movs	r2, #40	; 0x28
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f00b ffee 	bl	800c7f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000826:	2309      	movs	r3, #9
 8000828:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800082a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800082e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000834:	2301      	movs	r3, #1
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000838:	2301      	movs	r3, #1
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083c:	2302      	movs	r3, #2
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000844:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000846:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800084a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	f107 0318 	add.w	r3, r7, #24
 8000850:	4618      	mov	r0, r3
 8000852:	f001 ff5f 	bl	8002714 <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d000      	beq.n	800085e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800085c:	e7fe      	b.n	800085c <SystemClock_Config+0x58>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085e:	230f      	movs	r3, #15
 8000860:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000862:	2302      	movs	r3, #2
 8000864:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800086a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800086e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2102      	movs	r1, #2
 8000878:	4618      	mov	r0, r3
 800087a:	f002 f9cb 	bl	8002c14 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d000      	beq.n	8000886 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000884:	e7fe      	b.n	8000884 <SystemClock_Config+0x80>
  }
}
 8000886:	bf00      	nop
 8000888:	3740      	adds	r7, #64	; 0x40
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <tick_init>:

void tick_init(uint32_t period_us)//1miu_s
	{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	/**Configure the Systick interrupt time */
	HAL_SYSTICK_Config(SystemCoreClock/(1000000/period_us));//10e5=1x10^6
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <tick_init+0x38>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	490b      	ldr	r1, [pc, #44]	; (80008cc <tick_init+0x3c>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80008a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fd88 	bl	80023be <HAL_SYSTICK_Config>

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80008ae:	2004      	movs	r0, #4
 80008b0:	f001 fd92 	bl	80023d8 <HAL_SYSTICK_CLKSourceConfig>

	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008bc:	f001 fd55 	bl	800236a <HAL_NVIC_SetPriority>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20004e24 	.word	0x20004e24
 80008cc:	000f4240 	.word	0x000f4240

080008d0 <NVIC_Init>:

/**
  * Initializes the Global MSP.
  */
void NVIC_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80008d4:	2005      	movs	r0, #5
 80008d6:	f001 fd3d 	bl	8002354 <HAL_NVIC_SetPriorityGrouping>
	
  /* System interrupt init*/

  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	f06f 000b 	mvn.w	r0, #11
 80008e2:	f001 fd42 	bl	800236a <HAL_NVIC_SetPriority>

  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	f06f 000a 	mvn.w	r0, #10
 80008ee:	f001 fd3c 	bl	800236a <HAL_NVIC_SetPriority>

  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	f06f 0009 	mvn.w	r0, #9
 80008fa:	f001 fd36 	bl	800236a <HAL_NVIC_SetPriority>

  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	f06f 0004 	mvn.w	r0, #4
 8000906:	f001 fd30 	bl	800236a <HAL_NVIC_SetPriority>

  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	f06f 0003 	mvn.w	r0, #3
 8000912:	f001 fd2a 	bl	800236a <HAL_NVIC_SetPriority>

  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	f06f 0001 	mvn.w	r0, #1
 800091e:	f001 fd24 	bl	800236a <HAL_NVIC_SetPriority>

  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800092a:	f001 fd1e 	bl	800236a <HAL_NVIC_SetPriority>
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <Flash_prefetch>:

#ifndef  PREFETCH_ENABLE
#define  PREFETCH_ENABLE              1
#endif

void Flash_prefetch(void){
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <Flash_prefetch+0x18>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a03      	ldr	r2, [pc, #12]	; (800094c <Flash_prefetch+0x18>)
 800093e:	f043 0310 	orr.w	r3, r3, #16
 8000942:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	40022000 	.word	0x40022000

08000950 <MX_TIM_CounterInterrupt>:
 * period - timer time
 * Window > Preferences > C/C++ > Editor > Templates.
 */

void MX_TIM_CounterInterrupt(TIM_TypeDef * TIM, uint32_t Hz, uint32_t period)	//TIM miu_s
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
	if(TIM == TIM2){
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000962:	d105      	bne.n	8000970 <MX_TIM_CounterInterrupt+0x20>
		MX_TIMx_CountSet(TIM2, Hz, period);
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	68b9      	ldr	r1, [r7, #8]
 8000968:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800096c:	f000 f804 	bl	8000978 <MX_TIMx_CountSet>
//		{
//			Error_Handler();
//		}
	}

}
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <MX_TIMx_CountSet>:
 * @brief : 计数模式配置
 * Window > Preferences > C/C++ > Editor > Templates.
 */

void MX_TIMx_CountSet(TIM_TypeDef * TIM, uint32_t unit, uint32_t period)	//TIM miu_s
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
	if(TIM == TIM2){
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800098a:	d11b      	bne.n	80009c4 <MX_TIMx_CountSet+0x4c>
		htim2.Instance = TIM2;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_TIMx_CountSet+0x54>)
 800098e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000992:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = HAL_RCC_GetPCLK2Freq()/unit;//APB1 1MHz
 8000994:	f002 faa8 	bl	8002ee8 <HAL_RCC_GetPCLK2Freq>
 8000998:	4602      	mov	r2, r0
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a0:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <MX_TIMx_CountSet+0x54>)
 80009a2:	6053      	str	r3, [r2, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_TIMx_CountSet+0x54>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = period;
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <MX_TIMx_CountSet+0x54>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	60d3      	str	r3, [r2, #12]
		htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;/*!< TIMx_ARR register is not buffered */
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_TIMx_CountSet+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim2) != HAL_OK){
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_TIMx_CountSet+0x54>)
 80009b8:	f002 fac8 	bl	8002f4c <HAL_TIM_Base_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d000      	beq.n	80009c4 <MX_TIMx_CountSet+0x4c>
			Error_Handler();
 80009c2:	e7fe      	b.n	80009c2 <MX_TIMx_CountSet+0x4a>
		}
	}
}
 80009c4:	bf00      	nop
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20007c94 	.word	0x20007c94
 80009d0:	20007b54 	.word	0x20007b54

080009d4 <HAL_TIM_Base_MspInit>:
 * @brief : 中断开关配置
 * Window > Preferences > C/C++ > Editor > Templates.
 */

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	MX_TIM_CLK(tim_baseHandle);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f000 f82d 	bl	8000a3c <MX_TIM_CLK>
	if(tim_baseHandle->Instance==TIM1){
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <HAL_TIM_Base_MspInit+0x5c>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d103      	bne.n	80009f4 <HAL_TIM_Base_MspInit+0x20>
 		MX_NVIC(tim_baseHandle);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f000 f87d 	bl	8000aec <MX_NVIC>
	else if(tim_baseHandle->Instance==TIM4)
	{
		MX_NVIC(tim_baseHandle);
	}

}
 80009f2:	e019      	b.n	8000a28 <HAL_TIM_Base_MspInit+0x54>
	else if(tim_baseHandle->Instance==TIM2)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009fc:	d103      	bne.n	8000a06 <HAL_TIM_Base_MspInit+0x32>
		MX_NVIC(tim_baseHandle);
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f000 f874 	bl	8000aec <MX_NVIC>
}
 8000a04:	e010      	b.n	8000a28 <HAL_TIM_Base_MspInit+0x54>
	else if(tim_baseHandle->Instance==TIM3)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <HAL_TIM_Base_MspInit+0x60>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d103      	bne.n	8000a18 <HAL_TIM_Base_MspInit+0x44>
		MX_NVIC(tim_baseHandle);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f000 f86b 	bl	8000aec <MX_NVIC>
}
 8000a16:	e007      	b.n	8000a28 <HAL_TIM_Base_MspInit+0x54>
	else if(tim_baseHandle->Instance==TIM4)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a06      	ldr	r2, [pc, #24]	; (8000a38 <HAL_TIM_Base_MspInit+0x64>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d102      	bne.n	8000a28 <HAL_TIM_Base_MspInit+0x54>
		MX_NVIC(tim_baseHandle);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f000 f862 	bl	8000aec <MX_NVIC>
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40012c00 	.word	0x40012c00
 8000a34:	40000400 	.word	0x40000400
 8000a38:	40000800 	.word	0x40000800

08000a3c <MX_TIM_CLK>:

void MX_TIM_CLK(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  if(tim_baseHandle->Instance==TIM1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a24      	ldr	r2, [pc, #144]	; (8000adc <MX_TIM_CLK+0xa0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d10c      	bne.n	8000a68 <MX_TIM_CLK+0x2c>
  {
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a4e:	4b24      	ldr	r3, [pc, #144]	; (8000ae0 <MX_TIM_CLK+0xa4>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	4a23      	ldr	r2, [pc, #140]	; (8000ae0 <MX_TIM_CLK+0xa4>)
 8000a54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a58:	6193      	str	r3, [r2, #24]
 8000a5a:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <MX_TIM_CLK+0xa4>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697b      	ldr	r3, [r7, #20]
  }
	else if(tim_baseHandle->Instance==TIM4)
  {
    __HAL_RCC_TIM4_CLK_ENABLE();
  }
}
 8000a66:	e034      	b.n	8000ad2 <MX_TIM_CLK+0x96>
  else if(tim_baseHandle->Instance==TIM2)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a70:	d10c      	bne.n	8000a8c <MX_TIM_CLK+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <MX_TIM_CLK+0xa4>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	4a1a      	ldr	r2, [pc, #104]	; (8000ae0 <MX_TIM_CLK+0xa4>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	61d3      	str	r3, [r2, #28]
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MX_TIM_CLK+0xa4>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
}
 8000a8a:	e022      	b.n	8000ad2 <MX_TIM_CLK+0x96>
  else if(tim_baseHandle->Instance==TIM3)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <MX_TIM_CLK+0xa8>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d10c      	bne.n	8000ab0 <MX_TIM_CLK+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <MX_TIM_CLK+0xa4>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	4a11      	ldr	r2, [pc, #68]	; (8000ae0 <MX_TIM_CLK+0xa4>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	61d3      	str	r3, [r2, #28]
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <MX_TIM_CLK+0xa4>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
}
 8000aae:	e010      	b.n	8000ad2 <MX_TIM_CLK+0x96>
	else if(tim_baseHandle->Instance==TIM4)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0c      	ldr	r2, [pc, #48]	; (8000ae8 <MX_TIM_CLK+0xac>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d10b      	bne.n	8000ad2 <MX_TIM_CLK+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_TIM_CLK+0xa4>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <MX_TIM_CLK+0xa4>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	61d3      	str	r3, [r2, #28]
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_TIM_CLK+0xa4>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
}
 8000ad2:	bf00      	nop
 8000ad4:	371c      	adds	r7, #28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	40012c00 	.word	0x40012c00
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40000400 	.word	0x40000400
 8000ae8:	40000800 	.word	0x40000800

08000aec <MX_NVIC>:

void MX_NVIC(TIM_HandleTypeDef* tim_baseHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	if(tim_baseHandle->Instance==TIM1){
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a20      	ldr	r2, [pc, #128]	; (8000b7c <MX_NVIC+0x90>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d110      	bne.n	8000b20 <MX_NVIC+0x34>
		HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 2);
 8000afe:	2202      	movs	r2, #2
 8000b00:	2101      	movs	r1, #1
 8000b02:	2019      	movs	r0, #25
 8000b04:	f001 fc31 	bl	800236a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b08:	2019      	movs	r0, #25
 8000b0a:	f001 fc4a 	bl	80023a2 <HAL_NVIC_EnableIRQ>
//	    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
//	    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
//	    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
//	    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
	    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	201b      	movs	r0, #27
 8000b14:	f001 fc29 	bl	800236a <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b18:	201b      	movs	r0, #27
 8000b1a:	f001 fc42 	bl	80023a2 <HAL_NVIC_EnableIRQ>
	else if(tim_baseHandle->Instance==TIM4)
	{
		HAL_NVIC_SetPriority(TIM4_IRQn, 1, 2);
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
	}
}
 8000b1e:	e028      	b.n	8000b72 <MX_NVIC+0x86>
	else if(tim_baseHandle->Instance==TIM2)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b28:	d108      	bne.n	8000b3c <MX_NVIC+0x50>
		HAL_NVIC_SetPriority(TIM2_IRQn, 1, 1);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	201c      	movs	r0, #28
 8000b30:	f001 fc1b 	bl	800236a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b34:	201c      	movs	r0, #28
 8000b36:	f001 fc34 	bl	80023a2 <HAL_NVIC_EnableIRQ>
}
 8000b3a:	e01a      	b.n	8000b72 <MX_NVIC+0x86>
	else if(tim_baseHandle->Instance==TIM3)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0f      	ldr	r2, [pc, #60]	; (8000b80 <MX_NVIC+0x94>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d108      	bne.n	8000b58 <MX_NVIC+0x6c>
		HAL_NVIC_SetPriority(TIM3_IRQn, 1, 2);
 8000b46:	2202      	movs	r2, #2
 8000b48:	2101      	movs	r1, #1
 8000b4a:	201d      	movs	r0, #29
 8000b4c:	f001 fc0d 	bl	800236a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b50:	201d      	movs	r0, #29
 8000b52:	f001 fc26 	bl	80023a2 <HAL_NVIC_EnableIRQ>
}
 8000b56:	e00c      	b.n	8000b72 <MX_NVIC+0x86>
	else if(tim_baseHandle->Instance==TIM4)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a09      	ldr	r2, [pc, #36]	; (8000b84 <MX_NVIC+0x98>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d107      	bne.n	8000b72 <MX_NVIC+0x86>
		HAL_NVIC_SetPriority(TIM4_IRQn, 1, 2);
 8000b62:	2202      	movs	r2, #2
 8000b64:	2101      	movs	r1, #1
 8000b66:	201e      	movs	r0, #30
 8000b68:	f001 fbff 	bl	800236a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b6c:	201e      	movs	r0, #30
 8000b6e:	f001 fc18 	bl	80023a2 <HAL_NVIC_EnableIRQ>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40012c00 	.word	0x40012c00
 8000b80:	40000400 	.word	0x40000400
 8000b84:	40000800 	.word	0x40000800

08000b88 <setTimeCount>:
    __HAL_RCC_TIM4_CLK_DISABLE();
  }
} 

void setTimeCount(TIM_TypeDef * TIMx, uint32_t count)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
	TIMx->CNT = count;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <getTimeCount>:

uint32_t getTimeCount(TIM_TypeDef * TIMx)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
	return TIMx->CNT;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000bbc:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <MX_USART1_UART_Init+0x48>)
 8000bbe:	4a11      	ldr	r2, [pc, #68]	; (8000c04 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_USART1_UART_Init+0x48>)
 8000bc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <MX_USART1_UART_Init+0x48>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MX_USART1_UART_Init+0x48>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <MX_USART1_UART_Init+0x48>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <MX_USART1_UART_Init+0x48>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <MX_USART1_UART_Init+0x48>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <MX_USART1_UART_Init+0x48>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
	
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bee:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_USART1_UART_Init+0x48>)
 8000bf0:	f002 fbbc 	bl	800336c <HAL_UART_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d000      	beq.n	8000bfc <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8000bfa:	e7fe      	b.n	8000bfa <MX_USART1_UART_Init+0x42>
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20007d98 	.word	0x20007d98
 8000c04:	40013800 	.word	0x40013800

08000c08 <USART_Hardware_Init>:

void USART_Hardware_Init(UART_HandleTypeDef* uartHandle)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
    if(uartHandle->Instance==USART1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a3f      	ldr	r2, [pc, #252]	; (8000d14 <USART_Hardware_Init+0x10c>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d134      	bne.n	8000c84 <USART_Hardware_Init+0x7c>
    {
		/*
		UART1 TX���� PA9
		UART1 RX���� PA10
		*/
		__HAL_RCC_USART1_CLK_ENABLE();
 8000c1a:	4b3f      	ldr	r3, [pc, #252]	; (8000d18 <USART_Hardware_Init+0x110>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	4a3e      	ldr	r2, [pc, #248]	; (8000d18 <USART_Hardware_Init+0x110>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c24:	6193      	str	r3, [r2, #24]
 8000c26:	4b3c      	ldr	r3, [pc, #240]	; (8000d18 <USART_Hardware_Init+0x110>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b39      	ldr	r3, [pc, #228]	; (8000d18 <USART_Hardware_Init+0x110>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	4a38      	ldr	r2, [pc, #224]	; (8000d18 <USART_Hardware_Init+0x110>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	6193      	str	r3, [r2, #24]
 8000c3e:	4b36      	ldr	r3, [pc, #216]	; (8000d18 <USART_Hardware_Init+0x110>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
		//    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		//    GPIO_InitStruct.Pull = GPIO_NOPULL;
		//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
		//    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c4a:	4b34      	ldr	r3, [pc, #208]	; (8000d1c <USART_Hardware_Init+0x114>)
 8000c4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c50:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c52:	4b32      	ldr	r3, [pc, #200]	; (8000d1c <USART_Hardware_Init+0x114>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	4b30      	ldr	r3, [pc, #192]	; (8000d1c <USART_Hardware_Init+0x114>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	492f      	ldr	r1, [pc, #188]	; (8000d1c <USART_Hardware_Init+0x114>)
 8000c60:	482f      	ldr	r0, [pc, #188]	; (8000d20 <USART_Hardware_Init+0x118>)
 8000c62:	f001 fbd5 	bl	8002410 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c66:	4b2d      	ldr	r3, [pc, #180]	; (8000d1c <USART_Hardware_Init+0x114>)
 8000c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c6c:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <USART_Hardware_Init+0x114>)
 8000c70:	2202      	movs	r2, #2
 8000c72:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c74:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <USART_Hardware_Init+0x114>)
 8000c76:	2203      	movs	r2, #3
 8000c78:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	4928      	ldr	r1, [pc, #160]	; (8000d1c <USART_Hardware_Init+0x114>)
 8000c7c:	4828      	ldr	r0, [pc, #160]	; (8000d20 <USART_Hardware_Init+0x118>)
 8000c7e:	f001 fbc7 	bl	8002410 <HAL_GPIO_Init>
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
    }
}
 8000c82:	e043      	b.n	8000d0c <USART_Hardware_Init+0x104>
    else if(uartHandle->Instance==USART2)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a26      	ldr	r2, [pc, #152]	; (8000d24 <USART_Hardware_Init+0x11c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d11c      	bne.n	8000cc8 <USART_Hardware_Init+0xc0>
      __HAL_RCC_USART2_CLK_ENABLE();
 8000c8e:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <USART_Hardware_Init+0x110>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	4a21      	ldr	r2, [pc, #132]	; (8000d18 <USART_Hardware_Init+0x110>)
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	61d3      	str	r3, [r2, #28]
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <USART_Hardware_Init+0x110>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
      GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <USART_Hardware_Init+0x114>)
 8000ca8:	2260      	movs	r2, #96	; 0x60
 8000caa:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <USART_Hardware_Init+0x114>)
 8000cae:	2202      	movs	r2, #2
 8000cb0:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <USART_Hardware_Init+0x114>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <USART_Hardware_Init+0x114>)
 8000cba:	2203      	movs	r2, #3
 8000cbc:	60da      	str	r2, [r3, #12]
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cbe:	4917      	ldr	r1, [pc, #92]	; (8000d1c <USART_Hardware_Init+0x114>)
 8000cc0:	4819      	ldr	r0, [pc, #100]	; (8000d28 <USART_Hardware_Init+0x120>)
 8000cc2:	f001 fba5 	bl	8002410 <HAL_GPIO_Init>
}
 8000cc6:	e021      	b.n	8000d0c <USART_Hardware_Init+0x104>
    else if(uartHandle->Instance==USART3)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <USART_Hardware_Init+0x124>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d11c      	bne.n	8000d0c <USART_Hardware_Init+0x104>
      __HAL_RCC_USART3_CLK_ENABLE();
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <USART_Hardware_Init+0x110>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	4a10      	ldr	r2, [pc, #64]	; (8000d18 <USART_Hardware_Init+0x110>)
 8000cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cdc:	61d3      	str	r3, [r2, #28]
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <USART_Hardware_Init+0x110>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
      GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <USART_Hardware_Init+0x114>)
 8000cec:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cf0:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <USART_Hardware_Init+0x114>)
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <USART_Hardware_Init+0x114>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <USART_Hardware_Init+0x114>)
 8000d00:	2203      	movs	r2, #3
 8000d02:	60da      	str	r2, [r3, #12]
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d04:	4905      	ldr	r1, [pc, #20]	; (8000d1c <USART_Hardware_Init+0x114>)
 8000d06:	4808      	ldr	r0, [pc, #32]	; (8000d28 <USART_Hardware_Init+0x120>)
 8000d08:	f001 fb82 	bl	8002410 <HAL_GPIO_Init>
}
 8000d0c:	bf00      	nop
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40013800 	.word	0x40013800
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	20007dd8 	.word	0x20007dd8
 8000d20:	40010800 	.word	0x40010800
 8000d24:	40004400 	.word	0x40004400
 8000d28:	40011400 	.word	0x40011400
 8000d2c:	40004800 	.word	0x40004800

08000d30 <USART_NVIC_Init>:

void USART_NVIC_Init(UART_HandleTypeDef* uartHandle)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
    if(uartHandle->Instance==USART1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <USART_NVIC_Init+0x74>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d108      	bne.n	8000d54 <USART_NVIC_Init+0x24>
    {
		HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2101      	movs	r1, #1
 8000d46:	2025      	movs	r0, #37	; 0x25
 8000d48:	f001 fb0f 	bl	800236a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d4c:	2025      	movs	r0, #37	; 0x25
 8000d4e:	f001 fb28 	bl	80023a2 <HAL_NVIC_EnableIRQ>
    {
		/* Peripheral interrupt init */
		HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(USART3_IRQn);
    }
}
 8000d52:	e022      	b.n	8000d9a <USART_NVIC_Init+0x6a>
    else if(uartHandle->Instance==USART2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a13      	ldr	r2, [pc, #76]	; (8000da8 <USART_NVIC_Init+0x78>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d110      	bne.n	8000d80 <USART_NVIC_Init+0x50>
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	2026      	movs	r0, #38	; 0x26
 8000d64:	f001 fb01 	bl	800236a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d68:	2026      	movs	r0, #38	; 0x26
 8000d6a:	f001 fb1a 	bl	80023a2 <HAL_NVIC_EnableIRQ>
		__HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <USART_NVIC_Init+0x7c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <USART_NVIC_Init+0x7c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f042 0220 	orr.w	r2, r2, #32
 8000d7c:	60da      	str	r2, [r3, #12]
}
 8000d7e:	e00c      	b.n	8000d9a <USART_NVIC_Init+0x6a>
    else if(uartHandle->Instance==USART3)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <USART_NVIC_Init+0x80>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d107      	bne.n	8000d9a <USART_NVIC_Init+0x6a>
		HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2027      	movs	r0, #39	; 0x27
 8000d90:	f001 faeb 	bl	800236a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d94:	2027      	movs	r0, #39	; 0x27
 8000d96:	f001 fb04 	bl	80023a2 <HAL_NVIC_EnableIRQ>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40013800 	.word	0x40013800
 8000da8:	40004400 	.word	0x40004400
 8000dac:	20007de8 	.word	0x20007de8
 8000db0:	40004800 	.word	0x40004800

08000db4 <HAL_UART_MspInit>:

}


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	USART_Hardware_Init(uartHandle);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff23 	bl	8000c08 <USART_Hardware_Init>
	USART_NVIC_Init(uartHandle);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffb4 	bl	8000d30 <USART_NVIC_Init>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <addDebugBuffer>:
 * @brief : 向buff中添加数据，buffer满了则返回0
 * Window > Preferences > C/C++ > Editor > Templates.
 */

uint8_t addDebugBuffer(char c)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
	if((debugBuffer.in+1)%BufferSize == debugBuffer.out)
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <addDebugBuffer+0x8c>)
 8000ddc:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000de0:	3320      	adds	r3, #32
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <addDebugBuffer+0x90>)
 8000de8:	fb83 1302 	smull	r1, r3, r3, r2
 8000dec:	1359      	asrs	r1, r3, #13
 8000dee:	17d3      	asrs	r3, r2, #31
 8000df0:	1acb      	subs	r3, r1, r3
 8000df2:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000df6:	fb01 f303 	mul.w	r3, r1, r3
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <addDebugBuffer+0x8c>)
 8000dfe:	f502 429c 	add.w	r2, r2, #19968	; 0x4e00
 8000e02:	3222      	adds	r2, #34	; 0x22
 8000e04:	8812      	ldrh	r2, [r2, #0]
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d101      	bne.n	8000e0e <addDebugBuffer+0x3e>
		return 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e020      	b.n	8000e50 <addDebugBuffer+0x80>
	debugBuffer.data[debugBuffer.in] = c;
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <addDebugBuffer+0x8c>)
 8000e10:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000e14:	3320      	adds	r3, #32
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4a10      	ldr	r2, [pc, #64]	; (8000e5c <addDebugBuffer+0x8c>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	5453      	strb	r3, [r2, r1]
	debugBuffer.in = (debugBuffer.in + 1)%BufferSize;
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <addDebugBuffer+0x8c>)
 8000e22:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000e26:	3320      	adds	r3, #32
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	4a0c      	ldr	r2, [pc, #48]	; (8000e60 <addDebugBuffer+0x90>)
 8000e2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e32:	1351      	asrs	r1, r2, #13
 8000e34:	17da      	asrs	r2, r3, #31
 8000e36:	1a8a      	subs	r2, r1, r2
 8000e38:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000e3c:	fb01 f202 	mul.w	r2, r1, r2
 8000e40:	1a9a      	subs	r2, r3, r2
 8000e42:	b292      	uxth	r2, r2
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <addDebugBuffer+0x8c>)
 8000e46:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000e4a:	3320      	adds	r3, #32
 8000e4c:	801a      	strh	r2, [r3, #0]
	return 1;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	68db8bad 	.word	0x68db8bad

08000e64 <getDebugBuffer>:
 *
 * @brief : 获取buff中的数据，buffer为空则返回0
 * Window > Preferences > C/C++ > Editor > Templates.
 */
char getDebugBuffer(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
	char c;
	if(debugBuffer.in == debugBuffer.out)
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <getDebugBuffer+0x74>)
 8000e6c:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000e70:	3320      	adds	r3, #32
 8000e72:	881a      	ldrh	r2, [r3, #0]
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <getDebugBuffer+0x74>)
 8000e76:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000e7a:	3322      	adds	r3, #34	; 0x22
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d101      	bne.n	8000e86 <getDebugBuffer+0x22>
			return 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e023      	b.n	8000ece <getDebugBuffer+0x6a>
	c = debugBuffer.data[debugBuffer.out++];
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <getDebugBuffer+0x74>)
 8000e88:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000e8c:	3322      	adds	r3, #34	; 0x22
 8000e8e:	881a      	ldrh	r2, [r3, #0]
 8000e90:	1c53      	adds	r3, r2, #1
 8000e92:	b299      	uxth	r1, r3
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <getDebugBuffer+0x74>)
 8000e96:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000e9a:	3322      	adds	r3, #34	; 0x22
 8000e9c:	8019      	strh	r1, [r3, #0]
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <getDebugBuffer+0x74>)
 8000ea0:	5c9b      	ldrb	r3, [r3, r2]
 8000ea2:	71fb      	strb	r3, [r7, #7]
	debugBuffer.out = (debugBuffer.out)%BufferSize;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <getDebugBuffer+0x74>)
 8000ea6:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000eaa:	3322      	adds	r3, #34	; 0x22
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <getDebugBuffer+0x78>)
 8000eb0:	fba2 1203 	umull	r1, r2, r2, r3
 8000eb4:	0b92      	lsrs	r2, r2, #14
 8000eb6:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000eba:	fb01 f202 	mul.w	r2, r1, r2
 8000ebe:	1a9b      	subs	r3, r3, r2
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <getDebugBuffer+0x74>)
 8000ec4:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000ec8:	3322      	adds	r3, #34	; 0x22
 8000eca:	801a      	strh	r2, [r3, #0]
	return c;
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	d1b71759 	.word	0xd1b71759

08000ee0 <_write>:
 * @brief : STM32CubeIDE printf 重定位到 PORT
 * Window > Preferences > C/C++ > Editor > Templates.
 */
#ifndef ITM_dbg
int _write(int file, char *ptr, int len)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
	int DataIndex;

	for (DataIndex = 0; DataIndex < len; DataIndex++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e009      	b.n	8000f06 <_write+0x26>
	{
		addDebugBuffer( *ptr++ );
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1c5a      	adds	r2, r3, #1
 8000ef6:	60ba      	str	r2, [r7, #8]
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff68 	bl	8000dd0 <addDebugBuffer>
	for (DataIndex = 0; DataIndex < len; DataIndex++)
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3301      	adds	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	dbf1      	blt.n	8000ef2 <_write+0x12>
	}
	__HAL_UART_ENABLE_IT(&PORT, UART_IT_TXE);
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <_write+0x48>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <_write+0x48>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f1c:	60da      	str	r2, [r3, #12]
	return len;
 8000f1e:	687b      	ldr	r3, [r7, #4]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20007d98 	.word	0x20007d98

08000f2c <debug_init>:
 *			Set serial property
 * Window > Preferences > C/C++ > Editor > Templates.
 */

void debug_init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	MX_USART1_UART_Init();
 8000f30:	f7ff fe42 	bl	8000bb8 <MX_USART1_UART_Init>
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <debug_IRQ>:
 * @brief : 中断处理函数
 * Window > Preferences > C/C++ > Editor > Templates.
 */

void debug_IRQ(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
	uint32_t isrflags   = READ_REG(huart1.Instance->SR);
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <debug_IRQ+0x5c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60fb      	str	r3, [r7, #12]
	uint32_t cr1its     = READ_REG(huart1.Instance->CR1);
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <debug_IRQ+0x5c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
	char c;
	/* UART in mode Transmitter -----------TXE ------------------------------------*/
	if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET)){
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d018      	beq.n	8000f8a <debug_IRQ+0x52>
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d013      	beq.n	8000f8a <debug_IRQ+0x52>
	  c = getDebugBuffer();
 8000f62:	f7ff ff7f 	bl	8000e64 <getDebugBuffer>
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
	  if(c != 0){
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d004      	beq.n	8000f7a <debug_IRQ+0x42>
		  huart1.Instance->DR = (uint16_t)( c & (uint16_t)0x01FF);
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <debug_IRQ+0x5c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	79fa      	ldrb	r2, [r7, #7]
 8000f76:	605a      	str	r2, [r3, #4]
	/* UART in mode Receiver -------------------RXNE------------------------------*/
	/*if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)){
		UART_Receive_IT(huart1);
		return;
	}*/
}
 8000f78:	e007      	b.n	8000f8a <debug_IRQ+0x52>
		  __HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <debug_IRQ+0x5c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <debug_IRQ+0x5c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f88:	60da      	str	r2, [r3, #12]
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20007d98 	.word	0x20007d98

08000f98 <HAL_CAN_RxFifo0MsgPendingCallback>:
*************************************************/
INT8U rxindex = 0;

#ifndef TEST_ON
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	MSG("can Qrcv %u\r\n",OSTime);
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8000fa8:	f00b fc2c 	bl	800c804 <iprintf>
	CANRcv_DateFromISR();
 8000fac:	f000 f808 	bl	8000fc0 <CANRcv_DateFromISR>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20008a30 	.word	0x20008a30
 8000fbc:	0800d7d0 	.word	0x0800d7d0

08000fc0 <CANRcv_DateFromISR>:
#endif


void CANRcv_DateFromISR(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
	INT8U error;
	error = MX_CANx_get(& hcan1, & canrxmsg[rxindex], CAN_FILTER_FIFO0);
 8000fc6:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <CANRcv_DateFromISR+0x84>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4613      	mov	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	4413      	add	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4a1c      	ldr	r2, [pc, #112]	; (8001048 <CANRcv_DateFromISR+0x88>)
 8000fd6:	4413      	add	r3, r2
 8000fd8:	2200      	movs	r2, #0
 8000fda:	4619      	mov	r1, r3
 8000fdc:	481b      	ldr	r0, [pc, #108]	; (800104c <CANRcv_DateFromISR+0x8c>)
 8000fde:	f000 f930 	bl	8001242 <MX_CANx_get>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]

	if(error == HAL_ERROR){
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d103      	bne.n	8000ff4 <CANRcv_DateFromISR+0x34>
		MSG("CAN RECEIVE Err\r\n");
 8000fec:	4818      	ldr	r0, [pc, #96]	; (8001050 <CANRcv_DateFromISR+0x90>)
 8000fee:	f00b fc7d 	bl	800c8ec <puts>
		return;
 8000ff2:	e023      	b.n	800103c <CANRcv_DateFromISR+0x7c>
	}

	error = OSQPost (CANRcv_Q, &canrxmsg[rxindex]);
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <CANRcv_DateFromISR+0x94>)
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <CANRcv_DateFromISR+0x84>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4613      	mov	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4a10      	ldr	r2, [pc, #64]	; (8001048 <CANRcv_DateFromISR+0x88>)
 8001008:	4413      	add	r3, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f00a ff38 	bl	800be80 <OSQPost>
 8001010:	4603      	mov	r3, r0
 8001012:	71fb      	strb	r3, [r7, #7]
	if(error == OS_ERR_Q_FULL){
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2b1e      	cmp	r3, #30
 8001018:	d103      	bne.n	8001022 <CANRcv_DateFromISR+0x62>
		MSG("CAN RECEIVE IS FULL\r\n");
 800101a:	480f      	ldr	r0, [pc, #60]	; (8001058 <CANRcv_DateFromISR+0x98>)
 800101c:	f00b fc66 	bl	800c8ec <puts>
 8001020:	e00c      	b.n	800103c <CANRcv_DateFromISR+0x7c>
	}
	else{
		rxindex++;															//**执行下个缓冲区，避免覆盖原来的按键数据**/
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <CANRcv_DateFromISR+0x84>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <CANRcv_DateFromISR+0x84>)
 800102c:	701a      	strb	r2, [r3, #0]
		if(rxindex == N_MESSAGES)
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <CANRcv_DateFromISR+0x84>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b14      	cmp	r3, #20
 8001034:	d102      	bne.n	800103c <CANRcv_DateFromISR+0x7c>
			rxindex=0;
 8001036:	4b03      	ldr	r3, [pc, #12]	; (8001044 <CANRcv_DateFromISR+0x84>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
		//OSSemPost(CRCVSemp);
	}
}
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20005bf8 	.word	0x20005bf8
 8001048:	20007e78 	.word	0x20007e78
 800104c:	200074ac 	.word	0x200074ac
 8001050:	0800d7e0 	.word	0x0800d7e0
 8001054:	2000814c 	.word	0x2000814c
 8001058:	0800d7f4 	.word	0x0800d7f4

0800105c <TIMx_DispatchFromISR>:
参    数 ： 无
返 回 值 ： 无
作    者 ： strongerHuang
*************************************************/
void TIMx_DispatchFromISR(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	last_counter_val = 0;
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <TIMx_DispatchFromISR+0x18>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
	elapsed_time = 0;
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <TIMx_DispatchFromISR+0x1c>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
	TimeDispatch();				// canopen 定时调度
 800106c:	f009 fe86 	bl	800ad7c <TimeDispatch>

}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20005bf0 	.word	0x20005bf0
 8001078:	20005bf4 	.word	0x20005bf4

0800107c <getElapsedTime>:
参    数 ： 无
返 回 值 ： (消逝的)时间
作    者 ： strongerHuang
*************************************************/
TIMEVAL getElapsedTime(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
  uint32_t timer = CANTIM_GetCounter(); // Copy the value of the running timer
 8001082:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001086:	f7ff fd8c 	bl	8000ba2 <getTimeCount>
 800108a:	6078      	str	r0, [r7, #4]

  if(timer < last_counter_val)	//可以实现超过TIM最大定时时间的定时
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <getElapsedTime+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	429a      	cmp	r2, r3
 8001094:	d204      	bcs.n	80010a0 <getElapsedTime+0x24>
    timer += CANOPEN_TIM_PERIOD;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800109c:	33ff      	adds	r3, #255	; 0xff
 800109e:	607b      	str	r3, [r7, #4]

  TIMEVAL elapsed = timer - last_counter_val + elapsed_time;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <getElapsedTime+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	1ad2      	subs	r2, r2, r3
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <getElapsedTime+0x44>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	603b      	str	r3, [r7, #0]
  //若中断前加入两次新的定时事件，必须加上旧的elapsed_time

  return elapsed;
 80010b0:	683b      	ldr	r3, [r7, #0]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20005bf0 	.word	0x20005bf0
 80010c0:	20005bf4 	.word	0x20005bf4

080010c4 <setTimer>:
参    数 ： value --- 参数
返 回 值 ： 无
作    者 ： strongerHuang
*************************************************/
void setTimer(TIMEVAL value)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t timer = CANTIM_GetCounter();
 80010cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010d0:	f7ff fd67 	bl	8000ba2 <getTimeCount>
 80010d4:	60f8      	str	r0, [r7, #12]

  elapsed_time += timer - last_counter_val;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <setTimer+0x4c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	1ad2      	subs	r2, r2, r3
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <setTimer+0x50>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <setTimer+0x50>)
 80010e6:	6013      	str	r3, [r2, #0]
  last_counter_val = CANOPEN_TIM_PERIOD - value;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80010ee:	33ff      	adds	r3, #255	; 0xff
 80010f0:	4a07      	ldr	r2, [pc, #28]	; (8001110 <setTimer+0x4c>)
 80010f2:	6013      	str	r3, [r2, #0]

  //强制修改定时器计数，因此有elapsed_time
  CANTIM_SetCounter(CANOPEN_TIM_PERIOD - value);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80010fa:	33ff      	adds	r3, #255	; 0xff
 80010fc:	4619      	mov	r1, r3
 80010fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001102:	f7ff fd41 	bl	8000b88 <setTimeCount>
  //CANOpenTIMCounter_start();
//  HAL_TIM_Base_Start_IT(CANOPEN_TIMx_handle);
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20005bf0 	.word	0x20005bf0
 8001114:	20005bf4 	.word	0x20005bf4

08001118 <canSend>:
返 回 值 ： 0:失败  1:成功
作    者 ： xlh
*************************************************/
INT8U txindex = 0;
unsigned char canSend(CAN_PORT notused, Message *m)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	uint8_t i,err;

	cantxmsg[txindex].head.StdId = m->cob_id;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	881a      	ldrh	r2, [r3, #0]
 8001126:	4b38      	ldr	r3, [pc, #224]	; (8001208 <canSend+0xf0>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	4611      	mov	r1, r2
 800112c:	4a37      	ldr	r2, [pc, #220]	; (800120c <canSend+0xf4>)
 800112e:	015b      	lsls	r3, r3, #5
 8001130:	4413      	add	r3, r2
 8001132:	6019      	str	r1, [r3, #0]

	if(m->rtr)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	789b      	ldrb	r3, [r3, #2]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d008      	beq.n	800114e <canSend+0x36>
		cantxmsg[txindex].head.RTR = CAN_RTR_REMOTE;
 800113c:	4b32      	ldr	r3, [pc, #200]	; (8001208 <canSend+0xf0>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4a32      	ldr	r2, [pc, #200]	; (800120c <canSend+0xf4>)
 8001142:	015b      	lsls	r3, r3, #5
 8001144:	4413      	add	r3, r2
 8001146:	330c      	adds	r3, #12
 8001148:	2202      	movs	r2, #2
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e007      	b.n	800115e <canSend+0x46>
	else
		cantxmsg[txindex].head.RTR = CAN_RTR_DATA;
 800114e:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <canSend+0xf0>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	4a2e      	ldr	r2, [pc, #184]	; (800120c <canSend+0xf4>)
 8001154:	015b      	lsls	r3, r3, #5
 8001156:	4413      	add	r3, r2
 8001158:	330c      	adds	r3, #12
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]

	cantxmsg[txindex].head.IDE = CAN_ID_STD;
 800115e:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <canSend+0xf0>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4a2a      	ldr	r2, [pc, #168]	; (800120c <canSend+0xf4>)
 8001164:	015b      	lsls	r3, r3, #5
 8001166:	4413      	add	r3, r2
 8001168:	3308      	adds	r3, #8
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
	cantxmsg[txindex].head.DLC = m->len;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	78da      	ldrb	r2, [r3, #3]
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <canSend+0xf0>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4611      	mov	r1, r2
 8001178:	4a24      	ldr	r2, [pc, #144]	; (800120c <canSend+0xf4>)
 800117a:	015b      	lsls	r3, r3, #5
 800117c:	4413      	add	r3, r2
 800117e:	3310      	adds	r3, #16
 8001180:	6019      	str	r1, [r3, #0]
	for(i=0; i<m->len; i++)
 8001182:	2300      	movs	r3, #0
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	e011      	b.n	80011ac <canSend+0x94>
		cantxmsg[txindex].Data[i] = m->data[i];
 8001188:	7bfa      	ldrb	r2, [r7, #15]
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <canSend+0xf0>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461c      	mov	r4, r3
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	6839      	ldr	r1, [r7, #0]
 8001194:	440a      	add	r2, r1
 8001196:	7910      	ldrb	r0, [r2, #4]
 8001198:	491c      	ldr	r1, [pc, #112]	; (800120c <canSend+0xf4>)
 800119a:	0162      	lsls	r2, r4, #5
 800119c:	440a      	add	r2, r1
 800119e:	4413      	add	r3, r2
 80011a0:	3318      	adds	r3, #24
 80011a2:	4602      	mov	r2, r0
 80011a4:	701a      	strb	r2, [r3, #0]
	for(i=0; i<m->len; i++)
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	3301      	adds	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	78db      	ldrb	r3, [r3, #3]
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d3e8      	bcc.n	8001188 <canSend+0x70>

	// 判断是否在执行中断
	if((err=OSQPost(CANSend_Q, &cantxmsg[txindex])) != OS_ERR_NONE){  //加入队列失败
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <canSend+0xf8>)
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <canSend+0xf0>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	015b      	lsls	r3, r3, #5
 80011c0:	4a12      	ldr	r2, [pc, #72]	; (800120c <canSend+0xf4>)
 80011c2:	4413      	add	r3, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f00a fe5b 	bl	800be80 <OSQPost>
 80011ca:	4603      	mov	r3, r0
 80011cc:	73bb      	strb	r3, [r7, #14]
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d007      	beq.n	80011e4 <canSend+0xcc>
		if(err == OS_ERR_Q_FULL)
 80011d4:	7bbb      	ldrb	r3, [r7, #14]
 80011d6:	2b1e      	cmp	r3, #30
 80011d8:	d102      	bne.n	80011e0 <canSend+0xc8>
			MSG("send Q is full\r\n");
 80011da:	480e      	ldr	r0, [pc, #56]	; (8001214 <canSend+0xfc>)
 80011dc:	f00b fb86 	bl	800c8ec <puts>
	  return 0xFF;
 80011e0:	23ff      	movs	r3, #255	; 0xff
 80011e2:	e00d      	b.n	8001200 <canSend+0xe8>
	}
	else{
		txindex++;									// 执行下个缓冲区，避免覆盖原来的数据
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <canSend+0xf0>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <canSend+0xf0>)
 80011ee:	701a      	strb	r2, [r3, #0]
		if(txindex == N_MESSAGES)
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <canSend+0xf0>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b14      	cmp	r3, #20
 80011f6:	d102      	bne.n	80011fe <canSend+0xe6>
			txindex=0;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <canSend+0xf0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
	}
	//printf("Send\r\n");
	return 0;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	bd90      	pop	{r4, r7, pc}
 8001208:	20005bf9 	.word	0x20005bf9
 800120c:	200081a0 	.word	0x200081a0
 8001210:	20008148 	.word	0x20008148
 8001214:	0800d80c 	.word	0x0800d80c

08001218 <MX_CANx_send>:
 */
#include "func_can.h"


Error MX_CANx_send(CAN_HandleTypeDef *phcan, CanTxMsg *msg, MAIL pmailbox)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
	Error error;

	error = HAL_CAN_AddTxMessage(phcan, (CAN_TxHeaderTypeDef *)& (msg->head), msg->Data, & pmailbox);
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	f103 0218 	add.w	r2, r3, #24
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f000 fb96 	bl	8001960 <HAL_CAN_AddTxMessage>
 8001234:	4603      	mov	r3, r0
 8001236:	75fb      	strb	r3, [r7, #23]

	return error;
 8001238:	7dfb      	ldrb	r3, [r7, #23]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <MX_CANx_get>:

Error MX_CANx_get(CAN_HandleTypeDef *phcan, CanRxMsg *msg, uint32_t FIFO)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	60f8      	str	r0, [r7, #12]
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
	Error error;
	error = HAL_CAN_GetRxMessage(phcan, FIFO, (CAN_RxHeaderTypeDef *)& (msg->head), (msg->Data));
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	331c      	adds	r3, #28
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f000 fc5c 	bl	8001b14 <HAL_CAN_GetRxMessage>
 800125c:	4603      	mov	r3, r0
 800125e:	75fb      	strb	r3, [r7, #23]
	return error;
 8001260:	7dfb      	ldrb	r3, [r7, #23]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <CAN_Start>:


void CAN_Start(CAN_HandleTypeDef *phcan)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_Start(phcan) != HAL_OK){
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 fb30 	bl	80018d8 <HAL_CAN_Start>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d000      	beq.n	8001280 <CAN_Start+0x16>
		Error_Handler();
 800127e:	e7fe      	b.n	800127e <CAN_Start+0x14>
	}
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <Core_Config>:
#include "func_global.h"

void Core_Config(void){
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	
	Flash_prefetch();
 800128c:	f7ff fb52 	bl	8000934 <Flash_prefetch>
	NVIC_Init();
 8001290:	f7ff fb1e 	bl	80008d0 <NVIC_Init>
	SystemClock_Config();
 8001294:	f7ff fab6 	bl	8000804 <SystemClock_Config>
	tick_init(1000);
 8001298:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800129c:	f7ff faf8 	bl	8000890 <tick_init>
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <main>:
 * 			启动最初的一个APP - Task_Start
 * Window > Preferences > C/C++ > Editor > Templates.
 */

int main(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	BSP_Init();
 80012a8:	f7ff f994 	bl	80005d4 <BSP_Init>
	debug_init();
 80012ac:	f7ff fe3e 	bl	8000f2c <debug_init>
	//CAN_Send_test();

	OSInit();
 80012b0:	f009 feb4 	bl	800b01c <OSInit>
	MSG("--------------------------------------                   \r\n");
 80012b4:	4813      	ldr	r0, [pc, #76]	; (8001304 <main+0x60>)
 80012b6:	f00b fb19 	bl	800c8ec <puts>
	MSG("   --------------------------------------                   \r\n");
 80012ba:	4813      	ldr	r0, [pc, #76]	; (8001308 <main+0x64>)
 80012bc:	f00b fb16 	bl	800c8ec <puts>
	MSG("      --------------------------------------                   \r\n");
 80012c0:	4812      	ldr	r0, [pc, #72]	; (800130c <main+0x68>)
 80012c2:	f00b fb13 	bl	800c8ec <puts>
	MSG("         --------------------------------------                   \r\n");
 80012c6:	4812      	ldr	r0, [pc, #72]	; (8001310 <main+0x6c>)
 80012c8:	f00b fb10 	bl	800c8ec <puts>
	MSG("Welcome to EPOS Controller !\r\n");
 80012cc:	4811      	ldr	r0, [pc, #68]	; (8001314 <main+0x70>)
 80012ce:	f00b fb0d 	bl	800c8ec <puts>
	MSG("         --------------------------------------                   \r\n");
 80012d2:	480f      	ldr	r0, [pc, #60]	; (8001310 <main+0x6c>)
 80012d4:	f00b fb0a 	bl	800c8ec <puts>
	MSG("      --------------------------------------                   \r\n");
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <main+0x68>)
 80012da:	f00b fb07 	bl	800c8ec <puts>
	MSG("   --------------------------------------                   \r\n");
 80012de:	480a      	ldr	r0, [pc, #40]	; (8001308 <main+0x64>)
 80012e0:	f00b fb04 	bl	800c8ec <puts>
	MSG("--------------------------------------                   \r\n");
 80012e4:	4807      	ldr	r0, [pc, #28]	; (8001304 <main+0x60>)
 80012e6:	f00b fb01 	bl	800c8ec <puts>

	OSTaskCreate(Task_Start,(void *)0, &startup_task_stk[STARTUP_TASK_STK_SIZE-1], STARTUP_TASK_PRIO);
 80012ea:	2302      	movs	r3, #2
 80012ec:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <main+0x74>)
 80012ee:	2100      	movs	r1, #0
 80012f0:	480a      	ldr	r0, [pc, #40]	; (800131c <main+0x78>)
 80012f2:	f00a ff7f 	bl	800c1f4 <OSTaskCreate>

	OSStart();
 80012f6:	f009 ff73 	bl	800b1e0 <OSStart>

	while(1){
		printf("system not start !");
 80012fa:	4809      	ldr	r0, [pc, #36]	; (8001320 <main+0x7c>)
 80012fc:	f00b fa82 	bl	800c804 <iprintf>
 8001300:	e7fb      	b.n	80012fa <main+0x56>
 8001302:	bf00      	nop
 8001304:	0800d81c 	.word	0x0800d81c
 8001308:	0800d858 	.word	0x0800d858
 800130c:	0800d898 	.word	0x0800d898
 8001310:	0800d8dc 	.word	0x0800d8dc
 8001314:	0800d920 	.word	0x0800d920
 8001318:	2000855c 	.word	0x2000855c
 800131c:	080002c9 	.word	0x080002c9
 8001320:	0800d940 	.word	0x0800d940

08001324 <App_TaskIdleHook>:
 *
 * @brief :  空闲闪烁灯提示
 * Window > Preferences > C/C++ > Editor > Templates.
 */

void App_TaskIdleHook(void){
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	LEDSwich;
 8001328:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <App_TaskIdleHook+0x14>)
 800132e:	f001 f9d9 	bl	80026e4 <HAL_GPIO_TogglePin>
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40011000 	.word	0x40011000

0800133c <App_TaskCreateHook>:


void          App_TaskCreateHook      (OS_TCB          *ptcb){};
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <App_TaskStatHook>:
 * 			堆栈数据统计
 * @Note(s)    : 必须OS启动后才能调用
 * Window > Preferences > C/C++ > Editor > Templates.
 */

void          App_TaskStatHook        (void){
 800134e:	b580      	push	{r7, lr}
 8001350:	af00      	add	r7, sp, #0
	
	OSSchedLock();
 8001352:	f009 fee3 	bl	800b11c <OSSchedLock>
#endif
					}
			}
	}*/
	
	OSSchedUnlock();
 8001356:	f009 ff09 	bl	800b16c <OSSchedUnlock>
};
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}

0800135e <App_TaskSwHook>:
 *
 * @brief : 任务切换提示
 * Window > Preferences > C/C++ > Editor > Templates.
 */

void          App_TaskSwHook          (void){
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
	
	/*printf("\r\n%d:%d->%d\r\n",OSTime,OSTCBCur->OSTCBPrio,OSTCBHighRdy->OSTCBPrio);*/

};
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <App_TCBInitHook>:

/*TCB初始化时调用的函数，可以在这里定义TCB的名称，等属性。此时传入TCB优先级等都已经初始化好了*/
void          App_TCBInitHook         (OS_TCB          *ptcb){
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
	//ptcb->OSTCBTaskName =  &(ptcb->OSTCBPrio);
};
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <App_TimeTickHook>:

void          App_TimeTickHook        (void){};
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval : None
  */
void NMI_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	printf(" NMI_Handler !!!\r\n");
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <NMI_Handler+0x10>)
 800138e:	f00b faad 	bl	800c8ec <puts>
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	0800d954 	.word	0x0800d954

0800139c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval : None
  */
void HardFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  //printf(" HardFault_Handler !!!\r\n");

  while (1)
 80013a0:	e7fe      	b.n	80013a0 <HardFault_Handler+0x4>
	...

080013a4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval : None
  */
void MemManage_Handler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  printf(" MemManage_Handler !!!\r\n");
 80013a8:	4801      	ldr	r0, [pc, #4]	; (80013b0 <MemManage_Handler+0xc>)
 80013aa:	f00b fa9f 	bl	800c8ec <puts>

  while (1)
 80013ae:	e7fe      	b.n	80013ae <MemManage_Handler+0xa>
 80013b0:	0800d968 	.word	0x0800d968

080013b4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval : None
  */
void BusFault_Handler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  printf(" BusFault_Handler !!!\r\n");
 80013b8:	4801      	ldr	r0, [pc, #4]	; (80013c0 <BusFault_Handler+0xc>)
 80013ba:	f00b fa97 	bl	800c8ec <puts>

  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0xa>
 80013c0:	0800d980 	.word	0x0800d980

080013c4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval : None
  */
void UsageFault_Handler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  printf(" UsageFault_Handler !!!\r\n");
 80013c8:	4801      	ldr	r0, [pc, #4]	; (80013d0 <UsageFault_Handler+0xc>)
 80013ca:	f00b fa8f 	bl	800c8ec <puts>

  while (1)
 80013ce:	e7fe      	b.n	80013ce <UsageFault_Handler+0xa>
 80013d0:	0800d998 	.word	0x0800d998

080013d4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval : None
  */
void SVC_Handler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	printf(" SVC_Handler !!!\r\n");
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <SVC_Handler+0x10>)
 80013da:	f00b fa87 	bl	800c8ec <puts>

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	0800d9b4 	.word	0x0800d9b4

080013e8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval : None
  */
void DebugMon_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  */
int tick;
void SysTick_Handler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	tick++;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <SysTick_Handler+0x20>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	4a05      	ldr	r2, [pc, #20]	; (8001414 <SysTick_Handler+0x20>)
 8001400:	6013      	str	r3, [r2, #0]
    OSIntEnter();
 8001402:	f009 fe21 	bl	800b048 <OSIntEnter>
    OSTimeTick();
 8001406:	f009 ff3f 	bl	800b288 <OSTimeTick>
    OSIntExit();
 800140a:	f009 fe35 	bl	800b078 <OSIntExit>
	//OS_CPU_SysTickHandler();
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20008560 	.word	0x20008560

08001418 <USB_LP_CAN1_RX0_IRQHandler>:
��    �� �� ��
�� �� ֵ �� ��
��    �� �� strongerHuang
*************************************************/
void CAN1_RX0_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	OSIntEnter();
 800141c:	f009 fe14 	bl	800b048 <OSIntEnter>
	//MSG("%d: CANOPEN_TIM_IRQ_Handler !!!\r\n", OSTime);
	HAL_CAN_IRQHandler(&hcan1);
 8001420:	4803      	ldr	r0, [pc, #12]	; (8001430 <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 8001422:	f000 fcad 	bl	8001d80 <HAL_CAN_IRQHandler>
	OSIntExit();
 8001426:	f009 fe27 	bl	800b078 <OSIntExit>
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200074ac 	.word	0x200074ac

08001434 <USB_HP_CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800143a:	f000 fca1 	bl	8001d80 <HAL_CAN_IRQHandler>
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200074ac 	.word	0x200074ac

08001448 <TIM2_IRQHandler>:
��    �� �� ��
�� �� ֵ �� ��
��    �� �� strongerHuang
*************************************************/
void CANOPEN_TIM_IRQ_Handler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	OSIntEnter();
 800144c:	f009 fdfc 	bl	800b048 <OSIntEnter>
	//MSG("%d: CANOPEN_TIM_IRQ_Handler !!!\r\n", OSTime);
	HAL_TIM_IRQHandler(&htim2);
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <TIM2_IRQHandler+0x1c>)
 8001452:	f001 fdc9 	bl	8002fe8 <HAL_TIM_IRQHandler>

	TIMx_DispatchFromISR();
 8001456:	f7ff fe01 	bl	800105c <TIMx_DispatchFromISR>
	OSIntExit();
 800145a:	f009 fe0d 	bl	800b078 <OSIntExit>
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20007c94 	.word	0x20007c94

08001468 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	//HAL_UART_IRQHandler(&huart1);
	debug_IRQ();
 800146c:	f7ff fd64 	bl	8000f38 <debug_IRQ>
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <SystemInit>:
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <SystemInit+0x5c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <SystemInit+0x5c>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <SystemInit+0x5c>)
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	4911      	ldr	r1, [pc, #68]	; (80014d0 <SystemInit+0x5c>)
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <SystemInit+0x60>)
 800148c:	4013      	ands	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <SystemInit+0x5c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <SystemInit+0x5c>)
 8001496:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800149a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <SystemInit+0x5c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <SystemInit+0x5c>)
 80014a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <SystemInit+0x5c>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <SystemInit+0x5c>)
 80014b2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80014b6:	6053      	str	r3, [r2, #4]
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <SystemInit+0x5c>)
 80014ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <SystemInit+0x64>)
 80014c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	40021000 	.word	0x40021000
 80014d4:	f8ff0000 	.word	0xf8ff0000
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <HAL_InitTick>:
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_InitTick+0x54>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_InitTick+0x58>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 ff5f 	bl	80023be <HAL_SYSTICK_Config>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_InitTick+0x2e>
 8001506:	2301      	movs	r3, #1
 8001508:	e00e      	b.n	8001528 <HAL_InitTick+0x4c>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b0f      	cmp	r3, #15
 800150e:	d80a      	bhi.n	8001526 <HAL_InitTick+0x4a>
 8001510:	2200      	movs	r2, #0
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001518:	f000 ff27 	bl	800236a <HAL_NVIC_SetPriority>
 800151c:	4a06      	ldr	r2, [pc, #24]	; (8001538 <HAL_InitTick+0x5c>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <HAL_InitTick+0x4c>
 8001526:	2301      	movs	r3, #1
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20004e24 	.word	0x20004e24
 8001534:	20004e2c 	.word	0x20004e2c
 8001538:	20004e28 	.word	0x20004e28

0800153c <HAL_GetTick>:
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
 8001540:	4b02      	ldr	r3, [pc, #8]	; (800154c <HAL_GetTick+0x10>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	20008564 	.word	0x20008564

08001550 <HAL_CAN_Init>:
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_CAN_Init+0x12>
 800155e:	2301      	movs	r3, #1
 8001560:	e0ed      	b.n	800173e <HAL_CAN_Init+0x1ee>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d102      	bne.n	8001574 <HAL_CAN_Init+0x24>
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff f8b2 	bl	80006d8 <HAL_CAN_MspInit>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0202 	bic.w	r2, r2, #2
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	f7ff ffda 	bl	800153c <HAL_GetTick>
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	e012      	b.n	80015b2 <HAL_CAN_Init+0x62>
 800158c:	f7ff ffd6 	bl	800153c <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b0a      	cmp	r3, #10
 8001598:	d90b      	bls.n	80015b2 <HAL_CAN_Init+0x62>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2205      	movs	r2, #5
 80015aa:	f883 2020 	strb.w	r2, [r3, #32]
 80015ae:	2301      	movs	r3, #1
 80015b0:	e0c5      	b.n	800173e <HAL_CAN_Init+0x1ee>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1e5      	bne.n	800158c <HAL_CAN_Init+0x3c>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 0201 	orr.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	f7ff ffb4 	bl	800153c <HAL_GetTick>
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	e012      	b.n	80015fe <HAL_CAN_Init+0xae>
 80015d8:	f7ff ffb0 	bl	800153c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b0a      	cmp	r3, #10
 80015e4:	d90b      	bls.n	80015fe <HAL_CAN_Init+0xae>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	625a      	str	r2, [r3, #36]	; 0x24
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2205      	movs	r2, #5
 80015f6:	f883 2020 	strb.w	r2, [r3, #32]
 80015fa:	2301      	movs	r3, #1
 80015fc:	e09f      	b.n	800173e <HAL_CAN_Init+0x1ee>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0e5      	beq.n	80015d8 <HAL_CAN_Init+0x88>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7e1b      	ldrb	r3, [r3, #24]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d108      	bne.n	8001626 <HAL_CAN_Init+0xd6>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	e007      	b.n	8001636 <HAL_CAN_Init+0xe6>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	7e5b      	ldrb	r3, [r3, #25]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d108      	bne.n	8001650 <HAL_CAN_Init+0x100>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	e007      	b.n	8001660 <HAL_CAN_Init+0x110>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	7e9b      	ldrb	r3, [r3, #26]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d108      	bne.n	800167a <HAL_CAN_Init+0x12a>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0220 	orr.w	r2, r2, #32
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	e007      	b.n	800168a <HAL_CAN_Init+0x13a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0220 	bic.w	r2, r2, #32
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7edb      	ldrb	r3, [r3, #27]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d108      	bne.n	80016a4 <HAL_CAN_Init+0x154>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0210 	bic.w	r2, r2, #16
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	e007      	b.n	80016b4 <HAL_CAN_Init+0x164>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0210 	orr.w	r2, r2, #16
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7f1b      	ldrb	r3, [r3, #28]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d108      	bne.n	80016ce <HAL_CAN_Init+0x17e>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0208 	orr.w	r2, r2, #8
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	e007      	b.n	80016de <HAL_CAN_Init+0x18e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0208 	bic.w	r2, r2, #8
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	7f5b      	ldrb	r3, [r3, #29]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d108      	bne.n	80016f8 <HAL_CAN_Init+0x1a8>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f042 0204 	orr.w	r2, r2, #4
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	e007      	b.n	8001708 <HAL_CAN_Init+0x1b8>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0204 	bic.w	r2, r2, #4
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	ea42 0103 	orr.w	r1, r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	1e5a      	subs	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	61da      	str	r2, [r3, #28]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	625a      	str	r2, [r3, #36]	; 0x24
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2020 	strb.w	r2, [r3, #32]
 800173c:	2300      	movs	r3, #0
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_CAN_ConfigFilter>:
 8001746:	b480      	push	{r7}
 8001748:	b087      	sub	sp, #28
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3020 	ldrb.w	r3, [r3, #32]
 800175c:	74fb      	strb	r3, [r7, #19]
 800175e:	7cfb      	ldrb	r3, [r7, #19]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d003      	beq.n	800176c <HAL_CAN_ConfigFilter+0x26>
 8001764:	7cfb      	ldrb	r3, [r7, #19]
 8001766:	2b02      	cmp	r3, #2
 8001768:	f040 80aa 	bne.w	80018c0 <HAL_CAN_ConfigFilter+0x17a>
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001772:	f043 0201 	orr.w	r2, r3, #1
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	f003 031f 	and.w	r3, r3, #31
 8001784:	2201      	movs	r2, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	43db      	mvns	r3, r3
 8001796:	401a      	ands	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d123      	bne.n	80017ee <HAL_CAN_ConfigFilter+0xa8>
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	401a      	ands	r2, r3
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0419      	lsls	r1, r3, #16
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	6952      	ldr	r2, [r2, #20]
 80017c8:	4319      	orrs	r1, r3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	3248      	adds	r2, #72	; 0x48
 80017ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	0419      	lsls	r1, r3, #16
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	b29a      	uxth	r2, r3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	6979      	ldr	r1, [r7, #20]
 80017e6:	3348      	adds	r3, #72	; 0x48
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	440b      	add	r3, r1
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d122      	bne.n	800183c <HAL_CAN_ConfigFilter+0xf6>
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	431a      	orrs	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	0419      	lsls	r1, r3, #16
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	b29b      	uxth	r3, r3
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	6952      	ldr	r2, [r2, #20]
 8001816:	4319      	orrs	r1, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	3248      	adds	r2, #72	; 0x48
 800181c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	0419      	lsls	r1, r3, #16
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	b29a      	uxth	r2, r3
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	430a      	orrs	r2, r1
 8001832:	6979      	ldr	r1, [r7, #20]
 8001834:	3348      	adds	r3, #72	; 0x48
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d109      	bne.n	8001858 <HAL_CAN_ConfigFilter+0x112>
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	43db      	mvns	r3, r3
 800184e:	401a      	ands	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001856:	e007      	b.n	8001868 <HAL_CAN_ConfigFilter+0x122>
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	431a      	orrs	r2, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d109      	bne.n	8001884 <HAL_CAN_ConfigFilter+0x13e>
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	43db      	mvns	r3, r3
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001882:	e007      	b.n	8001894 <HAL_CAN_ConfigFilter+0x14e>
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	431a      	orrs	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d107      	bne.n	80018ac <HAL_CAN_ConfigFilter+0x166>
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	431a      	orrs	r2, r3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018b2:	f023 0201 	bic.w	r2, r3, #1
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80018bc:	2300      	movs	r3, #0
 80018be:	e006      	b.n	80018ce <HAL_CAN_ConfigFilter+0x188>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24
 80018cc:	2301      	movs	r3, #1
 80018ce:	4618      	mov	r0, r3
 80018d0:	371c      	adds	r7, #28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <HAL_CAN_Start>:
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d12e      	bne.n	800194a <HAL_CAN_Start+0x72>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2202      	movs	r2, #2
 80018f0:	f883 2020 	strb.w	r2, [r3, #32]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0201 	bic.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	f7ff fe1a 	bl	800153c <HAL_GetTick>
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	e012      	b.n	8001932 <HAL_CAN_Start+0x5a>
 800190c:	f7ff fe16 	bl	800153c <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b0a      	cmp	r3, #10
 8001918:	d90b      	bls.n	8001932 <HAL_CAN_Start+0x5a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2205      	movs	r2, #5
 800192a:	f883 2020 	strb.w	r2, [r3, #32]
 800192e:	2301      	movs	r3, #1
 8001930:	e012      	b.n	8001958 <HAL_CAN_Start+0x80>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1e5      	bne.n	800190c <HAL_CAN_Start+0x34>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	625a      	str	r2, [r3, #36]	; 0x24
 8001946:	2300      	movs	r3, #0
 8001948:	e006      	b.n	8001958 <HAL_CAN_Start+0x80>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
 8001956:	2301      	movs	r3, #1
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_CAN_AddTxMessage>:
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	; 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001974:	77fb      	strb	r3, [r7, #31]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	7ffb      	ldrb	r3, [r7, #31]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d003      	beq.n	800198c <HAL_CAN_AddTxMessage+0x2c>
 8001984:	7ffb      	ldrb	r3, [r7, #31]
 8001986:	2b02      	cmp	r3, #2
 8001988:	f040 80b8 	bne.w	8001afc <HAL_CAN_AddTxMessage+0x19c>
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10a      	bne.n	80019ac <HAL_CAN_AddTxMessage+0x4c>
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d105      	bne.n	80019ac <HAL_CAN_AddTxMessage+0x4c>
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 80a0 	beq.w	8001aec <HAL_CAN_AddTxMessage+0x18c>
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	0e1b      	lsrs	r3, r3, #24
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d907      	bls.n	80019cc <HAL_CAN_AddTxMessage+0x6c>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	625a      	str	r2, [r3, #36]	; 0x24
 80019c8:	2301      	movs	r3, #1
 80019ca:	e09e      	b.n	8001b0a <HAL_CAN_AddTxMessage+0x1aa>
 80019cc:	2201      	movs	r2, #1
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	409a      	lsls	r2, r3
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10d      	bne.n	80019fa <HAL_CAN_AddTxMessage+0x9a>
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	055a      	lsls	r2, r3, #21
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	68f9      	ldr	r1, [r7, #12]
 80019ea:	6809      	ldr	r1, [r1, #0]
 80019ec:	431a      	orrs	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3318      	adds	r3, #24
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	440b      	add	r3, r1
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	e00f      	b.n	8001a1a <HAL_CAN_AddTxMessage+0xba>
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	00da      	lsls	r2, r3, #3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	431a      	orrs	r2, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	68f9      	ldr	r1, [r7, #12]
 8001a0c:	6809      	ldr	r1, [r1, #0]
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3318      	adds	r3, #24
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	440b      	add	r3, r1
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6819      	ldr	r1, [r3, #0]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	691a      	ldr	r2, [r3, #16]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3318      	adds	r3, #24
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	440b      	add	r3, r1
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	7d1b      	ldrb	r3, [r3, #20]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d111      	bne.n	8001a5a <HAL_CAN_AddTxMessage+0xfa>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3318      	adds	r3, #24
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	4413      	add	r3, r2
 8001a42:	3304      	adds	r3, #4
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	6811      	ldr	r1, [r2, #0]
 8001a4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3318      	adds	r3, #24
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	440b      	add	r3, r1
 8001a56:	3304      	adds	r3, #4
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3307      	adds	r3, #7
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	061a      	lsls	r2, r3, #24
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3306      	adds	r3, #6
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	041b      	lsls	r3, r3, #16
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3305      	adds	r3, #5
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	4313      	orrs	r3, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	3204      	adds	r2, #4
 8001a7a:	7812      	ldrb	r2, [r2, #0]
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	6811      	ldr	r1, [r2, #0]
 8001a82:	ea43 0200 	orr.w	r2, r3, r0
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3303      	adds	r3, #3
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	061a      	lsls	r2, r3, #24
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	041b      	lsls	r3, r3, #16
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	4313      	orrs	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	7812      	ldrb	r2, [r2, #0]
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	6811      	ldr	r1, [r2, #0]
 8001ab8:	ea43 0200 	orr.w	r2, r3, r0
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	440b      	add	r3, r1
 8001ac2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3318      	adds	r3, #24
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	4413      	add	r3, r2
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	6811      	ldr	r1, [r2, #0]
 8001ada:	f043 0201 	orr.w	r2, r3, #1
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3318      	adds	r3, #24
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	440b      	add	r3, r1
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e00e      	b.n	8001b0a <HAL_CAN_AddTxMessage+0x1aa>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	625a      	str	r2, [r3, #36]	; 0x24
 8001af8:	2301      	movs	r3, #1
 8001afa:	e006      	b.n	8001b0a <HAL_CAN_AddTxMessage+0x1aa>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	625a      	str	r2, [r3, #36]	; 0x24
 8001b08:	2301      	movs	r3, #1
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3724      	adds	r7, #36	; 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <HAL_CAN_GetRxMessage>:
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	603b      	str	r3, [r7, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b28:	75fb      	strb	r3, [r7, #23]
 8001b2a:	7dfb      	ldrb	r3, [r7, #23]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d003      	beq.n	8001b38 <HAL_CAN_GetRxMessage+0x24>
 8001b30:	7dfb      	ldrb	r3, [r7, #23]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	f040 80f3 	bne.w	8001d1e <HAL_CAN_GetRxMessage+0x20a>
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10e      	bne.n	8001b5c <HAL_CAN_GetRxMessage+0x48>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d116      	bne.n	8001b7a <HAL_CAN_GetRxMessage+0x66>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0e7      	b.n	8001d2c <HAL_CAN_GetRxMessage+0x218>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d107      	bne.n	8001b7a <HAL_CAN_GetRxMessage+0x66>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24
 8001b76:	2301      	movs	r3, #1
 8001b78:	e0d8      	b.n	8001d2c <HAL_CAN_GetRxMessage+0x218>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	331b      	adds	r3, #27
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	4413      	add	r3, r2
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0204 	and.w	r2, r3, #4
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10c      	bne.n	8001bb2 <HAL_CAN_GetRxMessage+0x9e>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	331b      	adds	r3, #27
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	4413      	add	r3, r2
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	0d5b      	lsrs	r3, r3, #21
 8001ba8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	e00b      	b.n	8001bca <HAL_CAN_GetRxMessage+0xb6>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	331b      	adds	r3, #27
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	4413      	add	r3, r2
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	08db      	lsrs	r3, r3, #3
 8001bc2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	331b      	adds	r3, #27
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	4413      	add	r3, r2
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0202 	and.w	r2, r3, #2
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	331b      	adds	r3, #27
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	4413      	add	r3, r2
 8001bec:	3304      	adds	r3, #4
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 020f 	and.w	r2, r3, #15
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	611a      	str	r2, [r3, #16]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	331b      	adds	r3, #27
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	4413      	add	r3, r2
 8001c04:	3304      	adds	r3, #4
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	0a1b      	lsrs	r3, r3, #8
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	619a      	str	r2, [r3, #24]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	331b      	adds	r3, #27
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0c1b      	lsrs	r3, r3, #16
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	615a      	str	r2, [r3, #20]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	701a      	strb	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	4413      	add	r3, r2
 8001c48:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	0a1a      	lsrs	r2, r3, #8
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	3301      	adds	r3, #1
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	701a      	strb	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	0c1a      	lsrs	r2, r3, #16
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0e1a      	lsrs	r2, r3, #24
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	3303      	adds	r3, #3
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	701a      	strb	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	4413      	add	r3, r2
 8001c96:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0a1a      	lsrs	r2, r3, #8
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	3305      	adds	r3, #5
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	0c1a      	lsrs	r2, r3, #16
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	3306      	adds	r3, #6
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	701a      	strb	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	0e1a      	lsrs	r2, r3, #24
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	3307      	adds	r3, #7
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d108      	bne.n	8001d0a <HAL_CAN_GetRxMessage+0x1f6>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0220 	orr.w	r2, r2, #32
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	e007      	b.n	8001d1a <HAL_CAN_GetRxMessage+0x206>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0220 	orr.w	r2, r2, #32
 8001d18:	611a      	str	r2, [r3, #16]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e006      	b.n	8001d2c <HAL_CAN_GetRxMessage+0x218>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	625a      	str	r2, [r3, #36]	; 0x24
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	371c      	adds	r7, #28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <HAL_CAN_ActivateNotification>:
 8001d36:	b480      	push	{r7}
 8001d38:	b085      	sub	sp, #20
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d46:	73fb      	strb	r3, [r7, #15]
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d002      	beq.n	8001d54 <HAL_CAN_ActivateNotification+0x1e>
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d109      	bne.n	8001d68 <HAL_CAN_ActivateNotification+0x32>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6959      	ldr	r1, [r3, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	615a      	str	r2, [r3, #20]
 8001d64:	2300      	movs	r3, #0
 8001d66:	e006      	b.n	8001d76 <HAL_CAN_ActivateNotification+0x40>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	625a      	str	r2, [r3, #36]	; 0x24
 8001d74:	2301      	movs	r3, #1
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <HAL_CAN_IRQHandler>:
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	623b      	str	r3, [r7, #32]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d07c      	beq.n	8001ec0 <HAL_CAN_IRQHandler+0x140>
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d023      	beq.n	8001e18 <HAL_CAN_IRQHandler+0x98>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_CAN_IRQHandler+0x6a>
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f97d 	bl	80020e2 <HAL_CAN_TxMailbox0CompleteCallback>
 8001de8:	e016      	b.n	8001e18 <HAL_CAN_IRQHandler+0x98>
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d004      	beq.n	8001dfe <HAL_CAN_IRQHandler+0x7e>
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfc:	e00c      	b.n	8001e18 <HAL_CAN_IRQHandler+0x98>
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d004      	beq.n	8001e12 <HAL_CAN_IRQHandler+0x92>
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e10:	e002      	b.n	8001e18 <HAL_CAN_IRQHandler+0x98>
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f980 	bl	8002118 <HAL_CAN_TxMailbox0AbortCallback>
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d024      	beq.n	8001e6c <HAL_CAN_IRQHandler+0xec>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_CAN_IRQHandler+0xbe>
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f95c 	bl	80020f4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001e3c:	e016      	b.n	8001e6c <HAL_CAN_IRQHandler+0xec>
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d004      	beq.n	8001e52 <HAL_CAN_IRQHandler+0xd2>
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e50:	e00c      	b.n	8001e6c <HAL_CAN_IRQHandler+0xec>
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d004      	beq.n	8001e66 <HAL_CAN_IRQHandler+0xe6>
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
 8001e64:	e002      	b.n	8001e6c <HAL_CAN_IRQHandler+0xec>
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f95f 	bl	800212a <HAL_CAN_TxMailbox1AbortCallback>
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d024      	beq.n	8001ec0 <HAL_CAN_IRQHandler+0x140>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_CAN_IRQHandler+0x112>
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f93b 	bl	8002106 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e90:	e016      	b.n	8001ec0 <HAL_CAN_IRQHandler+0x140>
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d004      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x126>
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea4:	e00c      	b.n	8001ec0 <HAL_CAN_IRQHandler+0x140>
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d004      	beq.n	8001eba <HAL_CAN_IRQHandler+0x13a>
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb8:	e002      	b.n	8001ec0 <HAL_CAN_IRQHandler+0x140>
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f93e 	bl	800213c <HAL_CAN_TxMailbox2AbortCallback>
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00c      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0x164>
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d007      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0x164>
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2210      	movs	r2, #16
 8001ee2:	60da      	str	r2, [r3, #12]
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00b      	beq.n	8001f06 <HAL_CAN_IRQHandler+0x186>
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d006      	beq.n	8001f06 <HAL_CAN_IRQHandler+0x186>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2208      	movs	r2, #8
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f924 	bl	800214e <HAL_CAN_RxFifo0FullCallback>
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d009      	beq.n	8001f24 <HAL_CAN_IRQHandler+0x1a4>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <HAL_CAN_IRQHandler+0x1a4>
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff f83a 	bl	8000f98 <HAL_CAN_RxFifo0MsgPendingCallback>
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00c      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x1c8>
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	f003 0310 	and.w	r3, r3, #16
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x1c8>
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2210      	movs	r2, #16
 8001f46:	611a      	str	r2, [r3, #16]
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00b      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x1ea>
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x1ea>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2208      	movs	r2, #8
 8001f62:	611a      	str	r2, [r3, #16]
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f904 	bl	8002172 <HAL_CAN_RxFifo1FullCallback>
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d009      	beq.n	8001f88 <HAL_CAN_IRQHandler+0x208>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <HAL_CAN_IRQHandler+0x208>
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f8ec 	bl	8002160 <HAL_CAN_RxFifo1MsgPendingCallback>
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00b      	beq.n	8001faa <HAL_CAN_IRQHandler+0x22a>
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_CAN_IRQHandler+0x22a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2210      	movs	r2, #16
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f8ed 	bl	8002184 <HAL_CAN_SleepCallback>
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00b      	beq.n	8001fcc <HAL_CAN_IRQHandler+0x24c>
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d006      	beq.n	8001fcc <HAL_CAN_IRQHandler+0x24c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2208      	movs	r2, #8
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f8e5 	bl	8002196 <HAL_CAN_WakeUpFromRxMsgCallback>
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d075      	beq.n	80020c2 <HAL_CAN_IRQHandler+0x342>
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d06c      	beq.n	80020ba <HAL_CAN_IRQHandler+0x33a>
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d008      	beq.n	8001ffc <HAL_CAN_IRQHandler+0x27c>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_CAN_IRQHandler+0x27c>
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002002:	2b00      	cmp	r3, #0
 8002004:	d008      	beq.n	8002018 <HAL_CAN_IRQHandler+0x298>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_CAN_IRQHandler+0x298>
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	f043 0302 	orr.w	r3, r3, #2
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201e:	2b00      	cmp	r3, #0
 8002020:	d008      	beq.n	8002034 <HAL_CAN_IRQHandler+0x2b4>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_CAN_IRQHandler+0x2b4>
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800203a:	2b00      	cmp	r3, #0
 800203c:	d03d      	beq.n	80020ba <HAL_CAN_IRQHandler+0x33a>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002044:	2b00      	cmp	r3, #0
 8002046:	d038      	beq.n	80020ba <HAL_CAN_IRQHandler+0x33a>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800204e:	2b30      	cmp	r3, #48	; 0x30
 8002050:	d017      	beq.n	8002082 <HAL_CAN_IRQHandler+0x302>
 8002052:	2b30      	cmp	r3, #48	; 0x30
 8002054:	d804      	bhi.n	8002060 <HAL_CAN_IRQHandler+0x2e0>
 8002056:	2b10      	cmp	r3, #16
 8002058:	d009      	beq.n	800206e <HAL_CAN_IRQHandler+0x2ee>
 800205a:	2b20      	cmp	r3, #32
 800205c:	d00c      	beq.n	8002078 <HAL_CAN_IRQHandler+0x2f8>
 800205e:	e024      	b.n	80020aa <HAL_CAN_IRQHandler+0x32a>
 8002060:	2b50      	cmp	r3, #80	; 0x50
 8002062:	d018      	beq.n	8002096 <HAL_CAN_IRQHandler+0x316>
 8002064:	2b60      	cmp	r3, #96	; 0x60
 8002066:	d01b      	beq.n	80020a0 <HAL_CAN_IRQHandler+0x320>
 8002068:	2b40      	cmp	r3, #64	; 0x40
 800206a:	d00f      	beq.n	800208c <HAL_CAN_IRQHandler+0x30c>
 800206c:	e01d      	b.n	80020aa <HAL_CAN_IRQHandler+0x32a>
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	f043 0308 	orr.w	r3, r3, #8
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
 8002076:	e018      	b.n	80020aa <HAL_CAN_IRQHandler+0x32a>
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	f043 0310 	orr.w	r3, r3, #16
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
 8002080:	e013      	b.n	80020aa <HAL_CAN_IRQHandler+0x32a>
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	f043 0320 	orr.w	r3, r3, #32
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
 800208a:	e00e      	b.n	80020aa <HAL_CAN_IRQHandler+0x32a>
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
 8002094:	e009      	b.n	80020aa <HAL_CAN_IRQHandler+0x32a>
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
 800209e:	e004      	b.n	80020aa <HAL_CAN_IRQHandler+0x32a>
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
 80020a8:	bf00      	nop
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699a      	ldr	r2, [r3, #24]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80020b8:	619a      	str	r2, [r3, #24]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2204      	movs	r2, #4
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_CAN_IRQHandler+0x35a>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	625a      	str	r2, [r3, #36]	; 0x24
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f867 	bl	80021a8 <HAL_CAN_ErrorCallback>
 80020da:	bf00      	nop
 80020dc:	3728      	adds	r7, #40	; 0x28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_CAN_TxMailbox0CompleteCallback>:
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <HAL_CAN_TxMailbox1CompleteCallback>:
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <HAL_CAN_TxMailbox2CompleteCallback>:
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <HAL_CAN_TxMailbox0AbortCallback>:
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr

0800212a <HAL_CAN_TxMailbox1AbortCallback>:
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <HAL_CAN_TxMailbox2AbortCallback>:
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <HAL_CAN_RxFifo0FullCallback>:
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <HAL_CAN_RxFifo1FullCallback>:
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <HAL_CAN_SleepCallback>:
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr

08002196 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <HAL_CAN_ErrorCallback>:
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
	...

080021bc <__NVIC_SetPriorityGrouping>:
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <__NVIC_SetPriorityGrouping+0x44>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d8:	4013      	ands	r3, r2
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	021a      	lsls	r2, r3, #8
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	4a04      	ldr	r2, [pc, #16]	; (8002200 <__NVIC_SetPriorityGrouping+0x44>)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	60d3      	str	r3, [r2, #12]
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_GetPriorityGrouping>:
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
 8002208:	4b04      	ldr	r3, [pc, #16]	; (800221c <__NVIC_GetPriorityGrouping+0x18>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	0a1b      	lsrs	r3, r3, #8
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	4618      	mov	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <__NVIC_EnableIRQ>:
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	2b00      	cmp	r3, #0
 8002230:	db0b      	blt.n	800224a <__NVIC_EnableIRQ+0x2a>
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	f003 021f 	and.w	r2, r3, #31
 8002238:	4906      	ldr	r1, [pc, #24]	; (8002254 <__NVIC_EnableIRQ+0x34>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	095b      	lsrs	r3, r3, #5
 8002240:	2001      	movs	r0, #1
 8002242:	fa00 f202 	lsl.w	r2, r0, r2
 8002246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	e000e100 	.word	0xe000e100

08002258 <__NVIC_SetPriority>:
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	71fb      	strb	r3, [r7, #7]
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	db0a      	blt.n	8002282 <__NVIC_SetPriority+0x2a>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	490c      	ldr	r1, [pc, #48]	; (80022a4 <__NVIC_SetPriority+0x4c>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	0112      	lsls	r2, r2, #4
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	440b      	add	r3, r1
 800227c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002280:	e00a      	b.n	8002298 <__NVIC_SetPriority+0x40>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4908      	ldr	r1, [pc, #32]	; (80022a8 <__NVIC_SetPriority+0x50>)
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	3b04      	subs	r3, #4
 8002290:	0112      	lsls	r2, r2, #4
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	440b      	add	r3, r1
 8002296:	761a      	strb	r2, [r3, #24]
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000e100 	.word	0xe000e100
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <NVIC_EncodePriority>:
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	; 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	61fb      	str	r3, [r7, #28]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f1c3 0307 	rsb	r3, r3, #7
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	bf28      	it	cs
 80022ca:	2304      	movcs	r3, #4
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3304      	adds	r3, #4
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d902      	bls.n	80022dc <NVIC_EncodePriority+0x30>
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3b03      	subs	r3, #3
 80022da:	e000      	b.n	80022de <NVIC_EncodePriority+0x32>
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	401a      	ands	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	409a      	lsls	r2, r3
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	43d9      	mvns	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	400b      	ands	r3, r1
 8002304:	4313      	orrs	r3, r2
 8002306:	4618      	mov	r0, r3
 8002308:	3724      	adds	r7, #36	; 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <SysTick_Config>:
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3b01      	subs	r3, #1
 800231c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002320:	d301      	bcc.n	8002326 <SysTick_Config+0x16>
 8002322:	2301      	movs	r3, #1
 8002324:	e00f      	b.n	8002346 <SysTick_Config+0x36>
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <SysTick_Config+0x40>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	6053      	str	r3, [r2, #4]
 800232e:	210f      	movs	r1, #15
 8002330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002334:	f7ff ff90 	bl	8002258 <__NVIC_SetPriority>
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <SysTick_Config+0x40>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	4b04      	ldr	r3, [pc, #16]	; (8002350 <SysTick_Config+0x40>)
 8002340:	2207      	movs	r2, #7
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	2300      	movs	r3, #0
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	e000e010 	.word	0xe000e010

08002354 <HAL_NVIC_SetPriorityGrouping>:
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ff2d 	bl	80021bc <__NVIC_SetPriorityGrouping>
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_SetPriority>:
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	73fb      	strb	r3, [r7, #15]
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	f7ff ff42 	bl	8002204 <__NVIC_GetPriorityGrouping>
 8002380:	6178      	str	r0, [r7, #20]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	6978      	ldr	r0, [r7, #20]
 8002388:	f7ff ff90 	bl	80022ac <NVIC_EncodePriority>
 800238c:	4602      	mov	r2, r0
 800238e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff5f 	bl	8002258 <__NVIC_SetPriority>
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_EnableIRQ>:
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	71fb      	strb	r3, [r7, #7]
 80023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff35 	bl	8002220 <__NVIC_EnableIRQ>
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_SYSTICK_Config>:
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ffa2 	bl	8002310 <SysTick_Config>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <HAL_SYSTICK_CLKSourceConfig>:
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d106      	bne.n	80023f4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
 80023e6:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a08      	ldr	r2, [pc, #32]	; (800240c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80023ec:	f043 0304 	orr.w	r3, r3, #4
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e005      	b.n	8002400 <HAL_SYSTICK_CLKSourceConfig+0x28>
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a04      	ldr	r2, [pc, #16]	; (800240c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80023fa:	f023 0304 	bic.w	r3, r3, #4
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000e010 	.word	0xe000e010

08002410 <HAL_GPIO_Init>:
 8002410:	b480      	push	{r7}
 8002412:	b08b      	sub	sp, #44	; 0x2c
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
 800241e:	2300      	movs	r3, #0
 8002420:	623b      	str	r3, [r7, #32]
 8002422:	e133      	b.n	800268c <HAL_GPIO_Init+0x27c>
 8002424:	2201      	movs	r2, #1
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	429a      	cmp	r2, r3
 800243e:	f040 8122 	bne.w	8002686 <HAL_GPIO_Init+0x276>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b12      	cmp	r3, #18
 8002448:	d034      	beq.n	80024b4 <HAL_GPIO_Init+0xa4>
 800244a:	2b12      	cmp	r3, #18
 800244c:	d80d      	bhi.n	800246a <HAL_GPIO_Init+0x5a>
 800244e:	2b02      	cmp	r3, #2
 8002450:	d02b      	beq.n	80024aa <HAL_GPIO_Init+0x9a>
 8002452:	2b02      	cmp	r3, #2
 8002454:	d804      	bhi.n	8002460 <HAL_GPIO_Init+0x50>
 8002456:	2b00      	cmp	r3, #0
 8002458:	d031      	beq.n	80024be <HAL_GPIO_Init+0xae>
 800245a:	2b01      	cmp	r3, #1
 800245c:	d01c      	beq.n	8002498 <HAL_GPIO_Init+0x88>
 800245e:	e048      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
 8002460:	2b03      	cmp	r3, #3
 8002462:	d043      	beq.n	80024ec <HAL_GPIO_Init+0xdc>
 8002464:	2b11      	cmp	r3, #17
 8002466:	d01b      	beq.n	80024a0 <HAL_GPIO_Init+0x90>
 8002468:	e043      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
 800246a:	4a8f      	ldr	r2, [pc, #572]	; (80026a8 <HAL_GPIO_Init+0x298>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d026      	beq.n	80024be <HAL_GPIO_Init+0xae>
 8002470:	4a8d      	ldr	r2, [pc, #564]	; (80026a8 <HAL_GPIO_Init+0x298>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d806      	bhi.n	8002484 <HAL_GPIO_Init+0x74>
 8002476:	4a8d      	ldr	r2, [pc, #564]	; (80026ac <HAL_GPIO_Init+0x29c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d020      	beq.n	80024be <HAL_GPIO_Init+0xae>
 800247c:	4a8c      	ldr	r2, [pc, #560]	; (80026b0 <HAL_GPIO_Init+0x2a0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d01d      	beq.n	80024be <HAL_GPIO_Init+0xae>
 8002482:	e036      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
 8002484:	4a8b      	ldr	r2, [pc, #556]	; (80026b4 <HAL_GPIO_Init+0x2a4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d019      	beq.n	80024be <HAL_GPIO_Init+0xae>
 800248a:	4a8b      	ldr	r2, [pc, #556]	; (80026b8 <HAL_GPIO_Init+0x2a8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d016      	beq.n	80024be <HAL_GPIO_Init+0xae>
 8002490:	4a8a      	ldr	r2, [pc, #552]	; (80026bc <HAL_GPIO_Init+0x2ac>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d013      	beq.n	80024be <HAL_GPIO_Init+0xae>
 8002496:	e02c      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	623b      	str	r3, [r7, #32]
 800249e:	e028      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	3304      	adds	r3, #4
 80024a6:	623b      	str	r3, [r7, #32]
 80024a8:	e023      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	3308      	adds	r3, #8
 80024b0:	623b      	str	r3, [r7, #32]
 80024b2:	e01e      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	330c      	adds	r3, #12
 80024ba:	623b      	str	r3, [r7, #32]
 80024bc:	e019      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d102      	bne.n	80024cc <HAL_GPIO_Init+0xbc>
 80024c6:	2304      	movs	r3, #4
 80024c8:	623b      	str	r3, [r7, #32]
 80024ca:	e012      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d105      	bne.n	80024e0 <HAL_GPIO_Init+0xd0>
 80024d4:	2308      	movs	r3, #8
 80024d6:	623b      	str	r3, [r7, #32]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	611a      	str	r2, [r3, #16]
 80024de:	e008      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
 80024e0:	2308      	movs	r3, #8
 80024e2:	623b      	str	r3, [r7, #32]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	615a      	str	r2, [r3, #20]
 80024ea:	e002      	b.n	80024f2 <HAL_GPIO_Init+0xe2>
 80024ec:	2300      	movs	r3, #0
 80024ee:	623b      	str	r3, [r7, #32]
 80024f0:	bf00      	nop
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	2bff      	cmp	r3, #255	; 0xff
 80024f6:	d801      	bhi.n	80024fc <HAL_GPIO_Init+0xec>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	e001      	b.n	8002500 <HAL_GPIO_Init+0xf0>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3304      	adds	r3, #4
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	2bff      	cmp	r3, #255	; 0xff
 8002506:	d802      	bhi.n	800250e <HAL_GPIO_Init+0xfe>
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	e002      	b.n	8002514 <HAL_GPIO_Init+0x104>
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	3b08      	subs	r3, #8
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	210f      	movs	r1, #15
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	401a      	ands	r2, r3
 8002526:	6a39      	ldr	r1, [r7, #32]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	431a      	orrs	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80a2 	beq.w	8002686 <HAL_GPIO_Init+0x276>
 8002542:	4b5f      	ldr	r3, [pc, #380]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	4a5e      	ldr	r2, [pc, #376]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6193      	str	r3, [r2, #24]
 800254e:	4b5c      	ldr	r3, [pc, #368]	; (80026c0 <HAL_GPIO_Init+0x2b0>)
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4a5a      	ldr	r2, [pc, #360]	; (80026c4 <HAL_GPIO_Init+0x2b4>)
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	089b      	lsrs	r3, r3, #2
 8002560:	3302      	adds	r3, #2
 8002562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	220f      	movs	r2, #15
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4013      	ands	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a51      	ldr	r2, [pc, #324]	; (80026c8 <HAL_GPIO_Init+0x2b8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d01f      	beq.n	80025c6 <HAL_GPIO_Init+0x1b6>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a50      	ldr	r2, [pc, #320]	; (80026cc <HAL_GPIO_Init+0x2bc>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d019      	beq.n	80025c2 <HAL_GPIO_Init+0x1b2>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a4f      	ldr	r2, [pc, #316]	; (80026d0 <HAL_GPIO_Init+0x2c0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d013      	beq.n	80025be <HAL_GPIO_Init+0x1ae>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a4e      	ldr	r2, [pc, #312]	; (80026d4 <HAL_GPIO_Init+0x2c4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00d      	beq.n	80025ba <HAL_GPIO_Init+0x1aa>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a4d      	ldr	r2, [pc, #308]	; (80026d8 <HAL_GPIO_Init+0x2c8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d007      	beq.n	80025b6 <HAL_GPIO_Init+0x1a6>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4c      	ldr	r2, [pc, #304]	; (80026dc <HAL_GPIO_Init+0x2cc>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d101      	bne.n	80025b2 <HAL_GPIO_Init+0x1a2>
 80025ae:	2305      	movs	r3, #5
 80025b0:	e00a      	b.n	80025c8 <HAL_GPIO_Init+0x1b8>
 80025b2:	2306      	movs	r3, #6
 80025b4:	e008      	b.n	80025c8 <HAL_GPIO_Init+0x1b8>
 80025b6:	2304      	movs	r3, #4
 80025b8:	e006      	b.n	80025c8 <HAL_GPIO_Init+0x1b8>
 80025ba:	2303      	movs	r3, #3
 80025bc:	e004      	b.n	80025c8 <HAL_GPIO_Init+0x1b8>
 80025be:	2302      	movs	r3, #2
 80025c0:	e002      	b.n	80025c8 <HAL_GPIO_Init+0x1b8>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <HAL_GPIO_Init+0x1b8>
 80025c6:	2300      	movs	r3, #0
 80025c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ca:	f002 0203 	and.w	r2, r2, #3
 80025ce:	0092      	lsls	r2, r2, #2
 80025d0:	4093      	lsls	r3, r2
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	493a      	ldr	r1, [pc, #232]	; (80026c4 <HAL_GPIO_Init+0x2b4>)
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	089b      	lsrs	r3, r3, #2
 80025de:	3302      	adds	r3, #2
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d006      	beq.n	8002600 <HAL_GPIO_Init+0x1f0>
 80025f2:	4b3b      	ldr	r3, [pc, #236]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	493a      	ldr	r1, [pc, #232]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
 80025fe:	e006      	b.n	800260e <HAL_GPIO_Init+0x1fe>
 8002600:	4b37      	ldr	r3, [pc, #220]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	43db      	mvns	r3, r3
 8002608:	4935      	ldr	r1, [pc, #212]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 800260a:	4013      	ands	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d006      	beq.n	8002628 <HAL_GPIO_Init+0x218>
 800261a:	4b31      	ldr	r3, [pc, #196]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	4930      	ldr	r1, [pc, #192]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
 8002626:	e006      	b.n	8002636 <HAL_GPIO_Init+0x226>
 8002628:	4b2d      	ldr	r3, [pc, #180]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	43db      	mvns	r3, r3
 8002630:	492b      	ldr	r1, [pc, #172]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002632:	4013      	ands	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d006      	beq.n	8002650 <HAL_GPIO_Init+0x240>
 8002642:	4b27      	ldr	r3, [pc, #156]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	4926      	ldr	r1, [pc, #152]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	608b      	str	r3, [r1, #8]
 800264e:	e006      	b.n	800265e <HAL_GPIO_Init+0x24e>
 8002650:	4b23      	ldr	r3, [pc, #140]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	43db      	mvns	r3, r3
 8002658:	4921      	ldr	r1, [pc, #132]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 800265a:	4013      	ands	r3, r2
 800265c:	608b      	str	r3, [r1, #8]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d006      	beq.n	8002678 <HAL_GPIO_Init+0x268>
 800266a:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	491c      	ldr	r1, [pc, #112]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	60cb      	str	r3, [r1, #12]
 8002676:	e006      	b.n	8002686 <HAL_GPIO_Init+0x276>
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	43db      	mvns	r3, r3
 8002680:	4917      	ldr	r1, [pc, #92]	; (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002682:	4013      	ands	r3, r2
 8002684:	60cb      	str	r3, [r1, #12]
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	3301      	adds	r3, #1
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	fa22 f303 	lsr.w	r3, r2, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	f47f aec4 	bne.w	8002424 <HAL_GPIO_Init+0x14>
 800269c:	bf00      	nop
 800269e:	372c      	adds	r7, #44	; 0x2c
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	10210000 	.word	0x10210000
 80026ac:	10110000 	.word	0x10110000
 80026b0:	10120000 	.word	0x10120000
 80026b4:	10310000 	.word	0x10310000
 80026b8:	10320000 	.word	0x10320000
 80026bc:	10220000 	.word	0x10220000
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40010000 	.word	0x40010000
 80026c8:	40010800 	.word	0x40010800
 80026cc:	40010c00 	.word	0x40010c00
 80026d0:	40011000 	.word	0x40011000
 80026d4:	40011400 	.word	0x40011400
 80026d8:	40011800 	.word	0x40011800
 80026dc:	40011c00 	.word	0x40011c00
 80026e0:	40010400 	.word	0x40010400

080026e4 <HAL_GPIO_TogglePin>:
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	887b      	ldrh	r3, [r7, #2]
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_TogglePin+0x20>
 80026fc:	887a      	ldrh	r2, [r7, #2]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	615a      	str	r2, [r3, #20]
 8002702:	e002      	b.n	800270a <HAL_GPIO_TogglePin+0x26>
 8002704:	887a      	ldrh	r2, [r7, #2]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	611a      	str	r2, [r3, #16]
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <HAL_RCC_OscConfig>:
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCC_OscConfig+0x12>
 8002722:	2301      	movs	r3, #1
 8002724:	e26c      	b.n	8002c00 <HAL_RCC_OscConfig+0x4ec>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 8087 	beq.w	8002842 <HAL_RCC_OscConfig+0x12e>
 8002734:	4b92      	ldr	r3, [pc, #584]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b04      	cmp	r3, #4
 800273e:	d00c      	beq.n	800275a <HAL_RCC_OscConfig+0x46>
 8002740:	4b8f      	ldr	r3, [pc, #572]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 030c 	and.w	r3, r3, #12
 8002748:	2b08      	cmp	r3, #8
 800274a:	d112      	bne.n	8002772 <HAL_RCC_OscConfig+0x5e>
 800274c:	4b8c      	ldr	r3, [pc, #560]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002758:	d10b      	bne.n	8002772 <HAL_RCC_OscConfig+0x5e>
 800275a:	4b89      	ldr	r3, [pc, #548]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d06c      	beq.n	8002840 <HAL_RCC_OscConfig+0x12c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d168      	bne.n	8002840 <HAL_RCC_OscConfig+0x12c>
 800276e:	2301      	movs	r3, #1
 8002770:	e246      	b.n	8002c00 <HAL_RCC_OscConfig+0x4ec>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277a:	d106      	bne.n	800278a <HAL_RCC_OscConfig+0x76>
 800277c:	4b80      	ldr	r3, [pc, #512]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a7f      	ldr	r2, [pc, #508]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 8002782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	e02e      	b.n	80027e8 <HAL_RCC_OscConfig+0xd4>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0x98>
 8002792:	4b7b      	ldr	r3, [pc, #492]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a7a      	ldr	r2, [pc, #488]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 8002798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b78      	ldr	r3, [pc, #480]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a77      	ldr	r2, [pc, #476]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	e01d      	b.n	80027e8 <HAL_RCC_OscConfig+0xd4>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCC_OscConfig+0xbc>
 80027b6:	4b72      	ldr	r3, [pc, #456]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a71      	ldr	r2, [pc, #452]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	4b6f      	ldr	r3, [pc, #444]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a6e      	ldr	r2, [pc, #440]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	e00b      	b.n	80027e8 <HAL_RCC_OscConfig+0xd4>
 80027d0:	4b6b      	ldr	r3, [pc, #428]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a6a      	ldr	r2, [pc, #424]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80027d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	4b68      	ldr	r3, [pc, #416]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a67      	ldr	r2, [pc, #412]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80027e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d013      	beq.n	8002818 <HAL_RCC_OscConfig+0x104>
 80027f0:	f7fe fea4 	bl	800153c <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0xf6>
 80027f8:	f7fe fea0 	bl	800153c <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	; 0x64
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0xf6>
 8002806:	2303      	movs	r3, #3
 8002808:	e1fa      	b.n	8002c00 <HAL_RCC_OscConfig+0x4ec>
 800280a:	4b5d      	ldr	r3, [pc, #372]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0xe4>
 8002816:	e014      	b.n	8002842 <HAL_RCC_OscConfig+0x12e>
 8002818:	f7fe fe90 	bl	800153c <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x11e>
 8002820:	f7fe fe8c 	bl	800153c <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b64      	cmp	r3, #100	; 0x64
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x11e>
 800282e:	2303      	movs	r3, #3
 8002830:	e1e6      	b.n	8002c00 <HAL_RCC_OscConfig+0x4ec>
 8002832:	4b53      	ldr	r3, [pc, #332]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x10c>
 800283e:	e000      	b.n	8002842 <HAL_RCC_OscConfig+0x12e>
 8002840:	bf00      	nop
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d063      	beq.n	8002916 <HAL_RCC_OscConfig+0x202>
 800284e:	4b4c      	ldr	r3, [pc, #304]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00b      	beq.n	8002872 <HAL_RCC_OscConfig+0x15e>
 800285a:	4b49      	ldr	r3, [pc, #292]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b08      	cmp	r3, #8
 8002864:	d11c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x18c>
 8002866:	4b46      	ldr	r3, [pc, #280]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d116      	bne.n	80028a0 <HAL_RCC_OscConfig+0x18c>
 8002872:	4b43      	ldr	r3, [pc, #268]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <HAL_RCC_OscConfig+0x176>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d001      	beq.n	800288a <HAL_RCC_OscConfig+0x176>
 8002886:	2301      	movs	r3, #1
 8002888:	e1ba      	b.n	8002c00 <HAL_RCC_OscConfig+0x4ec>
 800288a:	4b3d      	ldr	r3, [pc, #244]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4939      	ldr	r1, [pc, #228]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 800289a:	4313      	orrs	r3, r2
 800289c:	600b      	str	r3, [r1, #0]
 800289e:	e03a      	b.n	8002916 <HAL_RCC_OscConfig+0x202>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d020      	beq.n	80028ea <HAL_RCC_OscConfig+0x1d6>
 80028a8:	4b36      	ldr	r3, [pc, #216]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	f7fe fe45 	bl	800153c <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x1b4>
 80028b6:	f7fe fe41 	bl	800153c <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x1b4>
 80028c4:	2303      	movs	r3, #3
 80028c6:	e19b      	b.n	8002c00 <HAL_RCC_OscConfig+0x4ec>
 80028c8:	4b2d      	ldr	r3, [pc, #180]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0x1a2>
 80028d4:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4927      	ldr	r1, [pc, #156]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	600b      	str	r3, [r1, #0]
 80028e8:	e015      	b.n	8002916 <HAL_RCC_OscConfig+0x202>
 80028ea:	4b26      	ldr	r3, [pc, #152]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	f7fe fe24 	bl	800153c <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x1f6>
 80028f8:	f7fe fe20 	bl	800153c <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x1f6>
 8002906:	2303      	movs	r3, #3
 8002908:	e17a      	b.n	8002c00 <HAL_RCC_OscConfig+0x4ec>
 800290a:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x1e4>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d03a      	beq.n	8002998 <HAL_RCC_OscConfig+0x284>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d019      	beq.n	800295e <HAL_RCC_OscConfig+0x24a>
 800292a:	4b17      	ldr	r3, [pc, #92]	; (8002988 <HAL_RCC_OscConfig+0x274>)
 800292c:	2201      	movs	r2, #1
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	f7fe fe04 	bl	800153c <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x236>
 8002938:	f7fe fe00 	bl	800153c <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x236>
 8002946:	2303      	movs	r3, #3
 8002948:	e15a      	b.n	8002c00 <HAL_RCC_OscConfig+0x4ec>
 800294a:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <HAL_RCC_OscConfig+0x26c>)
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0x224>
 8002956:	2001      	movs	r0, #1
 8002958:	f000 fada 	bl	8002f10 <RCC_Delay>
 800295c:	e01c      	b.n	8002998 <HAL_RCC_OscConfig+0x284>
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <HAL_RCC_OscConfig+0x274>)
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	f7fe fdea 	bl	800153c <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]
 800296a:	e00f      	b.n	800298c <HAL_RCC_OscConfig+0x278>
 800296c:	f7fe fde6 	bl	800153c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d908      	bls.n	800298c <HAL_RCC_OscConfig+0x278>
 800297a:	2303      	movs	r3, #3
 800297c:	e140      	b.n	8002c00 <HAL_RCC_OscConfig+0x4ec>
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000
 8002984:	42420000 	.word	0x42420000
 8002988:	42420480 	.word	0x42420480
 800298c:	4b9e      	ldr	r3, [pc, #632]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1e9      	bne.n	800296c <HAL_RCC_OscConfig+0x258>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80a6 	beq.w	8002af2 <HAL_RCC_OscConfig+0x3de>
 80029a6:	2300      	movs	r3, #0
 80029a8:	75fb      	strb	r3, [r7, #23]
 80029aa:	4b97      	ldr	r3, [pc, #604]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10d      	bne.n	80029d2 <HAL_RCC_OscConfig+0x2be>
 80029b6:	4b94      	ldr	r3, [pc, #592]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	4a93      	ldr	r2, [pc, #588]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 80029bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c0:	61d3      	str	r3, [r2, #28]
 80029c2:	4b91      	ldr	r3, [pc, #580]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2301      	movs	r3, #1
 80029d0:	75fb      	strb	r3, [r7, #23]
 80029d2:	4b8e      	ldr	r3, [pc, #568]	; (8002c0c <HAL_RCC_OscConfig+0x4f8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d118      	bne.n	8002a10 <HAL_RCC_OscConfig+0x2fc>
 80029de:	4b8b      	ldr	r3, [pc, #556]	; (8002c0c <HAL_RCC_OscConfig+0x4f8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a8a      	ldr	r2, [pc, #552]	; (8002c0c <HAL_RCC_OscConfig+0x4f8>)
 80029e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	f7fe fda7 	bl	800153c <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x2f0>
 80029f2:	f7fe fda3 	bl	800153c <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b64      	cmp	r3, #100	; 0x64
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x2f0>
 8002a00:	2303      	movs	r3, #3
 8002a02:	e0fd      	b.n	8002c00 <HAL_RCC_OscConfig+0x4ec>
 8002a04:	4b81      	ldr	r3, [pc, #516]	; (8002c0c <HAL_RCC_OscConfig+0x4f8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x2de>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d106      	bne.n	8002a26 <HAL_RCC_OscConfig+0x312>
 8002a18:	4b7b      	ldr	r3, [pc, #492]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	4a7a      	ldr	r2, [pc, #488]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	6213      	str	r3, [r2, #32]
 8002a24:	e02d      	b.n	8002a82 <HAL_RCC_OscConfig+0x36e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x334>
 8002a2e:	4b76      	ldr	r3, [pc, #472]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	4a75      	ldr	r2, [pc, #468]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002a34:	f023 0301 	bic.w	r3, r3, #1
 8002a38:	6213      	str	r3, [r2, #32]
 8002a3a:	4b73      	ldr	r3, [pc, #460]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	4a72      	ldr	r2, [pc, #456]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002a40:	f023 0304 	bic.w	r3, r3, #4
 8002a44:	6213      	str	r3, [r2, #32]
 8002a46:	e01c      	b.n	8002a82 <HAL_RCC_OscConfig+0x36e>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b05      	cmp	r3, #5
 8002a4e:	d10c      	bne.n	8002a6a <HAL_RCC_OscConfig+0x356>
 8002a50:	4b6d      	ldr	r3, [pc, #436]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	4a6c      	ldr	r2, [pc, #432]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002a56:	f043 0304 	orr.w	r3, r3, #4
 8002a5a:	6213      	str	r3, [r2, #32]
 8002a5c:	4b6a      	ldr	r3, [pc, #424]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	4a69      	ldr	r2, [pc, #420]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6213      	str	r3, [r2, #32]
 8002a68:	e00b      	b.n	8002a82 <HAL_RCC_OscConfig+0x36e>
 8002a6a:	4b67      	ldr	r3, [pc, #412]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	4a66      	ldr	r2, [pc, #408]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002a70:	f023 0301 	bic.w	r3, r3, #1
 8002a74:	6213      	str	r3, [r2, #32]
 8002a76:	4b64      	ldr	r3, [pc, #400]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	4a63      	ldr	r2, [pc, #396]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002a7c:	f023 0304 	bic.w	r3, r3, #4
 8002a80:	6213      	str	r3, [r2, #32]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d015      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x3a2>
 8002a8a:	f7fe fd57 	bl	800153c <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x394>
 8002a92:	f7fe fd53 	bl	800153c <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x394>
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e0ab      	b.n	8002c00 <HAL_RCC_OscConfig+0x4ec>
 8002aa8:	4b57      	ldr	r3, [pc, #348]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ee      	beq.n	8002a92 <HAL_RCC_OscConfig+0x37e>
 8002ab4:	e014      	b.n	8002ae0 <HAL_RCC_OscConfig+0x3cc>
 8002ab6:	f7fe fd41 	bl	800153c <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]
 8002abc:	e00a      	b.n	8002ad4 <HAL_RCC_OscConfig+0x3c0>
 8002abe:	f7fe fd3d 	bl	800153c <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x3c0>
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e095      	b.n	8002c00 <HAL_RCC_OscConfig+0x4ec>
 8002ad4:	4b4c      	ldr	r3, [pc, #304]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1ee      	bne.n	8002abe <HAL_RCC_OscConfig+0x3aa>
 8002ae0:	7dfb      	ldrb	r3, [r7, #23]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d105      	bne.n	8002af2 <HAL_RCC_OscConfig+0x3de>
 8002ae6:	4b48      	ldr	r3, [pc, #288]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	4a47      	ldr	r2, [pc, #284]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af0:	61d3      	str	r3, [r2, #28]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 8081 	beq.w	8002bfe <HAL_RCC_OscConfig+0x4ea>
 8002afc:	4b42      	ldr	r3, [pc, #264]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d061      	beq.n	8002bcc <HAL_RCC_OscConfig+0x4b8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d146      	bne.n	8002b9e <HAL_RCC_OscConfig+0x48a>
 8002b10:	4b3f      	ldr	r3, [pc, #252]	; (8002c10 <HAL_RCC_OscConfig+0x4fc>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	f7fe fd11 	bl	800153c <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x41c>
 8002b1e:	f7fe fd0d 	bl	800153c <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x41c>
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e067      	b.n	8002c00 <HAL_RCC_OscConfig+0x4ec>
 8002b30:	4b35      	ldr	r3, [pc, #212]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f0      	bne.n	8002b1e <HAL_RCC_OscConfig+0x40a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b44:	d108      	bne.n	8002b58 <HAL_RCC_OscConfig+0x444>
 8002b46:	4b30      	ldr	r3, [pc, #192]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	492d      	ldr	r1, [pc, #180]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	604b      	str	r3, [r1, #4]
 8002b58:	4b2b      	ldr	r3, [pc, #172]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a19      	ldr	r1, [r3, #32]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	4927      	ldr	r1, [pc, #156]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	604b      	str	r3, [r1, #4]
 8002b70:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <HAL_RCC_OscConfig+0x4fc>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	f7fe fce1 	bl	800153c <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x47c>
 8002b7e:	f7fe fcdd 	bl	800153c <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x47c>
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e037      	b.n	8002c00 <HAL_RCC_OscConfig+0x4ec>
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x46a>
 8002b9c:	e02f      	b.n	8002bfe <HAL_RCC_OscConfig+0x4ea>
 8002b9e:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <HAL_RCC_OscConfig+0x4fc>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	f7fe fcca 	bl	800153c <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x4aa>
 8002bac:	f7fe fcc6 	bl	800153c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x4aa>
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e020      	b.n	8002c00 <HAL_RCC_OscConfig+0x4ec>
 8002bbe:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x498>
 8002bca:	e018      	b.n	8002bfe <HAL_RCC_OscConfig+0x4ea>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x4c4>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e013      	b.n	8002c00 <HAL_RCC_OscConfig+0x4ec>
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_RCC_OscConfig+0x4f4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d106      	bne.n	8002bfa <HAL_RCC_OscConfig+0x4e6>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCC_OscConfig+0x4ea>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <HAL_RCC_OscConfig+0x4ec>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	40007000 	.word	0x40007000
 8002c10:	42420060 	.word	0x42420060

08002c14 <HAL_RCC_ClockConfig>:
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x14>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0d0      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
 8002c28:	4b6a      	ldr	r3, [pc, #424]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d910      	bls.n	8002c58 <HAL_RCC_ClockConfig+0x44>
 8002c36:	4b67      	ldr	r3, [pc, #412]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 0207 	bic.w	r2, r3, #7
 8002c3e:	4965      	ldr	r1, [pc, #404]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]
 8002c46:	4b63      	ldr	r3, [pc, #396]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x44>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0b8      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d020      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x92>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x68>
 8002c70:	4b59      	ldr	r3, [pc, #356]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4a58      	ldr	r2, [pc, #352]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c7a:	6053      	str	r3, [r2, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x80>
 8002c88:	4b53      	ldr	r3, [pc, #332]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	4a52      	ldr	r2, [pc, #328]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c92:	6053      	str	r3, [r2, #4]
 8002c94:	4b50      	ldr	r3, [pc, #320]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	494d      	ldr	r1, [pc, #308]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	604b      	str	r3, [r1, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d040      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x120>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d107      	bne.n	8002cca <HAL_RCC_ClockConfig+0xb6>
 8002cba:	4b47      	ldr	r3, [pc, #284]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d115      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e07f      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d107      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xce>
 8002cd2:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e073      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
 8002ce2:	4b3d      	ldr	r3, [pc, #244]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e06b      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
 8002cf2:	4b39      	ldr	r3, [pc, #228]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f023 0203 	bic.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4936      	ldr	r1, [pc, #216]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]
 8002d04:	f7fe fc1a 	bl	800153c <HAL_GetTick>
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_ClockConfig+0x10e>
 8002d0c:	f7fe fc16 	bl	800153c <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x10e>
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e053      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
 8002d22:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 020c 	and.w	r2, r3, #12
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d1eb      	bne.n	8002d0c <HAL_RCC_ClockConfig+0xf8>
 8002d34:	4b27      	ldr	r3, [pc, #156]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d210      	bcs.n	8002d64 <HAL_RCC_ClockConfig+0x150>
 8002d42:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 0207 	bic.w	r2, r3, #7
 8002d4a:	4922      	ldr	r1, [pc, #136]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]
 8002d52:	4b20      	ldr	r3, [pc, #128]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x150>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e032      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x16e>
 8002d70:	4b19      	ldr	r3, [pc, #100]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4916      	ldr	r1, [pc, #88]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	604b      	str	r3, [r1, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d009      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x18e>
 8002d8e:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	490e      	ldr	r1, [pc, #56]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
 8002da2:	f000 f821 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 8002da6:	4601      	mov	r1, r0
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	5cd3      	ldrb	r3, [r2, r3]
 8002db6:	fa21 f303 	lsr.w	r3, r1, r3
 8002dba:	4a09      	ldr	r2, [pc, #36]	; (8002de0 <HAL_RCC_ClockConfig+0x1cc>)
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_RCC_ClockConfig+0x1d0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe fb8a 	bl	80014dc <HAL_InitTick>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40022000 	.word	0x40022000
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	0800e89c 	.word	0x0800e89c
 8002de0:	20004e24 	.word	0x20004e24
 8002de4:	20004e28 	.word	0x20004e28

08002de8 <HAL_RCC_GetSysClockFreq>:
 8002de8:	b490      	push	{r4, r7}
 8002dea:	b08a      	sub	sp, #40	; 0x28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002df0:	1d3c      	adds	r4, r7, #4
 8002df2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002df4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002df8:	4b28      	ldr	r3, [pc, #160]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	803b      	strh	r3, [r7, #0]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
 8002e02:	2300      	movs	r3, #0
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	2300      	movs	r3, #0
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	623b      	str	r3, [r7, #32]
 8002e12:	4b23      	ldr	r3, [pc, #140]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d002      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x40>
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d003      	beq.n	8002e2e <HAL_RCC_GetSysClockFreq+0x46>
 8002e26:	e02d      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x9c>
 8002e28:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e2a:	623b      	str	r3, [r7, #32]
 8002e2c:	e02d      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0xa2>
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	0c9b      	lsrs	r3, r3, #18
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d013      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x8c>
 8002e4c:	4b14      	ldr	r3, [pc, #80]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	0c5b      	lsrs	r3, r3, #17
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	4a0f      	ldr	r2, [pc, #60]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e66:	fb02 f203 	mul.w	r2, r2, r3
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
 8002e72:	e004      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0x96>
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	4a0c      	ldr	r2, [pc, #48]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e78:	fb02 f303 	mul.w	r3, r2, r3
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	623b      	str	r3, [r7, #32]
 8002e82:	e002      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0xa2>
 8002e84:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e86:	623b      	str	r3, [r7, #32]
 8002e88:	bf00      	nop
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3728      	adds	r7, #40	; 0x28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc90      	pop	{r4, r7}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	0800d9c8 	.word	0x0800d9c8
 8002e9c:	0800d9d8 	.word	0x0800d9d8
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	007a1200 	.word	0x007a1200
 8002ea8:	003d0900 	.word	0x003d0900

08002eac <HAL_RCC_GetHCLKFreq>:
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	4b02      	ldr	r3, [pc, #8]	; (8002ebc <HAL_RCC_GetHCLKFreq+0x10>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	20004e24 	.word	0x20004e24

08002ec0 <HAL_RCC_GetPCLK1Freq>:
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	f7ff fff2 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002ec8:	4601      	mov	r1, r0
 8002eca:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	0a1b      	lsrs	r3, r3, #8
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	4a03      	ldr	r2, [pc, #12]	; (8002ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed6:	5cd3      	ldrb	r3, [r2, r3]
 8002ed8:	fa21 f303 	lsr.w	r3, r1, r3
 8002edc:	4618      	mov	r0, r3
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	0800e8ac 	.word	0x0800e8ac

08002ee8 <HAL_RCC_GetPCLK2Freq>:
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	f7ff ffde 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002ef0:	4601      	mov	r1, r0
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	0adb      	lsrs	r3, r3, #11
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	4a03      	ldr	r2, [pc, #12]	; (8002f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002efe:	5cd3      	ldrb	r3, [r2, r3]
 8002f00:	fa21 f303 	lsr.w	r3, r1, r3
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	0800e8ac 	.word	0x0800e8ac

08002f10 <RCC_Delay>:
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <RCC_Delay+0x34>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <RCC_Delay+0x38>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	0a5b      	lsrs	r3, r3, #9
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	fb02 f303 	mul.w	r3, r2, r3
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	bf00      	nop
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1e5a      	subs	r2, r3, #1
 8002f32:	60fa      	str	r2, [r7, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f9      	bne.n	8002f2c <RCC_Delay+0x1c>
 8002f38:	bf00      	nop
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20004e24 	.word	0x20004e24
 8002f48:	10624dd3 	.word	0x10624dd3

08002f4c <HAL_TIM_Base_Init>:
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_TIM_Base_Init+0x12>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e01d      	b.n	8002f9a <HAL_TIM_Base_Init+0x4e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_TIM_Base_Init+0x2c>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fd fd2e 	bl	80009d4 <HAL_TIM_Base_MspInit>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3304      	adds	r3, #4
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	f000 f962 	bl	8003254 <TIM_Base_SetConfig>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f98:	2300      	movs	r3, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_TIM_Base_Start_IT>:
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0201 	orr.w	r2, r2, #1
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b06      	cmp	r3, #6
 8002fca:	d007      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0x3a>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_TIM_IRQHandler>:
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d122      	bne.n	8003044 <HAL_TIM_IRQHandler+0x5c>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b02      	cmp	r3, #2
 800300a:	d11b      	bne.n	8003044 <HAL_TIM_IRQHandler+0x5c>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0202 	mvn.w	r2, #2
 8003014:	611a      	str	r2, [r3, #16]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	771a      	strb	r2, [r3, #28]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_TIM_IRQHandler+0x4a>
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f8f6 	bl	800321c <HAL_TIM_IC_CaptureCallback>
 8003030:	e005      	b.n	800303e <HAL_TIM_IRQHandler+0x56>
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f8e9 	bl	800320a <HAL_TIM_OC_DelayElapsedCallback>
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f8f8 	bl	800322e <HAL_TIM_PWM_PulseFinishedCallback>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	771a      	strb	r2, [r3, #28]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b04      	cmp	r3, #4
 8003050:	d122      	bne.n	8003098 <HAL_TIM_IRQHandler+0xb0>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b04      	cmp	r3, #4
 800305e:	d11b      	bne.n	8003098 <HAL_TIM_IRQHandler+0xb0>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0204 	mvn.w	r2, #4
 8003068:	611a      	str	r2, [r3, #16]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2202      	movs	r2, #2
 800306e:	771a      	strb	r2, [r3, #28]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_TIM_IRQHandler+0x9e>
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f8cc 	bl	800321c <HAL_TIM_IC_CaptureCallback>
 8003084:	e005      	b.n	8003092 <HAL_TIM_IRQHandler+0xaa>
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f8bf 	bl	800320a <HAL_TIM_OC_DelayElapsedCallback>
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f8ce 	bl	800322e <HAL_TIM_PWM_PulseFinishedCallback>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	771a      	strb	r2, [r3, #28]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d122      	bne.n	80030ec <HAL_TIM_IRQHandler+0x104>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d11b      	bne.n	80030ec <HAL_TIM_IRQHandler+0x104>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0208 	mvn.w	r2, #8
 80030bc:	611a      	str	r2, [r3, #16]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2204      	movs	r2, #4
 80030c2:	771a      	strb	r2, [r3, #28]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_TIM_IRQHandler+0xf2>
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f8a2 	bl	800321c <HAL_TIM_IC_CaptureCallback>
 80030d8:	e005      	b.n	80030e6 <HAL_TIM_IRQHandler+0xfe>
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f895 	bl	800320a <HAL_TIM_OC_DelayElapsedCallback>
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f8a4 	bl	800322e <HAL_TIM_PWM_PulseFinishedCallback>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	771a      	strb	r2, [r3, #28]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	2b10      	cmp	r3, #16
 80030f8:	d122      	bne.n	8003140 <HAL_TIM_IRQHandler+0x158>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	2b10      	cmp	r3, #16
 8003106:	d11b      	bne.n	8003140 <HAL_TIM_IRQHandler+0x158>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0210 	mvn.w	r2, #16
 8003110:	611a      	str	r2, [r3, #16]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2208      	movs	r2, #8
 8003116:	771a      	strb	r2, [r3, #28]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_TIM_IRQHandler+0x146>
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f878 	bl	800321c <HAL_TIM_IC_CaptureCallback>
 800312c:	e005      	b.n	800313a <HAL_TIM_IRQHandler+0x152>
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f86b 	bl	800320a <HAL_TIM_OC_DelayElapsedCallback>
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f87a 	bl	800322e <HAL_TIM_PWM_PulseFinishedCallback>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	771a      	strb	r2, [r3, #28]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b01      	cmp	r3, #1
 800314c:	d10e      	bne.n	800316c <HAL_TIM_IRQHandler+0x184>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b01      	cmp	r3, #1
 800315a:	d107      	bne.n	800316c <HAL_TIM_IRQHandler+0x184>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0201 	mvn.w	r2, #1
 8003164:	611a      	str	r2, [r3, #16]
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f846 	bl	80031f8 <HAL_TIM_PeriodElapsedCallback>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003176:	2b80      	cmp	r3, #128	; 0x80
 8003178:	d10e      	bne.n	8003198 <HAL_TIM_IRQHandler+0x1b0>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003184:	2b80      	cmp	r3, #128	; 0x80
 8003186:	d107      	bne.n	8003198 <HAL_TIM_IRQHandler+0x1b0>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003190:	611a      	str	r2, [r3, #16]
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f8e1 	bl	800335a <HAL_TIMEx_BreakCallback>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a2:	2b40      	cmp	r3, #64	; 0x40
 80031a4:	d10e      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x1dc>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d107      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x1dc>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031bc:	611a      	str	r2, [r3, #16]
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f83e 	bl	8003240 <HAL_TIM_TriggerCallback>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	d10e      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x208>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d107      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x208>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0220 	mvn.w	r2, #32
 80031e8:	611a      	str	r2, [r3, #16]
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f8ac 	bl	8003348 <HAL_TIMEx_CommutCallback>
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_TIM_PeriodElapsedCallback>:
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <HAL_TIM_OC_DelayElapsedCallback>:
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <HAL_TIM_IC_CaptureCallback>:
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr

0800322e <HAL_TIM_PWM_PulseFinishedCallback>:
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <HAL_TIM_TriggerCallback>:
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr
	...

08003254 <TIM_Base_SetConfig>:
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a33      	ldr	r2, [pc, #204]	; (8003334 <TIM_Base_SetConfig+0xe0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d013      	beq.n	8003294 <TIM_Base_SetConfig+0x40>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a32      	ldr	r2, [pc, #200]	; (8003338 <TIM_Base_SetConfig+0xe4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00f      	beq.n	8003294 <TIM_Base_SetConfig+0x40>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327a:	d00b      	beq.n	8003294 <TIM_Base_SetConfig+0x40>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a2f      	ldr	r2, [pc, #188]	; (800333c <TIM_Base_SetConfig+0xe8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d007      	beq.n	8003294 <TIM_Base_SetConfig+0x40>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a2e      	ldr	r2, [pc, #184]	; (8003340 <TIM_Base_SetConfig+0xec>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d003      	beq.n	8003294 <TIM_Base_SetConfig+0x40>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a2d      	ldr	r2, [pc, #180]	; (8003344 <TIM_Base_SetConfig+0xf0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d108      	bne.n	80032a6 <TIM_Base_SetConfig+0x52>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a22      	ldr	r2, [pc, #136]	; (8003334 <TIM_Base_SetConfig+0xe0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d013      	beq.n	80032d6 <TIM_Base_SetConfig+0x82>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a21      	ldr	r2, [pc, #132]	; (8003338 <TIM_Base_SetConfig+0xe4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00f      	beq.n	80032d6 <TIM_Base_SetConfig+0x82>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032bc:	d00b      	beq.n	80032d6 <TIM_Base_SetConfig+0x82>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a1e      	ldr	r2, [pc, #120]	; (800333c <TIM_Base_SetConfig+0xe8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d007      	beq.n	80032d6 <TIM_Base_SetConfig+0x82>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a1d      	ldr	r2, [pc, #116]	; (8003340 <TIM_Base_SetConfig+0xec>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d003      	beq.n	80032d6 <TIM_Base_SetConfig+0x82>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a1c      	ldr	r2, [pc, #112]	; (8003344 <TIM_Base_SetConfig+0xf0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d108      	bne.n	80032e8 <TIM_Base_SetConfig+0x94>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	629a      	str	r2, [r3, #40]	; 0x28
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a09      	ldr	r2, [pc, #36]	; (8003334 <TIM_Base_SetConfig+0xe0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d003      	beq.n	800331c <TIM_Base_SetConfig+0xc8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a08      	ldr	r2, [pc, #32]	; (8003338 <TIM_Base_SetConfig+0xe4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d103      	bne.n	8003324 <TIM_Base_SetConfig+0xd0>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	615a      	str	r2, [r3, #20]
 800332a:	bf00      	nop
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	40012c00 	.word	0x40012c00
 8003338:	40013400 	.word	0x40013400
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800
 8003344:	40000c00 	.word	0x40000c00

08003348 <HAL_TIMEx_CommutCallback>:
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr

0800335a <HAL_TIMEx_BreakCallback>:
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr

0800336c <HAL_UART_Init>:
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_UART_Init+0x12>
 800337a:	2301      	movs	r3, #1
 800337c:	e03f      	b.n	80033fe <HAL_UART_Init+0x92>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d106      	bne.n	8003398 <HAL_UART_Init+0x2c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fd fd0e 	bl	8000db4 <HAL_UART_MspInit>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2224      	movs	r2, #36	; 0x24
 800339c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ae:	60da      	str	r2, [r3, #12]
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f829 	bl	8003408 <UART_SetConfig>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033c4:	611a      	str	r2, [r3, #16]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695a      	ldr	r2, [r3, #20]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033d4:	615a      	str	r2, [r3, #20]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033e4:	60da      	str	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80033fc:	2300      	movs	r3, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <UART_SetConfig>:
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	611a      	str	r2, [r3, #16]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003442:	f023 030c 	bic.w	r3, r3, #12
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	68f9      	ldr	r1, [r7, #12]
 800344c:	430b      	orrs	r3, r1
 800344e:	60d3      	str	r3, [r2, #12]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699a      	ldr	r2, [r3, #24]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	615a      	str	r2, [r3, #20]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a52      	ldr	r2, [pc, #328]	; (80035b4 <UART_SetConfig+0x1ac>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d14e      	bne.n	800350e <UART_SetConfig+0x106>
 8003470:	f7ff fd3a 	bl	8002ee8 <HAL_RCC_GetPCLK2Freq>
 8003474:	60b8      	str	r0, [r7, #8]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	009a      	lsls	r2, r3, #2
 8003480:	441a      	add	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	fbb2 f3f3 	udiv	r3, r2, r3
 800348c:	4a4a      	ldr	r2, [pc, #296]	; (80035b8 <UART_SetConfig+0x1b0>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	0119      	lsls	r1, r3, #4
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	009a      	lsls	r2, r3, #2
 80034a0:	441a      	add	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034ac:	4b42      	ldr	r3, [pc, #264]	; (80035b8 <UART_SetConfig+0x1b0>)
 80034ae:	fba3 0302 	umull	r0, r3, r3, r2
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	2064      	movs	r0, #100	; 0x64
 80034b6:	fb00 f303 	mul.w	r3, r0, r3
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	3332      	adds	r3, #50	; 0x32
 80034c0:	4a3d      	ldr	r2, [pc, #244]	; (80035b8 <UART_SetConfig+0x1b0>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034cc:	4419      	add	r1, r3
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	009a      	lsls	r2, r3, #2
 80034d8:	441a      	add	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034e4:	4b34      	ldr	r3, [pc, #208]	; (80035b8 <UART_SetConfig+0x1b0>)
 80034e6:	fba3 0302 	umull	r0, r3, r3, r2
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	2064      	movs	r0, #100	; 0x64
 80034ee:	fb00 f303 	mul.w	r3, r0, r3
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	3332      	adds	r3, #50	; 0x32
 80034f8:	4a2f      	ldr	r2, [pc, #188]	; (80035b8 <UART_SetConfig+0x1b0>)
 80034fa:	fba2 2303 	umull	r2, r3, r2, r3
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	f003 020f 	and.w	r2, r3, #15
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	440a      	add	r2, r1
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	e04d      	b.n	80035aa <UART_SetConfig+0x1a2>
 800350e:	f7ff fcd7 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 8003512:	60b8      	str	r0, [r7, #8]
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	009a      	lsls	r2, r3, #2
 800351e:	441a      	add	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	fbb2 f3f3 	udiv	r3, r2, r3
 800352a:	4a23      	ldr	r2, [pc, #140]	; (80035b8 <UART_SetConfig+0x1b0>)
 800352c:	fba2 2303 	umull	r2, r3, r2, r3
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	0119      	lsls	r1, r3, #4
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	009a      	lsls	r2, r3, #2
 800353e:	441a      	add	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	fbb2 f2f3 	udiv	r2, r2, r3
 800354a:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <UART_SetConfig+0x1b0>)
 800354c:	fba3 0302 	umull	r0, r3, r3, r2
 8003550:	095b      	lsrs	r3, r3, #5
 8003552:	2064      	movs	r0, #100	; 0x64
 8003554:	fb00 f303 	mul.w	r3, r0, r3
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	3332      	adds	r3, #50	; 0x32
 800355e:	4a16      	ldr	r2, [pc, #88]	; (80035b8 <UART_SetConfig+0x1b0>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	095b      	lsrs	r3, r3, #5
 8003566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800356a:	4419      	add	r1, r3
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	009a      	lsls	r2, r3, #2
 8003576:	441a      	add	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003582:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <UART_SetConfig+0x1b0>)
 8003584:	fba3 0302 	umull	r0, r3, r3, r2
 8003588:	095b      	lsrs	r3, r3, #5
 800358a:	2064      	movs	r0, #100	; 0x64
 800358c:	fb00 f303 	mul.w	r3, r0, r3
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	3332      	adds	r3, #50	; 0x32
 8003596:	4a08      	ldr	r2, [pc, #32]	; (80035b8 <UART_SetConfig+0x1b0>)
 8003598:	fba2 2303 	umull	r2, r3, r2, r3
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	f003 020f 	and.w	r2, r3, #15
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	440a      	add	r2, r1
 80035a8:	609a      	str	r2, [r3, #8]
 80035aa:	bf00      	nop
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40013800 	.word	0x40013800
 80035b8:	51eb851f 	.word	0x51eb851f

080035bc <Epos_NodeEnable>:
 * @brief : Enable Epos in can network
 * Window > Preferences > C/C++ > Editor > Templates.
 */

void Epos_NodeEnable(void)
{	
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
	uint8_t i;		//index
	for(i=0;i<NumControllers;i++){
 80035c2:	2300      	movs	r3, #0
 80035c4:	71fb      	strb	r3, [r7, #7]
 80035c6:	e00d      	b.n	80035e4 <Epos_NodeEnable+0x28>
		Node_StructInit(Controller[i], NOT_USED, NODE_ID[i]);	//初始化最大加速度，速度，跟踪误差，波特1M/s
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	4a38      	ldr	r2, [pc, #224]	; (80036ac <Epos_NodeEnable+0xf0>)
 80035cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	4a37      	ldr	r2, [pc, #220]	; (80036b0 <Epos_NodeEnable+0xf4>)
 80035d4:	5cd3      	ldrb	r3, [r2, r3]
 80035d6:	461a      	mov	r2, r3
 80035d8:	2100      	movs	r1, #0
 80035da:	f000 fa9f 	bl	8003b1c <Node_StructInit>
	for(i=0;i<NumControllers;i++){
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	3301      	adds	r3, #1
 80035e2:	71fb      	strb	r3, [r7, #7]
 80035e4:	4b33      	ldr	r3, [pc, #204]	; (80036b4 <Epos_NodeEnable+0xf8>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	79fa      	ldrb	r2, [r7, #7]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d3ec      	bcc.n	80035c8 <Epos_NodeEnable+0xc>
	}

	///通过canopen设定EPOS控制器参
	printf("-----------------------------------------------\r\n");
 80035ee:	4832      	ldr	r0, [pc, #200]	; (80036b8 <Epos_NodeEnable+0xfc>)
 80035f0:	f009 f97c 	bl	800c8ec <puts>
	printf("-----------------Epos_Init---------------------\r\n");
 80035f4:	4831      	ldr	r0, [pc, #196]	; (80036bc <Epos_NodeEnable+0x100>)
 80035f6:	f009 f979 	bl	800c8ec <puts>
	printf("-----------------------------------------------\r\n");
 80035fa:	482f      	ldr	r0, [pc, #188]	; (80036b8 <Epos_NodeEnable+0xfc>)
 80035fc:	f009 f976 	bl	800c8ec <puts>

	for(i=0;i<NumControllers;i++){
 8003600:	2300      	movs	r3, #0
 8003602:	71fb      	strb	r3, [r7, #7]
 8003604:	e009      	b.n	800361a <Epos_NodeEnable+0x5e>
		Node_ParamConfig(Controller[i]);
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	4a28      	ldr	r2, [pc, #160]	; (80036ac <Epos_NodeEnable+0xf0>)
 800360a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fa28 	bl	8003a64 <Node_ParamConfig>
	for(i=0;i<NumControllers;i++){
 8003614:	79fb      	ldrb	r3, [r7, #7]
 8003616:	3301      	adds	r3, #1
 8003618:	71fb      	strb	r3, [r7, #7]
 800361a:	4b26      	ldr	r3, [pc, #152]	; (80036b4 <Epos_NodeEnable+0xf8>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	79fa      	ldrb	r2, [r7, #7]
 8003620:	429a      	cmp	r2, r3
 8003622:	d3f0      	bcc.n	8003606 <Epos_NodeEnable+0x4a>
	}

	printf("-----------------------------------------------\r\n");
 8003624:	4824      	ldr	r0, [pc, #144]	; (80036b8 <Epos_NodeEnable+0xfc>)
 8003626:	f009 f961 	bl	800c8ec <puts>
	printf("-------------Initial_EPOS_Done!----------------\r\n");
 800362a:	4825      	ldr	r0, [pc, #148]	; (80036c0 <Epos_NodeEnable+0x104>)
 800362c:	f009 f95e 	bl	800c8ec <puts>
	printf("-----------------------------------------------\r\n");
 8003630:	4821      	ldr	r0, [pc, #132]	; (80036b8 <Epos_NodeEnable+0xfc>)
 8003632:	f009 f95b 	bl	800c8ec <puts>
	//OSTimeDlyHMSM(0, 0,0,500);


	//******** 控制模式设置 *******
	for(i=0;i<NumControllers;i++){
 8003636:	2300      	movs	r3, #0
 8003638:	71fb      	strb	r3, [r7, #7]
 800363a:	e00a      	b.n	8003652 <Epos_NodeEnable+0x96>
		Node_setMode(Controller[i], Position_Mode);
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	4a1b      	ldr	r2, [pc, #108]	; (80036ac <Epos_NodeEnable+0xf0>)
 8003640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003644:	21ff      	movs	r1, #255	; 0xff
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fa94 	bl	8003b74 <Node_setMode>
	for(i=0;i<NumControllers;i++){
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	3301      	adds	r3, #1
 8003650:	71fb      	strb	r3, [r7, #7]
 8003652:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <Epos_NodeEnable+0xf8>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	79fa      	ldrb	r2, [r7, #7]
 8003658:	429a      	cmp	r2, r3
 800365a:	d3ef      	bcc.n	800363c <Epos_NodeEnable+0x80>
	}
	printf("-----------------------------------------------\r\n");
 800365c:	4816      	ldr	r0, [pc, #88]	; (80036b8 <Epos_NodeEnable+0xfc>)
 800365e:	f009 f945 	bl	800c8ec <puts>
	printf("-----------------Mode_set----------------------\r\n");
 8003662:	4818      	ldr	r0, [pc, #96]	; (80036c4 <Epos_NodeEnable+0x108>)
 8003664:	f009 f942 	bl	800c8ec <puts>
	printf("-----------------------------------------------\r\n");
 8003668:	4813      	ldr	r0, [pc, #76]	; (80036b8 <Epos_NodeEnable+0xfc>)
 800366a:	f009 f93f 	bl	800c8ec <puts>
	//OSTimeDlyHMSM(0, 0,0,500);

	
	//******** 使能EPOS *******
	for(i=0;i<NumControllers;i++){
 800366e:	2300      	movs	r3, #0
 8003670:	71fb      	strb	r3, [r7, #7]
 8003672:	e009      	b.n	8003688 <Epos_NodeEnable+0xcc>
		Node_OperEn(Controller[i]);                                               //Switch On Disable to Operation Enable
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	4a0d      	ldr	r2, [pc, #52]	; (80036ac <Epos_NodeEnable+0xf0>)
 8003678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800367c:	4618      	mov	r0, r3
 800367e:	f000 fb7b 	bl	8003d78 <Node_OperEn>
	for(i=0;i<NumControllers;i++){
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	3301      	adds	r3, #1
 8003686:	71fb      	strb	r3, [r7, #7]
 8003688:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <Epos_NodeEnable+0xf8>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	79fa      	ldrb	r2, [r7, #7]
 800368e:	429a      	cmp	r2, r3
 8003690:	d3f0      	bcc.n	8003674 <Epos_NodeEnable+0xb8>
	}
	printf("-----------------------------------------------\r\n");
 8003692:	4809      	ldr	r0, [pc, #36]	; (80036b8 <Epos_NodeEnable+0xfc>)
 8003694:	f009 f92a 	bl	800c8ec <puts>
	printf("-----------------Enable_EPOS-------------------\r\n");
 8003698:	480b      	ldr	r0, [pc, #44]	; (80036c8 <Epos_NodeEnable+0x10c>)
 800369a:	f009 f927 	bl	800c8ec <puts>
	printf("-----------------------------------------------\r\n");
 800369e:	4806      	ldr	r0, [pc, #24]	; (80036b8 <Epos_NodeEnable+0xfc>)
 80036a0:	f009 f924 	bl	800c8ec <puts>
		
}
 80036a4:	bf00      	nop
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20004e38 	.word	0x20004e38
 80036b0:	20004e30 	.word	0x20004e30
 80036b4:	20004e50 	.word	0x20004e50
 80036b8:	0800d9dc 	.word	0x0800d9dc
 80036bc:	0800da10 	.word	0x0800da10
 80036c0:	0800da44 	.word	0x0800da44
 80036c4:	0800da78 	.word	0x0800da78
 80036c8:	0800daac 	.word	0x0800daac

080036cc <EPOS_Reset>:

void EPOS_Reset(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
	for(int i=0;i<NumControllers;i++){
 80036d2:	2300      	movs	r3, #0
 80036d4:	607b      	str	r3, [r7, #4]
 80036d6:	e00b      	b.n	80036f0 <EPOS_Reset+0x24>
		masterNMT(&TestMaster_Data, Controller[i], NMT_Reset_Node);	//to Pre-Operation
 80036d8:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <EPOS_Reset+0x38>)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e0:	2281      	movs	r2, #129	; 0x81
 80036e2:	4619      	mov	r1, r3
 80036e4:	4808      	ldr	r0, [pc, #32]	; (8003708 <EPOS_Reset+0x3c>)
 80036e6:	f000 fb70 	bl	8003dca <masterNMT>
	for(int i=0;i<NumControllers;i++){
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3301      	adds	r3, #1
 80036ee:	607b      	str	r3, [r7, #4]
 80036f0:	4b06      	ldr	r3, [pc, #24]	; (800370c <EPOS_Reset+0x40>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4293      	cmp	r3, r2
 80036fa:	dbed      	blt.n	80036d8 <EPOS_Reset+0xc>
	}
}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20004e38 	.word	0x20004e38
 8003708:	20005924 	.word	0x20005924
 800370c:	20004e50 	.word	0x20004e50

08003710 <EPOS_Start>:

void EPOS_Start(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
	printf("-----------------------------------------------\r\n");
 8003716:	4810      	ldr	r0, [pc, #64]	; (8003758 <EPOS_Start+0x48>)
 8003718:	f009 f8e8 	bl	800c8ec <puts>
	printf("---------NMT -enter into operation-------------\r\n");
 800371c:	480f      	ldr	r0, [pc, #60]	; (800375c <EPOS_Start+0x4c>)
 800371e:	f009 f8e5 	bl	800c8ec <puts>
	printf("-----------------------------------------------\r\n");
 8003722:	480d      	ldr	r0, [pc, #52]	; (8003758 <EPOS_Start+0x48>)
 8003724:	f009 f8e2 	bl	800c8ec <puts>
	for(int i=0;i<NumControllers;i++){
 8003728:	2300      	movs	r3, #0
 800372a:	607b      	str	r3, [r7, #4]
 800372c:	e009      	b.n	8003742 <EPOS_Start+0x32>
		masterNMT(&TestMaster_Data, Controller[0], NMT_Start_Node);	//to operation
 800372e:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <EPOS_Start+0x50>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2201      	movs	r2, #1
 8003734:	4619      	mov	r1, r3
 8003736:	480b      	ldr	r0, [pc, #44]	; (8003764 <EPOS_Start+0x54>)
 8003738:	f000 fb47 	bl	8003dca <masterNMT>
	for(int i=0;i<NumControllers;i++){
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3301      	adds	r3, #1
 8003740:	607b      	str	r3, [r7, #4]
 8003742:	4b09      	ldr	r3, [pc, #36]	; (8003768 <EPOS_Start+0x58>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4293      	cmp	r3, r2
 800374c:	dbef      	blt.n	800372e <EPOS_Start+0x1e>
	}
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	0800d9dc 	.word	0x0800d9dc
 800375c:	0800dae0 	.word	0x0800dae0
 8003760:	20004e38 	.word	0x20004e38
 8003764:	20005924 	.word	0x20005924
 8003768:	20004e50 	.word	0x20004e50

0800376c <Node_Initial_Postion>:

}


void Node_Initial_Postion(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
//	SDO_Read(Epos* epos,Uint32 Index_Type,Uint8 SubIndex);
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <Edit_Dict>:

#include "canopen_interface.h"


UNS32 Edit_Dict(CO_Data* d, Uint32 Index_Type,Uint8 SubIndex, void* pdata)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08c      	sub	sp, #48	; 0x30
 800377c:	af04      	add	r7, sp, #16
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	4613      	mov	r3, r2
 8003786:	71fb      	strb	r3, [r7, #7]
	UNS32 retcode;
	UNS16 Index = Index_Type>>16;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	0c1b      	lsrs	r3, r3, #16
 800378c:	83fb      	strh	r3, [r7, #30]
	UNS32 ByteSize = (Index_Type&(UNS32)0xFF)>>3;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	08db      	lsrs	r3, r3, #3
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	617b      	str	r3, [r7, #20]

	retcode = setODentry( d, Index, SubIndex, pdata, &ByteSize, 1 );
 8003798:	79fa      	ldrb	r2, [r7, #7]
 800379a:	8bf9      	ldrh	r1, [r7, #30]
 800379c:	2301      	movs	r3, #1
 800379e:	9302      	str	r3, [sp, #8]
 80037a0:	2301      	movs	r3, #1
 80037a2:	9301      	str	r3, [sp, #4]
 80037a4:	f107 0314 	add.w	r3, r7, #20
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f001 fac1 	bl	8004d34 <_setODentry>
 80037b2:	61b8      	str	r0, [r7, #24]

	return retcode;
 80037b4:	69bb      	ldr	r3, [r7, #24]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3720      	adds	r7, #32
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <_preOperational>:
 *
 * @brief : statement in state.c.  callback when Already into preOperational state.
 * Window > Preferences > C/C++ > Editor > Templates.
 */

void _preOperational(CO_Data* d){
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]

//	uint32_t data;
	MSG("complete preOperational\r\n");
 80037c8:	4803      	ldr	r0, [pc, #12]	; (80037d8 <_preOperational+0x18>)
 80037ca:	f009 f88f 	bl	800c8ec <puts>

}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	0800db38 	.word	0x0800db38

080037dc <_initialisation>:

void _initialisation(CO_Data* d)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	(void)d;
	MSG("complete initialization\r\n");
 80037e4:	4803      	ldr	r0, [pc, #12]	; (80037f4 <_initialisation+0x18>)
 80037e6:	f009 f881 	bl	800c8ec <puts>

}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	0800db54 	.word	0x0800db54

080037f8 <_operational>:
void _operational(CO_Data* d)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	(void)d;
	MSG("complete operational\r\n");
 8003800:	4803      	ldr	r0, [pc, #12]	; (8003810 <_operational+0x18>)
 8003802:	f009 f873 	bl	800c8ec <puts>
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	0800db70 	.word	0x0800db70

08003814 <_stopped>:
void _stopped(CO_Data* d)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	(void)d;
	MSG("complete stop\r\n");
 800381c:	4803      	ldr	r0, [pc, #12]	; (800382c <_stopped+0x18>)
 800381e:	f009 f865 	bl	800c8ec <puts>
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	0800db88 	.word	0x0800db88

08003830 <_post_TPDO>:
 */

#include "gait.h"
uint8_t pdoindex = 0;
uint8_t Index = 0;
void _post_TPDO(CO_Data* d){
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
	else
		MSG("-TPDO update error- 0x%lx\r\n",re);
	if(++Index == 323) Index = 0;*/

	UNS32 re;
	UNS32 angle = test_angle[Index];
 8003838:	4b16      	ldr	r3, [pc, #88]	; (8003894 <_post_TPDO+0x64>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	4b16      	ldr	r3, [pc, #88]	; (8003898 <_post_TPDO+0x68>)
 8003840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003844:	60bb      	str	r3, [r7, #8]
	re = Edit_Dict(d , Pos_SET_VALUE, 0, &angle);
 8003846:	f107 0308 	add.w	r3, r7, #8
 800384a:	2200      	movs	r2, #0
 800384c:	4913      	ldr	r1, [pc, #76]	; (800389c <_post_TPDO+0x6c>)
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff ff92 	bl	8003778 <Edit_Dict>
 8003854:	60f8      	str	r0, [r7, #12]

	if(re == OD_SUCCESSFUL)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d106      	bne.n	800386a <_post_TPDO+0x3a>
		MSG("-TPDO_update- index %d\r\n",Index);
 800385c:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <_post_TPDO+0x64>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	4619      	mov	r1, r3
 8003862:	480f      	ldr	r0, [pc, #60]	; (80038a0 <_post_TPDO+0x70>)
 8003864:	f008 ffce 	bl	800c804 <iprintf>
 8003868:	e003      	b.n	8003872 <_post_TPDO+0x42>
	else
		MSG("-TPDO update error- 0x%lx\r\n",re);
 800386a:	68f9      	ldr	r1, [r7, #12]
 800386c:	480d      	ldr	r0, [pc, #52]	; (80038a4 <_post_TPDO+0x74>)
 800386e:	f008 ffc9 	bl	800c804 <iprintf>
	if(++Index == 120) Index = 0;
 8003872:	4b08      	ldr	r3, [pc, #32]	; (8003894 <_post_TPDO+0x64>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	3301      	adds	r3, #1
 8003878:	b2da      	uxtb	r2, r3
 800387a:	4b06      	ldr	r3, [pc, #24]	; (8003894 <_post_TPDO+0x64>)
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	4b05      	ldr	r3, [pc, #20]	; (8003894 <_post_TPDO+0x64>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b78      	cmp	r3, #120	; 0x78
 8003884:	d102      	bne.n	800388c <_post_TPDO+0x5c>
 8003886:	4b03      	ldr	r3, [pc, #12]	; (8003894 <_post_TPDO+0x64>)
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20005bfa 	.word	0x20005bfa
 8003898:	20004e54 	.word	0x20004e54
 800389c:	20620020 	.word	0x20620020
 80038a0:	0800db98 	.word	0x0800db98
 80038a4:	0800dbb4 	.word	0x0800dbb4

080038a8 <_post_sync>:
 * @brief : in SYNC
 * Window > Preferences > C/C++ > Editor > Templates.
 */

void _post_sync(CO_Data* d)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	(void)d;
	MSG("-post_sync-\r\n");
 80038b0:	4803      	ldr	r0, [pc, #12]	; (80038c0 <_post_sync+0x18>)
 80038b2:	f009 f81b 	bl	800c8ec <puts>
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	0800dbd0 	.word	0x0800dbd0

080038c4 <_heartbeatError>:
 * @brief : life guard
 * Window > Preferences > C/C++ > Editor > Templates.
 */

void _heartbeatError(CO_Data* d, UNS8 heartbeatID)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	70fb      	strb	r3, [r7, #3]
	(void)d;
	(void)heartbeatID;
	MSG_WAR(0x44, "heart beat error", heartbeatID);
	EposMaster_Stop();
 80038d0:	f000 f8be 	bl	8003a50 <EposMaster_Stop>
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <_post_SlaveBootup>:
void _post_SlaveBootup(CO_Data* d, UNS8 SlaveID){(void)d;(void)SlaveID;}
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	70fb      	strb	r3, [r7, #3]
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr

080038f2 <_post_SlaveStateChange>:
void _post_SlaveStateChange(CO_Data* d, UNS8 nodeId, e_nodeState newNodeState){(void)d;(void)nodeId;(void)newNodeState;}
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	460b      	mov	r3, r1
 80038fc:	70fb      	strb	r3, [r7, #3]
 80038fe:	4613      	mov	r3, r2
 8003900:	70bb      	strb	r3, [r7, #2]
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr

0800390c <_nodeguardError>:
void _nodeguardError(CO_Data* d, UNS8 id){(void)d;(void)id;}
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	460b      	mov	r3, r1
 8003916:	70fb      	strb	r3, [r7, #3]
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	bc80      	pop	{r7}
 8003920:	4770      	bx	lr

08003922 <_post_emcy>:
 *
 * @brief : receive a emcy
 * Window > Preferences > C/C++ > Editor > Templates.
 */
void _post_emcy(CO_Data* d, UNS8 nodeID, UNS16 errCode, UNS8 errReg, const UNS8 errSpec[5])
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	4608      	mov	r0, r1
 800392c:	4611      	mov	r1, r2
 800392e:	461a      	mov	r2, r3
 8003930:	4603      	mov	r3, r0
 8003932:	70fb      	strb	r3, [r7, #3]
 8003934:	460b      	mov	r3, r1
 8003936:	803b      	strh	r3, [r7, #0]
 8003938:	4613      	mov	r3, r2
 800393a:	70bb      	strb	r3, [r7, #2]
	(void)d;
	(void)nodeID;
	(void)errCode;
	(void)errReg;
	(void)errSpec;
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr
	...

08003948 <SetMyDict>:
 * @brief : EPOS控制器的初始化
 * Window > Preferences > C/C++ > Editor > Templates.
 */
extern UNS32 TestMaster_obj1006;
void SetMyDict(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
	uint32_t data;
	TestMaster_obj1006 = 0xC350;	//sync cycle
 800394e:	4b11      	ldr	r3, [pc, #68]	; (8003994 <SetMyDict+0x4c>)
 8003950:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003954:	601a      	str	r2, [r3, #0]
	//data = 0x182;
	data = 0x250;
 8003956:	f44f 7314 	mov.w	r3, #592	; 0x250
 800395a:	607b      	str	r3, [r7, #4]
	Edit_Dict(&TestMaster_Data,0x14000120, 0x01, &data);
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	2201      	movs	r2, #1
 8003960:	490d      	ldr	r1, [pc, #52]	; (8003998 <SetMyDict+0x50>)
 8003962:	480e      	ldr	r0, [pc, #56]	; (800399c <SetMyDict+0x54>)
 8003964:	f7ff ff08 	bl	8003778 <Edit_Dict>
	data = 0x202;
 8003968:	f240 2302 	movw	r3, #514	; 0x202
 800396c:	607b      	str	r3, [r7, #4]
	Edit_Dict(&TestMaster_Data,0x18000120, 0x01, &data);
 800396e:	1d3b      	adds	r3, r7, #4
 8003970:	2201      	movs	r2, #1
 8003972:	490b      	ldr	r1, [pc, #44]	; (80039a0 <SetMyDict+0x58>)
 8003974:	4809      	ldr	r0, [pc, #36]	; (800399c <SetMyDict+0x54>)
 8003976:	f7ff feff 	bl	8003778 <Edit_Dict>
	data = 0x203;
 800397a:	f240 2303 	movw	r3, #515	; 0x203
 800397e:	607b      	str	r3, [r7, #4]
	Edit_Dict(&TestMaster_Data,0x18010120, 0x01, &data);
 8003980:	1d3b      	adds	r3, r7, #4
 8003982:	2201      	movs	r2, #1
 8003984:	4907      	ldr	r1, [pc, #28]	; (80039a4 <SetMyDict+0x5c>)
 8003986:	4805      	ldr	r0, [pc, #20]	; (800399c <SetMyDict+0x54>)
 8003988:	f7ff fef6 	bl	8003778 <Edit_Dict>
}
 800398c:	bf00      	nop
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	2000505c 	.word	0x2000505c
 8003998:	14000120 	.word	0x14000120
 800399c:	20005924 	.word	0x20005924
 80039a0:	18000120 	.word	0x18000120
 80039a4:	18010120 	.word	0x18010120

080039a8 <EposMaster_Init>:

void EposMaster_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
	unsigned char nodeID = 0x01;
 80039ae:	2301      	movs	r3, #1
 80039b0:	71fb      	strb	r3, [r7, #7]
	setNodeId(&TestMaster_Data, nodeID);
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	4619      	mov	r1, r3
 80039b6:	4803      	ldr	r0, [pc, #12]	; (80039c4 <EposMaster_Init+0x1c>)
 80039b8:	f006 ffe2 	bl	800a980 <setNodeId>
}
 80039bc:	bf00      	nop
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20005924 	.word	0x20005924

080039c8 <EposMaster_Start>:

#include "canopen_interface.h"
void EposMaster_Start(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
	uint32_t data;
	setState(&TestMaster_Data, Initialisation);
 80039ce:	2100      	movs	r1, #0
 80039d0:	4818      	ldr	r0, [pc, #96]	; (8003a34 <EposMaster_Start+0x6c>)
 80039d2:	f006 ff17 	bl	800a804 <setState>

	if (!(*(TestMaster_Data.iam_a_slave)))
 80039d6:	4b17      	ldr	r3, [pc, #92]	; (8003a34 <EposMaster_Start+0x6c>)
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d109      	bne.n	80039f4 <EposMaster_Start+0x2c>
		{
			SetMyDict();
 80039e0:	f7ff ffb2 	bl	8003948 <SetMyDict>
			EPOS_Reset();
 80039e4:	f7ff fe72 	bl	80036cc <EPOS_Reset>
			Epos_NodeEnable();
 80039e8:	f7ff fde8 	bl	80035bc <Epos_NodeEnable>
			Node_Initial_Postion();
 80039ec:	f7ff febe 	bl	800376c <Node_Initial_Postion>
			EPOS_Start();
 80039f0:	f7ff fe8e 	bl	8003710 <EPOS_Start>
		}
	data = SDO_Read(Controller[0], Statusword, 0X00);
 80039f4:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <EposMaster_Start+0x70>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2200      	movs	r2, #0
 80039fa:	4910      	ldr	r1, [pc, #64]	; (8003a3c <EposMaster_Start+0x74>)
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fa9b 	bl	8003f38 <SDO_Read>
 8003a02:	6078      	str	r0, [r7, #4]
	MSG("get - %lx\r\n",data);
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	480e      	ldr	r0, [pc, #56]	; (8003a40 <EposMaster_Start+0x78>)
 8003a08:	f008 fefc 	bl	800c804 <iprintf>
	/*if((data>>9)&0x01){*/
			MSG("already start MNT\r\n");
 8003a0c:	480d      	ldr	r0, [pc, #52]	; (8003a44 <EposMaster_Start+0x7c>)
 8003a0e:	f008 ff6d 	bl	800c8ec <puts>
			printf("-----------------------------------------------\r\n");
 8003a12:	480d      	ldr	r0, [pc, #52]	; (8003a48 <EposMaster_Start+0x80>)
 8003a14:	f008 ff6a 	bl	800c8ec <puts>
			printf("-----------------PDO_ENABLE -------------------\r\n");
 8003a18:	480c      	ldr	r0, [pc, #48]	; (8003a4c <EposMaster_Start+0x84>)
 8003a1a:	f008 ff67 	bl	800c8ec <puts>
			printf("-----------------------------------------------\r\n");
 8003a1e:	480a      	ldr	r0, [pc, #40]	; (8003a48 <EposMaster_Start+0x80>)
 8003a20:	f008 ff64 	bl	800c8ec <puts>
			//setState(&TestMaster_Data, Pre_operational); //心跳,同步周期协议配置
			setState(&TestMaster_Data, Operational);
 8003a24:	2105      	movs	r1, #5
 8003a26:	4803      	ldr	r0, [pc, #12]	; (8003a34 <EposMaster_Start+0x6c>)
 8003a28:	f006 feec 	bl	800a804 <setState>
	/*}*/
}
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20005924 	.word	0x20005924
 8003a38:	20004e38 	.word	0x20004e38
 8003a3c:	60410010 	.word	0x60410010
 8003a40:	0800dbe0 	.word	0x0800dbe0
 8003a44:	0800dbec 	.word	0x0800dbec
 8003a48:	0800dc00 	.word	0x0800dc00
 8003a4c:	0800dc34 	.word	0x0800dc34

08003a50 <EposMaster_Stop>:


void EposMaster_Stop(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
	setState(&TestMaster_Data, Stopped); //心跳,同步周期协议配置
 8003a54:	2104      	movs	r1, #4
 8003a56:	4802      	ldr	r0, [pc, #8]	; (8003a60 <EposMaster_Stop+0x10>)
 8003a58:	f006 fed4 	bl	800a804 <setState>
}
 8003a5c:	bf00      	nop
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	20005924 	.word	0x20005924

08003a64 <Node_ParamConfig>:
 *
 * @brief : 配置网络EPOS 节点，并且设置最大的跟踪误差，最大的速度、加速度、负加速度，以及快速停止的负加速度设定
 * Window > Preferences > C/C++ > Editor > Templates.
 */
void Node_ParamConfig(Epos* epos)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
    //SDO_Read(epos,OD_STATUS_WORD,0x00);                  //Fault Status=0x0108  红灯闪烁
	SDO_Write(epos, OD_CTRL_WORD, 0x00, 0x00);
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	2200      	movs	r2, #0
 8003a70:	4921      	ldr	r1, [pc, #132]	; (8003af8 <Node_ParamConfig+0x94>)
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f9c8 	bl	8003e08 <SDO_Write>
    SDO_Write(epos, OD_CTRL_WORD, 0x00, Fault_Reset);      //Fault_Reset command 控制字设置为0x80 第7位置1，参考固件手册 Fault reset figure3-3 事件15 驱动初始化完成
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	491e      	ldr	r1, [pc, #120]	; (8003af8 <Node_ParamConfig+0x94>)
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f9c2 	bl	8003e08 <SDO_Write>

    //SDO_Read(epos,OD_STATUS_WORD,0x00);                  //Switch On    Status=0x0540/0140   绿灯闪烁

    SDO_Write(epos, OD_Following_ERR_window, 0x00, MAX_F_ERR); //最大误差设置
 8003a84:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003a88:	2200      	movs	r2, #0
 8003a8a:	491c      	ldr	r1, [pc, #112]	; (8003afc <Node_ParamConfig+0x98>)
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f9bb 	bl	8003e08 <SDO_Write>

    SDO_Write(epos, OD_MAX_P_VELOCITY, 0x00, 1000);//MAX_P_V);  //最大速度
 8003a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a96:	2200      	movs	r2, #0
 8003a98:	4919      	ldr	r1, [pc, #100]	; (8003b00 <Node_ParamConfig+0x9c>)
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f9b4 	bl	8003e08 <SDO_Write>

    SDO_Write(epos, OD_Max_Acceleration, 0x00, epos->acc);	//max acc set
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	4917      	ldr	r1, [pc, #92]	; (8003b04 <Node_ParamConfig+0xa0>)
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f9ad 	bl	8003e08 <SDO_Write>

    SDO_Write(epos, OD_P_ACCELERATION, 0x00, epos->acc); 		//加速度  无效参数
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	4914      	ldr	r1, [pc, #80]	; (8003b08 <Node_ParamConfig+0xa4>)
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f9a6 	bl	8003e08 <SDO_Write>

    SDO_Write(epos, OD_P_DECELERATION, 0x00, epos->dec); 		//负加速度
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	4912      	ldr	r1, [pc, #72]	; (8003b0c <Node_ParamConfig+0xa8>)
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f99f 	bl	8003e08 <SDO_Write>

    SDO_Write(epos, OD_QS_DECELERATION, 0x00, QDEC);     		//快速停止负加速度
 8003aca:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <Node_ParamConfig+0xac>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	4911      	ldr	r1, [pc, #68]	; (8003b14 <Node_ParamConfig+0xb0>)
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f999 	bl	8003e08 <SDO_Write>

    SDO_Write(epos,OD_CAN_BITRATE,0x00,0x00);              	//set value = 0. set CAN bitrate 1M/s.
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f242 0101 	movw	r1, #8193	; 0x2001
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f992 	bl	8003e08 <SDO_Write>

	MSG("Epos_ParamInit: node %d\r\n", epos->node_ID);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	7d5b      	ldrb	r3, [r3, #21]
 8003ae8:	4619      	mov	r1, r3
 8003aea:	480b      	ldr	r0, [pc, #44]	; (8003b18 <Node_ParamConfig+0xb4>)
 8003aec:	f008 fe8a 	bl	800c804 <iprintf>
}
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	60400010 	.word	0x60400010
 8003afc:	60650020 	.word	0x60650020
 8003b00:	607f0020 	.word	0x607f0020
 8003b04:	60c50020 	.word	0x60c50020
 8003b08:	60830020 	.word	0x60830020
 8003b0c:	60840020 	.word	0x60840020
 8003b10:	000186a0 	.word	0x000186a0
 8003b14:	60850020 	.word	0x60850020
 8003b18:	0800dc68 	.word	0x0800dc68

08003b1c <Node_StructInit>:
 *
 * @brief : 设定EPOS 结构体，并且设置最大的跟踪误差，最大的速度、加速度、负加速度，以及快速停止的负加速度设定
 * Window > Preferences > C/C++ > Editor > Templates.
 */
void Node_StructInit(Epos* epos1, Uint8 CAN_ID, Uint8 NODE_ID)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	70fb      	strb	r3, [r7, #3]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	70bb      	strb	r3, [r7, #2]
    // EPOS结构体初始化
    epos1->b_init = 0;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	751a      	strb	r2, [r3, #20]
    epos1->CAN_Handles = NULL;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
    epos1->node_ID = NODE_ID;               //节点ID设置
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	78ba      	ldrb	r2, [r7, #2]
 8003b3c:	755a      	strb	r2, [r3, #21]
    
    epos1->b_init = 1;                      //EPOS 初始化标志
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	751a      	strb	r2, [r3, #20]
    epos1->cur_mode = MODE_NONE;            //控制模式
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	759a      	strb	r2, [r3, #22]
    epos1->opt = 0x001f;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	221f      	movs	r2, #31
 8003b4e:	619a      	str	r2, [r3, #24]
    epos1->acc = MAX_ACC;                   //最大加速度
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a07      	ldr	r2, [pc, #28]	; (8003b70 <Node_StructInit+0x54>)
 8003b54:	61da      	str	r2, [r3, #28]
    epos1->dec = MAX_DEC;                   //最大负加速度
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003b5c:	621a      	str	r2, [r3, #32]
    epos1->b_need_shutdown = 0;             //是否需要关闭控制器
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr
 8003b70:	000186a0 	.word	0x000186a0

08003b74 <Node_setMode>:
 * author lhx
 *
 * @brief : 设置 EPOS node 工作模式, 并配置对应的工作模式
 * Window > Preferences > C/C++ > Editor > Templates.
 */
void Node_setMode(Epos* epos, Uint16 mode){
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	807b      	strh	r3, [r7, #2]

    epos->cur_mode = mode;
 8003b80:	887b      	ldrh	r3, [r7, #2]
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	759a      	strb	r2, [r3, #22]
    
    SDO_Write(epos,OP_MODE,0x00,mode); 
 8003b88:	887b      	ldrh	r3, [r7, #2]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	496d      	ldr	r1, [pc, #436]	; (8003d44 <Node_setMode+0x1d0>)
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f93a 	bl	8003e08 <SDO_Write>
                
    switch(mode){
 8003b94:	887b      	ldrh	r3, [r7, #2]
 8003b96:	2b06      	cmp	r3, #6
 8003b98:	f000 809a 	beq.w	8003cd0 <Node_setMode+0x15c>
 8003b9c:	2b06      	cmp	r3, #6
 8003b9e:	dc04      	bgt.n	8003baa <Node_setMode+0x36>
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d040      	beq.n	8003c26 <Node_setMode+0xb2>
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d061      	beq.n	8003c6c <Node_setMode+0xf8>
 8003ba8:	e0c4      	b.n	8003d34 <Node_setMode+0x1c0>
 8003baa:	2bfd      	cmp	r3, #253	; 0xfd
 8003bac:	d014      	beq.n	8003bd8 <Node_setMode+0x64>
 8003bae:	2bfe      	cmp	r3, #254	; 0xfe
 8003bb0:	d003      	beq.n	8003bba <Node_setMode+0x46>
 8003bb2:	2b07      	cmp	r3, #7
 8003bb4:	f000 8093 	beq.w	8003cde <Node_setMode+0x16a>
 8003bb8:	e0bc      	b.n	8003d34 <Node_setMode+0x1c0>

	/** EPOS4 **/
        
	case(Velocity_Mode):		//CONFIGURATION PARAMETERS
			//SDO_Write(epos,OP_MODE,0x00,Velocity_Mode);
			SDO_Write(epos,OD_Max_Acceleration,0x00,1000);                                                // set Max Acceleration
 8003bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	4961      	ldr	r1, [pc, #388]	; (8003d48 <Node_setMode+0x1d4>)
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f920 	bl	8003e08 <SDO_Write>
			SDO_Write(epos, OD_MAX_P_VELOCITY, 0x00, MAX_P_V);                                            // Maximal Profile Velocity
 8003bc8:	f241 3388 	movw	r3, #5000	; 0x1388
 8003bcc:	2200      	movs	r2, #0
 8003bce:	495f      	ldr	r1, [pc, #380]	; (8003d4c <Node_setMode+0x1d8>)
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f919 	bl	8003e08 <SDO_Write>
			break;
 8003bd6:	e0b0      	b.n	8003d3a <Node_setMode+0x1c6>

	case(Current_Mode):
			SDO_Write(epos,OD_MOTOR_DATA,0x01,2000);         // set Continuous Current Limit 连续输出电流最大值 mA
 8003bd8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f243 0101 	movw	r1, #12289	; 0x3001
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f910 	bl	8003e08 <SDO_Write>
			SDO_Write(epos, OD_MOTOR_DATA, 0x02, 4000);     //输出最大电流，推荐为两倍连续最大电流
 8003be8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8003bec:	2202      	movs	r2, #2
 8003bee:	f243 0101 	movw	r1, #12289	; 0x3001
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f908 	bl	8003e08 <SDO_Write>
			SDO_Write(epos, OD_MOTOR_DATA, 0x03, 1);        //Changes only in “Disable” state.Number of magnetic pole pairs 参考电机手册
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	f243 0101 	movw	r1, #12289	; 0x3001
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f901 	bl	8003e08 <SDO_Write>
			SDO_Write(epos, OD_MOTOR_DATA, 0x04, 25000);     //限制电机最大速度 rpm
 8003c06:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	f243 0101 	movw	r1, #12289	; 0x3001
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f8f9 	bl	8003e08 <SDO_Write>
			SDO_Write(epos, OD_MOTOR_DATA, 0x05, 1);         // thermal time constant
 8003c16:	2301      	movs	r3, #1
 8003c18:	2205      	movs	r2, #5
 8003c1a:	f243 0101 	movw	r1, #12289	; 0x3001
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f8f2 	bl	8003e08 <SDO_Write>
			break;
 8003c24:	e089      	b.n	8003d3a <Node_setMode+0x1c6>

	case(Profile_Position_Mode):	//CONFIGURATION PARAMETERS
			SDO_Write(epos, OD_MAX_P_VELOCITY, 0x00, MAX_P_V);              // Maximal Profile Velocity
 8003c26:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	4947      	ldr	r1, [pc, #284]	; (8003d4c <Node_setMode+0x1d8>)
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f8ea 	bl	8003e08 <SDO_Write>
				SDO_Write(epos, OD_MAX_MOTOR_SPEED, 0x00, 5000);								//参考电机手册
 8003c34:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c38:	2200      	movs	r2, #0
 8003c3a:	4945      	ldr	r1, [pc, #276]	; (8003d50 <Node_setMode+0x1dc>)
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f8e3 	bl	8003e08 <SDO_Write>
				SDO_Write(epos, Max_gear_input_speed, 0x03,1000);
 8003c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c46:	2203      	movs	r2, #3
 8003c48:	4942      	ldr	r1, [pc, #264]	; (8003d54 <Node_setMode+0x1e0>)
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f8dc 	bl	8003e08 <SDO_Write>
			SDO_Write(epos, OD_QS_DECELERATION, 0x00, QDEC);                //快速停止负加速度
 8003c50:	4b41      	ldr	r3, [pc, #260]	; (8003d58 <Node_setMode+0x1e4>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	4941      	ldr	r1, [pc, #260]	; (8003d5c <Node_setMode+0x1e8>)
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8d6 	bl	8003e08 <SDO_Write>
			SDO_Write(epos,OD_Max_Acceleration,0x00,10000);
 8003c5c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003c60:	2200      	movs	r2, #0
 8003c62:	4939      	ldr	r1, [pc, #228]	; (8003d48 <Node_setMode+0x1d4>)
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f8cf 	bl	8003e08 <SDO_Write>
			break;
 8003c6a:	e066      	b.n	8003d3a <Node_setMode+0x1c6>

	case(Profile_Velocity_Mode):		//CONFIGURATION PARAMETERS
			SDO_Write(epos, Soft_P_Limit_Min, 0x01, 0x80000000);                //-2147483648
 8003c6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c70:	2201      	movs	r2, #1
 8003c72:	493b      	ldr	r1, [pc, #236]	; (8003d60 <Node_setMode+0x1ec>)
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f8c7 	bl	8003e08 <SDO_Write>
			SDO_Write(epos, Soft_P_Limit_Max, 0x02, 0x7FFFFFFF);                //2147483647
 8003c7a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003c7e:	2202      	movs	r2, #2
 8003c80:	4938      	ldr	r1, [pc, #224]	; (8003d64 <Node_setMode+0x1f0>)
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f8c0 	bl	8003e08 <SDO_Write>

			SDO_Write(epos, OD_MAX_P_VELOCITY, 0x00,3000);                 //最大速度 Maximal Profile Velocity
 8003c88:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	492f      	ldr	r1, [pc, #188]	; (8003d4c <Node_setMode+0x1d8>)
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f8b9 	bl	8003e08 <SDO_Write>
			  	  SDO_Write(epos, OD_QS_DECELERATION, 0x00, 50000);              //快速停止负加速度
 8003c96:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	492f      	ldr	r1, [pc, #188]	; (8003d5c <Node_setMode+0x1e8>)
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f8b2 	bl	8003e08 <SDO_Write>
			SDO_Write(epos, OD_MAX_MOTOR_SPEED, 0x00, 5000);              // Maximal Profile Velocity
 8003ca4:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ca8:	2200      	movs	r2, #0
 8003caa:	4929      	ldr	r1, [pc, #164]	; (8003d50 <Node_setMode+0x1dc>)
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f8ab 	bl	8003e08 <SDO_Write>
				SDO_Write(epos, Max_gear_input_speed, 0x03,1000);
 8003cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cb6:	2203      	movs	r2, #3
 8003cb8:	4926      	ldr	r1, [pc, #152]	; (8003d54 <Node_setMode+0x1e0>)
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f8a4 	bl	8003e08 <SDO_Write>
			SDO_Write(epos,OD_Max_Acceleration,0x00,10000);
 8003cc0:	f242 7310 	movw	r3, #10000	; 0x2710
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	4920      	ldr	r1, [pc, #128]	; (8003d48 <Node_setMode+0x1d4>)
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f89d 	bl	8003e08 <SDO_Write>

			break;
 8003cce:	e034      	b.n	8003d3a <Node_setMode+0x1c6>

	case(Homing_Mode):      //可以将该功能配置给某个数字口
			SDO_Write(epos, OD_Motion_Profile_Type, 0x00,1);                 //sin2  ramp
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	4924      	ldr	r1, [pc, #144]	; (8003d68 <Node_setMode+0x1f4>)
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f896 	bl	8003e08 <SDO_Write>
			break;
 8003cdc:	e02d      	b.n	8003d3a <Node_setMode+0x1c6>

	case(Interpolated_Position_Mode):
			SDO_Write(epos, OD_Interpolation_Sub_Mode, 0x00,(Uint32)(-1));//always -1 cubic spline interpolation (PVT)
 8003cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f246 01c0 	movw	r1, #24768	; 0x60c0
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f88d 	bl	8003e08 <SDO_Write>
			SDO_Write(epos, Interpolation_Time_Period_1, 0x01,1);//always 1
 8003cee:	2301      	movs	r3, #1
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	491e      	ldr	r1, [pc, #120]	; (8003d6c <Node_setMode+0x1f8>)
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f887 	bl	8003e08 <SDO_Write>
			SDO_Write(epos, Interpolation_Time_Period_2, 0x02,(Uint32)(-3));//always -3  插值周期 10^-3s
 8003cfa:	f06f 0302 	mvn.w	r3, #2
 8003cfe:	2202      	movs	r2, #2
 8003d00:	491b      	ldr	r1, [pc, #108]	; (8003d70 <Node_setMode+0x1fc>)
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f880 	bl	8003e08 <SDO_Write>
			SDO_Write(epos, Soft_P_Limit_Min, 0x01, 0x80000000);                //-2147483648
 8003d08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	4914      	ldr	r1, [pc, #80]	; (8003d60 <Node_setMode+0x1ec>)
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f879 	bl	8003e08 <SDO_Write>
			SDO_Write(epos, Soft_P_Limit_Max, 0x02, 0x7FFFFFFF);                //2147483647
 8003d16:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	4911      	ldr	r1, [pc, #68]	; (8003d64 <Node_setMode+0x1f0>)
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f872 	bl	8003e08 <SDO_Write>
			//SDO_Write(epos,OD_Position_Window, 0x00,4294967295);             //关闭 position window
			SDO_Write(epos, Pos_Window_Time, 0x00, 0);
 8003d24:	2300      	movs	r3, #0
 8003d26:	2200      	movs	r2, #0
 8003d28:	f246 0168 	movw	r1, #24680	; 0x6068
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f86b 	bl	8003e08 <SDO_Write>
			break;
 8003d32:	e002      	b.n	8003d3a <Node_setMode+0x1c6>

	default:
			printf("error mode\r\n");
 8003d34:	480f      	ldr	r0, [pc, #60]	; (8003d74 <Node_setMode+0x200>)
 8003d36:	f008 fdd9 	bl	800c8ec <puts>
        
    }
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	60600008 	.word	0x60600008
 8003d48:	60c50020 	.word	0x60c50020
 8003d4c:	607f0020 	.word	0x607f0020
 8003d50:	60800020 	.word	0x60800020
 8003d54:	30030020 	.word	0x30030020
 8003d58:	000186a0 	.word	0x000186a0
 8003d5c:	60850020 	.word	0x60850020
 8003d60:	607d0120 	.word	0x607d0120
 8003d64:	607d0220 	.word	0x607d0220
 8003d68:	60860010 	.word	0x60860010
 8003d6c:	60c20108 	.word	0x60c20108
 8003d70:	60c20208 	.word	0x60c20208
 8003d74:	0800dc9c 	.word	0x0800dc9c

08003d78 <Node_OperEn>:

    
void Node_OperEn(Epos* epos){
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
	
    SDO_Write(epos,OD_CTRL_WORD,0x00,0x06);                    // Shut down  驱动函数失能
 8003d80:	2306      	movs	r3, #6
 8003d82:	2200      	movs	r2, #0
 8003d84:	490a      	ldr	r1, [pc, #40]	; (8003db0 <Node_OperEn+0x38>)
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f83e 	bl	8003e08 <SDO_Write>
    Epos_Delay(500);
 8003d8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d90:	f000 f810 	bl	8003db4 <Epos_Delay>

    //SDO_Read(epos,OD_STATUS_WORD,0x00);                      // Ready to Switch On    Status=0x0121   绿灯闪烁
    
    SDO_Write(epos,OD_CTRL_WORD,0x00,0x0F);                    // Switch on AND Enable Operation 驱动参数设定
 8003d94:	230f      	movs	r3, #15
 8003d96:	2200      	movs	r2, #0
 8003d98:	4905      	ldr	r1, [pc, #20]	; (8003db0 <Node_OperEn+0x38>)
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f834 	bl	8003e08 <SDO_Write>
    Epos_Delay(500);
 8003da0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003da4:	f000 f806 	bl	8003db4 <Epos_Delay>
    
    //SDO_Read(epos,OD_STATUS_WORD,0x00);                      // Operation Enable      Status=0x0137   绿灯常亮
}
 8003da8:	bf00      	nop
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	60400010 	.word	0x60400010

08003db4 <Epos_Delay>:


void Epos_Delay(Uint32 time){
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
	OSTimeDly(time);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f008 fc1d 	bl	800c5fc <OSTimeDly>
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <masterNMT>:
#include "nmt_control.h"



UNS8 masterNMT(CO_Data*d, Epos* epos,UNS8 cs)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	71fb      	strb	r3, [r7, #7]
	return masterSendNMTstateChange (d, epos->node_ID, cs);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	7d5b      	ldrb	r3, [r3, #21]
 8003ddc:	79fa      	ldrb	r2, [r7, #7]
 8003dde:	4619      	mov	r1, r3
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 fe09 	bl	80049f8 <masterSendNMTstateChange>
 8003de6:	4603      	mov	r3, r0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <_sdocallback>:
int NEST = 0;           //Ƕ�ײ���

/**
 * 在SDOTimeoutAlarm 中回调
 */
void _sdocallback(CO_Data* d, UNS8 nodeId){
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	70fb      	strb	r3, [r7, #3]
	//MSG_WAR(0x0000, "sdocallback in nodeid: ", nodeId);
	//resetSDO(d);
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr
	...

08003e08 <SDO_Write>:


uint8_t SDO_Write(Epos* epos,Uint32 Index_Type,Uint8 SubIndex,Uint32 param)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b090      	sub	sp, #64	; 0x40
 8003e0c:	af06      	add	r7, sp, #24
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	4613      	mov	r3, r2
 8003e16:	71fb      	strb	r3, [r7, #7]
	int i = 3;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
	UNS32 abortCode;
	UNS8 err;
	UNS8 SDO_state;
	UNS16 Index = Index_Type>>16;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	0c1b      	lsrs	r3, r3, #16
 8003e20:	843b      	strh	r3, [r7, #32]
	UNS32 Size = (Index_Type&(UNS32)0xFF)>>3;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	08db      	lsrs	r3, r3, #3
 8003e26:	f003 031f 	and.w	r3, r3, #31
 8003e2a:	61fb      	str	r3, [r7, #28]
	UNS8 Type;
	if(Size == 4){Type = uint32;}
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d102      	bne.n	8003e38 <SDO_Write+0x30>
 8003e32:	2307      	movs	r3, #7
 8003e34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	if(Size == 2){Type = uint16;}
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d102      	bne.n	8003e44 <SDO_Write+0x3c>
 8003e3e:	2306      	movs	r3, #6
 8003e40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	if(Size == 1){Type = uint8;}
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d102      	bne.n	8003e50 <SDO_Write+0x48>
 8003e4a:	2305      	movs	r3, #5
 8003e4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	//_writeNetworkDict(&TestMaster_Data,epos->node_ID ,Index, SubIndex, Size, Type, &param, _sdocallback, 1, 0);	//��can�����еĽڵ㷢��
	do{
		waiting_sdo = 1;
 8003e50:	4b30      	ldr	r3, [pc, #192]	; (8003f14 <SDO_Write+0x10c>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	701a      	strb	r2, [r3, #0]
		if(last_success == 0)
 8003e56:	4b30      	ldr	r3, [pc, #192]	; (8003f18 <SDO_Write+0x110>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d102      	bne.n	8003e64 <SDO_Write+0x5c>
			resetSDO(&TestMaster_Data);
 8003e5e:	482f      	ldr	r0, [pc, #188]	; (8003f1c <SDO_Write+0x114>)
 8003e60:	f002 f8d8 	bl	8006014 <resetSDO>
		_writeNetworkDict(&TestMaster_Data,epos->node_ID ,Index, SubIndex, Size, Type, &param, _sdocallback, 1, 0);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	7d59      	ldrb	r1, [r3, #21]
 8003e68:	79f8      	ldrb	r0, [r7, #7]
 8003e6a:	8c3a      	ldrh	r2, [r7, #32]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	9305      	str	r3, [sp, #20]
 8003e70:	2301      	movs	r3, #1
 8003e72:	9304      	str	r3, [sp, #16]
 8003e74:	4b2a      	ldr	r3, [pc, #168]	; (8003f20 <SDO_Write+0x118>)
 8003e76:	9303      	str	r3, [sp, #12]
 8003e78:	463b      	mov	r3, r7
 8003e7a:	9302      	str	r3, [sp, #8]
 8003e7c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003e80:	9301      	str	r3, [sp, #4]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	4603      	mov	r3, r0
 8003e88:	4824      	ldr	r0, [pc, #144]	; (8003f1c <SDO_Write+0x114>)
 8003e8a:	f005 ffc7 	bl	8009e1c <_writeNetworkDict>
		OSSemPend(CRCV_WAIT_Semp, 200, &err); // 500ms. ����Ҫ���ӳ�ʱ��,����Ļ�����ϵͳ��������������,Ҳ���޷�����CAN֡
 8003e8e:	4b25      	ldr	r3, [pc, #148]	; (8003f24 <SDO_Write+0x11c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f107 0217 	add.w	r2, r7, #23
 8003e96:	21c8      	movs	r1, #200	; 0xc8
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f008 f8b3 	bl	800c004 <OSSemPend>
	}while( i-- && (SDO_state = getWriteResultNetworkDict(&TestMaster_Data, epos->node_ID , &abortCode)) == SDO_DOWNLOAD_IN_PROGRESS );
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	1e5a      	subs	r2, r3, #1
 8003ea2:	627a      	str	r2, [r7, #36]	; 0x24
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00e      	beq.n	8003ec6 <SDO_Write+0xbe>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	7d5b      	ldrb	r3, [r3, #21]
 8003eac:	f107 0218 	add.w	r2, r7, #24
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	481a      	ldr	r0, [pc, #104]	; (8003f1c <SDO_Write+0x114>)
 8003eb4:	f006 faf4 	bl	800a4a0 <getWriteResultNetworkDict>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ebe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d0c4      	beq.n	8003e50 <SDO_Write+0x48>

	waiting_sdo = 0;
 8003ec6:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <SDO_Write+0x10c>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	701a      	strb	r2, [r3, #0]

	if (SDO_state == SDO_FINISHED){
 8003ecc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d10b      	bne.n	8003eec <SDO_Write+0xe4>
		last_success = 1;
 8003ed4:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <SDO_Write+0x110>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	701a      	strb	r2, [r3, #0]
		MMSG("write SDO OK!\r\n");
 8003eda:	4813      	ldr	r0, [pc, #76]	; (8003f28 <SDO_Write+0x120>)
 8003edc:	f008 fd06 	bl	800c8ec <puts>
 8003ee0:	2231      	movs	r2, #49	; 0x31
 8003ee2:	4912      	ldr	r1, [pc, #72]	; (8003f2c <SDO_Write+0x124>)
 8003ee4:	4812      	ldr	r0, [pc, #72]	; (8003f30 <SDO_Write+0x128>)
 8003ee6:	f008 fc8d 	bl	800c804 <iprintf>
 8003eea:	e00d      	b.n	8003f08 <SDO_Write+0x100>
	}
	else{
		last_success = 0;
 8003eec:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <SDO_Write+0x110>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	701a      	strb	r2, [r3, #0]
		MMSG("write SDO error! state = %u \r\n",SDO_state);
 8003ef2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	480e      	ldr	r0, [pc, #56]	; (8003f34 <SDO_Write+0x12c>)
 8003efa:	f008 fc83 	bl	800c804 <iprintf>
 8003efe:	2235      	movs	r2, #53	; 0x35
 8003f00:	490a      	ldr	r1, [pc, #40]	; (8003f2c <SDO_Write+0x124>)
 8003f02:	480b      	ldr	r0, [pc, #44]	; (8003f30 <SDO_Write+0x128>)
 8003f04:	f008 fc7e 	bl	800c804 <iprintf>
		//resetSDO(&TestMaster_Data);
		//SDO_Write(epos, Index_Type,SubIndex,param);
	}
	return 0;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3728      	adds	r7, #40	; 0x28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20005bfb 	.word	0x20005bfb
 8003f18:	20005034 	.word	0x20005034
 8003f1c:	20005924 	.word	0x20005924
 8003f20:	08003df1 	.word	0x08003df1
 8003f24:	20006e64 	.word	0x20006e64
 8003f28:	0800dca8 	.word	0x0800dca8
 8003f2c:	0800dcb8 	.word	0x0800dcb8
 8003f30:	0800dcd0 	.word	0x0800dcd0
 8003f34:	0800dcdc 	.word	0x0800dcdc

08003f38 <SDO_Read>:


/**** ����CAN SDO�����ģ������ܷ���ֵ ***/
Uint32 SDO_Read(Epos* epos,Uint32 Index_Type,Uint8 SubIndex)
{	
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08c      	sub	sp, #48	; 0x30
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	4613      	mov	r3, r2
 8003f44:	71fb      	strb	r3, [r7, #7]
	UNS8 i=3,err;
 8003f46:	2303      	movs	r3, #3
 8003f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	UNS32 data=0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61fb      	str	r3, [r7, #28]
	UNS32 abortCode;
	UNS16 Index = Index_Type>>16;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	0c1b      	lsrs	r3, r3, #16
 8003f54:	84bb      	strh	r3, [r7, #36]	; 0x24
	UNS32 Size = (Index_Type&(UNS32)0xFF)>>3;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	08db      	lsrs	r3, r3, #3
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	617b      	str	r3, [r7, #20]
	UNS8 Type;
	if(Size == 4){Type = uint32;}
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d102      	bne.n	8003f6c <SDO_Read+0x34>
 8003f66:	2307      	movs	r3, #7
 8003f68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(Size == 2){Type = uint16;}
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d102      	bne.n	8003f78 <SDO_Read+0x40>
 8003f72:	2306      	movs	r3, #6
 8003f74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(Size == 1){Type = uint8;}
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d102      	bne.n	8003f84 <SDO_Read+0x4c>
 8003f7e:	2305      	movs	r3, #5
 8003f80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	
	do{
		waiting_sdo = 1;
 8003f84:	4b1c      	ldr	r3, [pc, #112]	; (8003ff8 <SDO_Read+0xc0>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
		resetSDO(&TestMaster_Data);
 8003f8a:	481c      	ldr	r0, [pc, #112]	; (8003ffc <SDO_Read+0xc4>)
 8003f8c:	f002 f842 	bl	8006014 <resetSDO>
		readNetworkDict(&TestMaster_Data,epos->node_ID ,Index, SubIndex, Type, 0);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	7d59      	ldrb	r1, [r3, #21]
 8003f94:	79f8      	ldrb	r0, [r7, #7]
 8003f96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f98:	2300      	movs	r3, #0
 8003f9a:	9301      	str	r3, [sp, #4]
 8003f9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4815      	ldr	r0, [pc, #84]	; (8003ffc <SDO_Read+0xc4>)
 8003fa6:	f006 f987 	bl	800a2b8 <readNetworkDict>
		OSSemPend(CRCV_WAIT_Semp, 200, &err); // 500ms. ����Ҫ���ӳ�ʱ��,����Ļ�����ϵͳ��������������,Ҳ���޷�����CAN֡
 8003faa:	4b15      	ldr	r3, [pc, #84]	; (8004000 <SDO_Read+0xc8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8003fb2:	21c8      	movs	r1, #200	; 0xc8
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f008 f825 	bl	800c004 <OSSemPend>
	}while( i-- && (getReadResultNetworkDict(&TestMaster_Data, epos->node_ID, &data, &Size, &abortCode) == SDO_UPLOAD_IN_PROGRESS));
 8003fba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fbe:	1e5a      	subs	r2, r3, #1
 8003fc0:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00f      	beq.n	8003fe8 <SDO_Read+0xb0>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	7d59      	ldrb	r1, [r3, #21]
 8003fcc:	f107 0014 	add.w	r0, r7, #20
 8003fd0:	f107 021c 	add.w	r2, r7, #28
 8003fd4:	f107 0318 	add.w	r3, r7, #24
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4807      	ldr	r0, [pc, #28]	; (8003ffc <SDO_Read+0xc4>)
 8003fde:	f006 f98b 	bl	800a2f8 <getReadResultNetworkDict>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d0cd      	beq.n	8003f84 <SDO_Read+0x4c>

	waiting_sdo = 0;
 8003fe8:	4b03      	ldr	r3, [pc, #12]	; (8003ff8 <SDO_Read+0xc0>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	701a      	strb	r2, [r3, #0]
	return data;
 8003fee:	69fb      	ldr	r3, [r7, #28]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3728      	adds	r7, #40	; 0x28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20005bfb 	.word	0x20005bfb
 8003ffc:	20005924 	.word	0x20005924
 8004000:	20006e64 	.word	0x20006e64

08004004 <TestMaster_valueRangeTest>:
/* Declaration of value range types                                       */
/**************************************************************************/

#define valueRange_EMC 0x9F /* Type for index 0x1003 subindex 0x00 (only set of value 0 is possible) */
UNS32 TestMaster_valueRangeTest (UNS8 typeValue, void * value)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	6039      	str	r1, [r7, #0]
 800400e:	71fb      	strb	r3, [r7, #7]
  switch (typeValue) {
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	2b9f      	cmp	r3, #159	; 0x9f
 8004014:	d106      	bne.n	8004024 <TestMaster_valueRangeTest+0x20>
    case valueRange_EMC:
      if (*(UNS8*)value != (UNS8)0) return OD_VALUE_RANGE_EXCEEDED;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <TestMaster_valueRangeTest+0x1e>
 800401e:	4b04      	ldr	r3, [pc, #16]	; (8004030 <TestMaster_valueRangeTest+0x2c>)
 8004020:	e001      	b.n	8004026 <TestMaster_valueRangeTest+0x22>
      break;
 8004022:	bf00      	nop
  }
  return 0;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr
 8004030:	06090030 	.word	0x06090030

08004034 <TestMaster_scanIndexOD>:
	{ (subindex*)TestMaster_Index6064,sizeof(TestMaster_Index6064)/sizeof(TestMaster_Index6064[0]), 0x6064},
};


const indextable * TestMaster_scanIndexOD (CO_Data *d, UNS16 wIndex, UNS32 * errorCode)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	460b      	mov	r3, r1
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	817b      	strh	r3, [r7, #10]
	(void)d;
	int i;
	switch(wIndex){
 8004042:	897b      	ldrh	r3, [r7, #10]
 8004044:	f641 0203 	movw	r2, #6147	; 0x1803
 8004048:	4293      	cmp	r3, r2
 800404a:	f000 8112 	beq.w	8004272 <TestMaster_scanIndexOD+0x23e>
 800404e:	f641 0203 	movw	r2, #6147	; 0x1803
 8004052:	4293      	cmp	r3, r2
 8004054:	dc6b      	bgt.n	800412e <TestMaster_scanIndexOD+0xfa>
 8004056:	f241 4201 	movw	r2, #5121	; 0x1401
 800405a:	4293      	cmp	r3, r2
 800405c:	f000 80eb 	beq.w	8004236 <TestMaster_scanIndexOD+0x202>
 8004060:	f241 4201 	movw	r2, #5121	; 0x1401
 8004064:	4293      	cmp	r3, r2
 8004066:	dc2d      	bgt.n	80040c4 <TestMaster_scanIndexOD+0x90>
 8004068:	f241 0218 	movw	r2, #4120	; 0x1018
 800406c:	4293      	cmp	r3, r2
 800406e:	f000 80d3 	beq.w	8004218 <TestMaster_scanIndexOD+0x1e4>
 8004072:	f241 0218 	movw	r2, #4120	; 0x1018
 8004076:	4293      	cmp	r3, r2
 8004078:	dc0e      	bgt.n	8004098 <TestMaster_scanIndexOD+0x64>
 800407a:	f241 0201 	movw	r2, #4097	; 0x1001
 800407e:	4293      	cmp	r3, r2
 8004080:	f000 80c4 	beq.w	800420c <TestMaster_scanIndexOD+0x1d8>
 8004084:	f241 0217 	movw	r2, #4119	; 0x1017
 8004088:	4293      	cmp	r3, r2
 800408a:	f000 80c2 	beq.w	8004212 <TestMaster_scanIndexOD+0x1de>
 800408e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004092:	f000 80b8 	beq.w	8004206 <TestMaster_scanIndexOD+0x1d2>
 8004096:	e125      	b.n	80042e4 <TestMaster_scanIndexOD+0x2b0>
 8004098:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 800409c:	f000 80c2 	beq.w	8004224 <TestMaster_scanIndexOD+0x1f0>
 80040a0:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 80040a4:	dc04      	bgt.n	80040b0 <TestMaster_scanIndexOD+0x7c>
 80040a6:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 80040aa:	f000 80b8 	beq.w	800421e <TestMaster_scanIndexOD+0x1ea>
 80040ae:	e119      	b.n	80042e4 <TestMaster_scanIndexOD+0x2b0>
 80040b0:	f241 2281 	movw	r2, #4737	; 0x1281
 80040b4:	4293      	cmp	r3, r2
 80040b6:	f000 80b8 	beq.w	800422a <TestMaster_scanIndexOD+0x1f6>
 80040ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040be:	f000 80b7 	beq.w	8004230 <TestMaster_scanIndexOD+0x1fc>
 80040c2:	e10f      	b.n	80042e4 <TestMaster_scanIndexOD+0x2b0>
 80040c4:	f241 6202 	movw	r2, #5634	; 0x1602
 80040c8:	4293      	cmp	r3, r2
 80040ca:	f000 80c3 	beq.w	8004254 <TestMaster_scanIndexOD+0x220>
 80040ce:	f241 6202 	movw	r2, #5634	; 0x1602
 80040d2:	4293      	cmp	r3, r2
 80040d4:	dc13      	bgt.n	80040fe <TestMaster_scanIndexOD+0xca>
 80040d6:	f241 4203 	movw	r2, #5123	; 0x1403
 80040da:	4293      	cmp	r3, r2
 80040dc:	f000 80b1 	beq.w	8004242 <TestMaster_scanIndexOD+0x20e>
 80040e0:	f241 4203 	movw	r2, #5123	; 0x1403
 80040e4:	4293      	cmp	r3, r2
 80040e6:	f2c0 80a9 	blt.w	800423c <TestMaster_scanIndexOD+0x208>
 80040ea:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 80040ee:	f000 80ab 	beq.w	8004248 <TestMaster_scanIndexOD+0x214>
 80040f2:	f241 6201 	movw	r2, #5633	; 0x1601
 80040f6:	4293      	cmp	r3, r2
 80040f8:	f000 80a9 	beq.w	800424e <TestMaster_scanIndexOD+0x21a>
 80040fc:	e0f2      	b.n	80042e4 <TestMaster_scanIndexOD+0x2b0>
 80040fe:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004102:	f000 80ad 	beq.w	8004260 <TestMaster_scanIndexOD+0x22c>
 8004106:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800410a:	dc05      	bgt.n	8004118 <TestMaster_scanIndexOD+0xe4>
 800410c:	f241 6203 	movw	r2, #5635	; 0x1603
 8004110:	4293      	cmp	r3, r2
 8004112:	f000 80a2 	beq.w	800425a <TestMaster_scanIndexOD+0x226>
 8004116:	e0e5      	b.n	80042e4 <TestMaster_scanIndexOD+0x2b0>
 8004118:	f641 0201 	movw	r2, #6145	; 0x1801
 800411c:	4293      	cmp	r3, r2
 800411e:	f000 80a2 	beq.w	8004266 <TestMaster_scanIndexOD+0x232>
 8004122:	f641 0202 	movw	r2, #6146	; 0x1802
 8004126:	4293      	cmp	r3, r2
 8004128:	f000 80a0 	beq.w	800426c <TestMaster_scanIndexOD+0x238>
 800412c:	e0da      	b.n	80042e4 <TestMaster_scanIndexOD+0x2b0>
 800412e:	f242 0262 	movw	r2, #8290	; 0x2062
 8004132:	4293      	cmp	r3, r2
 8004134:	f000 80cd 	beq.w	80042d2 <TestMaster_scanIndexOD+0x29e>
 8004138:	f242 0262 	movw	r2, #8290	; 0x2062
 800413c:	4293      	cmp	r3, r2
 800413e:	dc2c      	bgt.n	800419a <TestMaster_scanIndexOD+0x166>
 8004140:	f641 2201 	movw	r2, #6657	; 0x1a01
 8004144:	4293      	cmp	r3, r2
 8004146:	f000 80a0 	beq.w	800428a <TestMaster_scanIndexOD+0x256>
 800414a:	f641 2201 	movw	r2, #6657	; 0x1a01
 800414e:	4293      	cmp	r3, r2
 8004150:	dc0e      	bgt.n	8004170 <TestMaster_scanIndexOD+0x13c>
 8004152:	f641 0205 	movw	r2, #6149	; 0x1805
 8004156:	4293      	cmp	r3, r2
 8004158:	f000 8091 	beq.w	800427e <TestMaster_scanIndexOD+0x24a>
 800415c:	f641 0205 	movw	r2, #6149	; 0x1805
 8004160:	4293      	cmp	r3, r2
 8004162:	f2c0 8089 	blt.w	8004278 <TestMaster_scanIndexOD+0x244>
 8004166:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 800416a:	f000 808b 	beq.w	8004284 <TestMaster_scanIndexOD+0x250>
 800416e:	e0b9      	b.n	80042e4 <TestMaster_scanIndexOD+0x2b0>
 8004170:	f641 2203 	movw	r2, #6659	; 0x1a03
 8004174:	4293      	cmp	r3, r2
 8004176:	f000 808e 	beq.w	8004296 <TestMaster_scanIndexOD+0x262>
 800417a:	f641 2203 	movw	r2, #6659	; 0x1a03
 800417e:	4293      	cmp	r3, r2
 8004180:	f2c0 8086 	blt.w	8004290 <TestMaster_scanIndexOD+0x25c>
 8004184:	f641 2204 	movw	r2, #6660	; 0x1a04
 8004188:	4293      	cmp	r3, r2
 800418a:	f000 8087 	beq.w	800429c <TestMaster_scanIndexOD+0x268>
 800418e:	f641 2205 	movw	r2, #6661	; 0x1a05
 8004192:	4293      	cmp	r3, r2
 8004194:	f000 8085 	beq.w	80042a2 <TestMaster_scanIndexOD+0x26e>
 8004198:	e0a4      	b.n	80042e4 <TestMaster_scanIndexOD+0x2b0>
 800419a:	f246 0265 	movw	r2, #24677	; 0x6065
 800419e:	4293      	cmp	r3, r2
 80041a0:	f000 808b 	beq.w	80042ba <TestMaster_scanIndexOD+0x286>
 80041a4:	f246 0265 	movw	r2, #24677	; 0x6065
 80041a8:	4293      	cmp	r3, r2
 80041aa:	dc17      	bgt.n	80041dc <TestMaster_scanIndexOD+0x1a8>
 80041ac:	f246 0241 	movw	r2, #24641	; 0x6041
 80041b0:	4293      	cmp	r3, r2
 80041b2:	f000 8091 	beq.w	80042d8 <TestMaster_scanIndexOD+0x2a4>
 80041b6:	f246 0241 	movw	r2, #24641	; 0x6041
 80041ba:	4293      	cmp	r3, r2
 80041bc:	dc04      	bgt.n	80041c8 <TestMaster_scanIndexOD+0x194>
 80041be:	f246 0240 	movw	r2, #24640	; 0x6040
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d070      	beq.n	80042a8 <TestMaster_scanIndexOD+0x274>
 80041c6:	e08d      	b.n	80042e4 <TestMaster_scanIndexOD+0x2b0>
 80041c8:	f246 0260 	movw	r2, #24672	; 0x6060
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d071      	beq.n	80042b4 <TestMaster_scanIndexOD+0x280>
 80041d0:	f246 0264 	movw	r2, #24676	; 0x6064
 80041d4:	4293      	cmp	r3, r2
 80041d6:	f000 8082 	beq.w	80042de <TestMaster_scanIndexOD+0x2aa>
 80041da:	e083      	b.n	80042e4 <TestMaster_scanIndexOD+0x2b0>
 80041dc:	f246 0275 	movw	r2, #24693	; 0x6075
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d070      	beq.n	80042c6 <TestMaster_scanIndexOD+0x292>
 80041e4:	f246 0275 	movw	r2, #24693	; 0x6075
 80041e8:	4293      	cmp	r3, r2
 80041ea:	dc04      	bgt.n	80041f6 <TestMaster_scanIndexOD+0x1c2>
 80041ec:	f246 0270 	movw	r2, #24688	; 0x6070
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d065      	beq.n	80042c0 <TestMaster_scanIndexOD+0x28c>
 80041f4:	e076      	b.n	80042e4 <TestMaster_scanIndexOD+0x2b0>
 80041f6:	f246 027a 	movw	r2, #24698	; 0x607a
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d057      	beq.n	80042ae <TestMaster_scanIndexOD+0x27a>
 80041fe:	f5b3 4fc1 	cmp.w	r3, #24704	; 0x6080
 8004202:	d063      	beq.n	80042cc <TestMaster_scanIndexOD+0x298>
 8004204:	e06e      	b.n	80042e4 <TestMaster_scanIndexOD+0x2b0>
		case 0x1000: i = 0;break;
 8004206:	2300      	movs	r3, #0
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	e070      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x1001: i = 1;break;
 800420c:	2301      	movs	r3, #1
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	e06d      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x1017: i = 2;break;
 8004212:	2302      	movs	r3, #2
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	e06a      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x1018: i = 3;break;
 8004218:	2303      	movs	r3, #3
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	e067      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		
		case 0x1200: i = 4;break;
 800421e:	2304      	movs	r3, #4
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	e064      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		
		case 0x1280: i = 5;break;
 8004224:	2305      	movs	r3, #5
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e061      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x1281: i = 6;break;
 800422a:	2306      	movs	r3, #6
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	e05e      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		
		case 0x1400: i = 7;break;/* PDO_RCV */
 8004230:	2307      	movs	r3, #7
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	e05b      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x1401: i = 8;break;
 8004236:	2308      	movs	r3, #8
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	e058      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x1402: i = 9;break;
 800423c:	2309      	movs	r3, #9
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	e055      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x1403: i = 10;break;
 8004242:	230a      	movs	r3, #10
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	e052      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		
		case 0x1600: i = 11;break;/* PDO_RCV_MAP */
 8004248:	230b      	movs	r3, #11
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	e04f      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x1601: i = 12;break;
 800424e:	230c      	movs	r3, #12
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	e04c      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x1602: i = 13;break;
 8004254:	230d      	movs	r3, #13
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	e049      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x1603: i = 14;break;
 800425a:	230e      	movs	r3, #14
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	e046      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		
		case 0x1800: i = 15;break;/* PDO_TRS */
 8004260:	230f      	movs	r3, #15
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	e043      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x1801: i = 16;break;
 8004266:	2310      	movs	r3, #16
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	e040      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x1802: i = 17;break;
 800426c:	2311      	movs	r3, #17
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	e03d      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x1803: i = 18;break;
 8004272:	2312      	movs	r3, #18
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	e03a      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x1804: i = 19;break;
 8004278:	2313      	movs	r3, #19
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	e037      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x1805: i = 20;break;
 800427e:	2314      	movs	r3, #20
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	e034      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		
		case 0x1A00: i = 21;break;/* PDO_TRS_MAP */
 8004284:	2315      	movs	r3, #21
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	e031      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x1A01: i = 22;break;
 800428a:	2316      	movs	r3, #22
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	e02e      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x1A02: i = 23;break;
 8004290:	2317      	movs	r3, #23
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	e02b      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x1A03: i = 24;break;
 8004296:	2318      	movs	r3, #24
 8004298:	617b      	str	r3, [r7, #20]
 800429a:	e028      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x1A04: i = 25;break;
 800429c:	2319      	movs	r3, #25
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	e025      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x1A05: i = 26;break;
 80042a2:	231a      	movs	r3, #26
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	e022      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		
		case 0x6040: i = 27;break;
 80042a8:	231b      	movs	r3, #27
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e01f      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x607A: i = 28;break;
 80042ae:	231c      	movs	r3, #28
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	e01c      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x6060: i = 29;break;
 80042b4:	231d      	movs	r3, #29
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	e019      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x6065: i = 30;break;
 80042ba:	231e      	movs	r3, #30
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	e016      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x6070: i = 31;break;
 80042c0:	231f      	movs	r3, #31
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	e013      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x6075: i = 32;break;
 80042c6:	2320      	movs	r3, #32
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	e010      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x6080: i = 33;break;
 80042cc:	2321      	movs	r3, #33	; 0x21
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e00d      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>

		case 0x2062: i = 34;break;
 80042d2:	2322      	movs	r3, #34	; 0x22
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	e00a      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x6041: i = 35;break;
 80042d8:	2323      	movs	r3, #35	; 0x23
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	e007      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>
		case 0x6064: i = 36;break;
 80042de:	2324      	movs	r3, #36	; 0x24
 80042e0:	617b      	str	r3, [r7, #20]
 80042e2:	e004      	b.n	80042ee <TestMaster_scanIndexOD+0x2ba>

		default:
			*errorCode = OD_NO_SUCH_OBJECT;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a08      	ldr	r2, [pc, #32]	; (8004308 <TestMaster_scanIndexOD+0x2d4>)
 80042e8:	601a      	str	r2, [r3, #0]
			return NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e006      	b.n	80042fc <TestMaster_scanIndexOD+0x2c8>
	}
	*errorCode = OD_SUCCESSFUL;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
	return &(TestMaster_objdict[i]);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	4a04      	ldr	r2, [pc, #16]	; (800430c <TestMaster_scanIndexOD+0x2d8>)
 80042fa:	4413      	add	r3, r2
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	06020000 	.word	0x06020000
 800430c:	0800e8b8 	.word	0x0800e8b8

08004310 <OnNumberOfErrorsUpdate>:
** @param unsused_bSubindex
**
** @return
**/
UNS32 OnNumberOfErrorsUpdate(CO_Data* d, const indextable * unsused_indextable, UNS8 unsused_bSubindex)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	4613      	mov	r3, r2
 800431c:	71fb      	strb	r3, [r7, #7]
	UNS8 index;
	(void)unsused_indextable;
	(void)unsused_bSubindex;
  // if 0, reset Pre-defined Error Field
  // else, don't change and give an abort message (eeror code: 0609 0030h)
	if (*d->error_number == 0)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d113      	bne.n	8004352 <OnNumberOfErrorsUpdate+0x42>
		for (index = 0; index < d->error_history_size; ++index)
 800432a:	2300      	movs	r3, #0
 800432c:	75fb      	strb	r3, [r7, #23]
 800432e:	e00a      	b.n	8004346 <OnNumberOfErrorsUpdate+0x36>
			*(d->error_first_element + index) = 0;		/* clear all the fields in Pre-defined Error Field (1003h) */
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004336:	7dfb      	ldrb	r3, [r7, #23]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
		for (index = 0; index < d->error_history_size; ++index)
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	3301      	adds	r3, #1
 8004344:	75fb      	strb	r3, [r7, #23]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 800434c:	7dfa      	ldrb	r2, [r7, #23]
 800434e:	429a      	cmp	r2, r3
 8004350:	d3ee      	bcc.n	8004330 <OnNumberOfErrorsUpdate+0x20>
	else
	{
		;// abort message
	}
  return 0;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr
	...

08004360 <emergencyInit>:
**
**
** @param d
**/
void emergencyInit(CO_Data* d)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  RegisterSetODentryCallBack(d, 0x1003, 0x00, &OnNumberOfErrorsUpdate);
 8004368:	4b07      	ldr	r3, [pc, #28]	; (8004388 <emergencyInit+0x28>)
 800436a:	2200      	movs	r2, #0
 800436c:	f241 0103 	movw	r1, #4099	; 0x1003
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fdb5 	bl	8004ee0 <RegisterSetODentryCallBack>

  *d->error_number = 0;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	08004311 	.word	0x08004311

0800438c <emergencyStop>:
**
**
** @param d
**/
void emergencyStop(CO_Data* d)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  (void)d;
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr
	...

080043a0 <proceedEMCY>:
 ** @param d
 ** @param m The CAN-message which has to be analysed.
 **
 **/
void proceedEMCY(CO_Data* d, Message* m)
{
 80043a0:	b590      	push	{r4, r7, lr}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
	UNS8 errReg;
	
	MSG_WAR(0x3055, "EMCY received. Proceed. ", 0);
  
	/* Test if the size of the EMCY is ok */
	if ( m->len != 8) {
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	78db      	ldrb	r3, [r3, #3]
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d00c      	beq.n	80043cc <proceedEMCY+0x2c>
		MSG_ERR(0x1056, "Error size EMCY. CobId  : ", m->cob_id);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	4b15      	ldr	r3, [pc, #84]	; (8004410 <proceedEMCY+0x70>)
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	f241 0356 	movw	r3, #4182	; 0x1056
 80043c0:	22f8      	movs	r2, #248	; 0xf8
 80043c2:	4914      	ldr	r1, [pc, #80]	; (8004414 <proceedEMCY+0x74>)
 80043c4:	4814      	ldr	r0, [pc, #80]	; (8004418 <proceedEMCY+0x78>)
 80043c6:	f008 fa1d 	bl	800c804 <iprintf>
		return;
 80043ca:	e01e      	b.n	800440a <proceedEMCY+0x6a>
	}
	
	/* post the received EMCY */
	nodeID = m->cob_id & 0x7F;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043d6:	73fb      	strb	r3, [r7, #15]
	errCode = m->Data[0] | ((UNS16)m->Data[1] << 8);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	791b      	ldrb	r3, [r3, #4]
 80043dc:	b21a      	sxth	r2, r3
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	795b      	ldrb	r3, [r3, #5]
 80043e2:	021b      	lsls	r3, r3, #8
 80043e4:	b21b      	sxth	r3, r3
 80043e6:	4313      	orrs	r3, r2
 80043e8:	b21b      	sxth	r3, r3
 80043ea:	81bb      	strh	r3, [r7, #12]
	errReg = m->Data[2];
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	799b      	ldrb	r3, [r3, #6]
 80043f0:	72fb      	strb	r3, [r7, #11]
	(*d->post_emcy)(d, nodeID, errCode, errReg, (const UNS8*)&m->Data[3]);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8d3 423c 	ldr.w	r4, [r3, #572]	; 0x23c
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	3307      	adds	r3, #7
 80043fc:	7af8      	ldrb	r0, [r7, #11]
 80043fe:	89ba      	ldrh	r2, [r7, #12]
 8004400:	7bf9      	ldrb	r1, [r7, #15]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	4603      	mov	r3, r0
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	47a0      	blx	r4
}
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	bd90      	pop	{r4, r7, pc}
 8004410:	0800dd48 	.word	0x0800dd48
 8004414:	0800dcfc 	.word	0x0800dcfc
 8004418:	0800dd20 	.word	0x0800dd20

0800441c <ConsumerHeartbeatAlarm>:
** @param d
** @param id
 * @ingroup heartbeato
**/
void ConsumerHeartbeatAlarm(CO_Data* d, UNS32 id)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  UNS8 nodeId = (UNS8)(((d->ConsumerHeartbeatEntries[id]) & (UNS32)0x00FF0000) >> (UNS8)16);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	0c1b      	lsrs	r3, r3, #16
 8004436:	73fb      	strb	r3, [r7, #15]
  /*MSG_WAR(0x00, "ConsumerHearbeatAlarm", 0x00);*/

  /* timer have been notified and is now free (non periodic)*/
  /* -> avoid deleting re-assigned timer if message is received too late*/
  d->ConsumerHeartBeatTimers[id]=TIMER_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	4413      	add	r3, r2
 8004444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004448:	801a      	strh	r2, [r3, #0]
  
  /* set node state */
  d->NMTable[nodeId] = Disconnected;
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	4413      	add	r3, r2
 8004450:	2201      	movs	r2, #1
 8004452:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
  /*! call heartbeat error with NodeId */
  (*d->heartbeatError)(d, nodeId);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800445c:	7bfa      	ldrb	r2, [r7, #15]
 800445e:	4611      	mov	r1, r2
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	4798      	blx	r3
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <proceedNODE_GUARD>:

void proceedNODE_GUARD(CO_Data* d, Message* m )
{
 800446c:	b590      	push	{r4, r7, lr}
 800446e:	b08b      	sub	sp, #44	; 0x2c
 8004470:	af02      	add	r7, sp, #8
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  UNS8 nodeId = (UNS8) GET_NODE_ID((*m));
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004480:	77bb      	strb	r3, [r7, #30]

  if((m->rtr == 1) )
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	789b      	ldrb	r3, [r3, #2]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d134      	bne.n	80044f4 <proceedNODE_GUARD+0x88>
      ** Receiving a NMT NodeGuarding (request of the state by the
      ** master)
      ** Only answer to the NMT NodeGuarding request, the master is
      ** not checked (not implemented)
      */
      if (nodeId == *d->bDeviceNodeId )
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	7fba      	ldrb	r2, [r7, #30]
 8004492:	429a      	cmp	r2, r3
 8004494:	f040 80a9 	bne.w	80045ea <proceedNODE_GUARD+0x17e>
        {
          Message msg;
          UNS16 tmp = *d->bDeviceNodeId + 0x700;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80044a4:	82fb      	strh	r3, [r7, #22]
          msg.cob_id = UNS16_LE(tmp);
 80044a6:	8afb      	ldrh	r3, [r7, #22]
 80044a8:	813b      	strh	r3, [r7, #8]
          msg.len = (UNS8)0x01;
 80044aa:	2301      	movs	r3, #1
 80044ac:	72fb      	strb	r3, [r7, #11]
          msg.rtr = 0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	72bb      	strb	r3, [r7, #10]
          msg.data[0] = d->nodeState;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80044b8:	733b      	strb	r3, [r7, #12]
          if (d->toggle)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d009      	beq.n	80044d8 <proceedNODE_GUARD+0x6c>
            {
              msg.data[0] |= 0x80 ;
 80044c4:	7b3b      	ldrb	r3, [r7, #12]
 80044c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	733b      	strb	r3, [r7, #12]
              d->toggle = 0 ;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
 80044d6:	e003      	b.n	80044e0 <proceedNODE_GUARD+0x74>
            }
          else
            d->toggle = 1 ;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
          /* send the nodeguard response. */
          MSG_WAR(0x3130, "Sending NMT Nodeguard to master, state: ", d->nodeState);
          canSend(d->canHandle,&msg );
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 80044e6:	f107 0208 	add.w	r2, r7, #8
 80044ea:	4611      	mov	r1, r2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fc fe13 	bl	8001118 <canSend>
                d->ConsumerHeartBeatTimers[index] = SetAlarm(d, index, &ConsumerHeartbeatAlarm, MS_TO_TIMEVAL(time), 0);
              }
          }
      }
    }
}
 80044f2:	e07a      	b.n	80045ea <proceedNODE_GUARD+0x17e>
      e_nodeState newNodeState = (e_nodeState) ((*m).data[0] & 0x7F);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	791b      	ldrb	r3, [r3, #4]
 80044f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044fc:	777b      	strb	r3, [r7, #29]
      d->nodeGuardStatus[nodeId] = *d->LifeTimeFactor;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8004504:	7fbb      	ldrb	r3, [r7, #30]
 8004506:	7811      	ldrb	r1, [r2, #0]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	4413      	add	r3, r2
 800450c:	460a      	mov	r2, r1
 800450e:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
      if (d->NMTable[nodeId] != newNodeState)
 8004512:	7fbb      	ldrb	r3, [r7, #30]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	4413      	add	r3, r2
 8004518:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800451c:	7f7a      	ldrb	r2, [r7, #29]
 800451e:	429a      	cmp	r2, r3
 8004520:	d00c      	beq.n	800453c <proceedNODE_GUARD+0xd0>
        (*d->post_SlaveStateChange)(d, nodeId, newNodeState);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8004528:	7f7a      	ldrb	r2, [r7, #29]
 800452a:	7fb9      	ldrb	r1, [r7, #30]
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	4798      	blx	r3
        d->NMTable[nodeId] = newNodeState;
 8004530:	7fbb      	ldrb	r3, [r7, #30]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	4413      	add	r3, r2
 8004536:	7f7a      	ldrb	r2, [r7, #29]
 8004538:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      if ( d->NMTable[nodeId] == Initialisation)
 800453c:	7fbb      	ldrb	r3, [r7, #30]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	4413      	add	r3, r2
 8004542:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <proceedNODE_GUARD+0xec>
		  (*d->post_SlaveBootup)(d, nodeId);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8004550:	7fba      	ldrb	r2, [r7, #30]
 8004552:	4611      	mov	r1, r2
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	4798      	blx	r3
      if( d->NMTable[nodeId] != Unknown_state ) {
 8004558:	7fbb      	ldrb	r3, [r7, #30]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8004562:	2b0f      	cmp	r3, #15
 8004564:	d041      	beq.n	80045ea <proceedNODE_GUARD+0x17e>
        for( index = (UNS8)0x00; index < *d->ConsumerHeartbeatCount; index++ )
 8004566:	2300      	movs	r3, #0
 8004568:	77fb      	strb	r3, [r7, #31]
 800456a:	e037      	b.n	80045dc <proceedNODE_GUARD+0x170>
            ConsumerHeartBeat_nodeId = (UNS8)( ((d->ConsumerHeartbeatEntries[index]) & (UNS32)0x00FF0000) >> (UNS8)16 );
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004572:	7ffb      	ldrb	r3, [r7, #31]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	0c1b      	lsrs	r3, r3, #16
 800457c:	773b      	strb	r3, [r7, #28]
            if ( nodeId == ConsumerHeartBeat_nodeId )
 800457e:	7fba      	ldrb	r2, [r7, #30]
 8004580:	7f3b      	ldrb	r3, [r7, #28]
 8004582:	429a      	cmp	r2, r3
 8004584:	d127      	bne.n	80045d6 <proceedNODE_GUARD+0x16a>
                TIMEVAL time = ( (d->ConsumerHeartbeatEntries[index]) & (UNS32)0x0000FFFF ) ;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800458c:	7ffb      	ldrb	r3, [r7, #31]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	b29b      	uxth	r3, r3
 8004596:	61bb      	str	r3, [r7, #24]
                DelAlarm(d->ConsumerHeartBeatTimers[index]);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800459e:	7ffb      	ldrb	r3, [r7, #31]
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	4413      	add	r3, r2
 80045a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f006 fbb7 	bl	800ad1c <DelAlarm>
                d->ConsumerHeartBeatTimers[index] = SetAlarm(d, index, &ConsumerHeartbeatAlarm, MS_TO_TIMEVAL(time), 0);
 80045ae:	7ff9      	ldrb	r1, [r7, #31]
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2264      	movs	r2, #100	; 0x64
 80045b4:	fb02 f003 	mul.w	r0, r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80045be:	7ffb      	ldrb	r3, [r7, #31]
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	18d4      	adds	r4, r2, r3
 80045c4:	2300      	movs	r3, #0
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	4603      	mov	r3, r0
 80045ca:	4a0a      	ldr	r2, [pc, #40]	; (80045f4 <proceedNODE_GUARD+0x188>)
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f006 fb29 	bl	800ac24 <SetAlarm>
 80045d2:	4603      	mov	r3, r0
 80045d4:	8023      	strh	r3, [r4, #0]
        for( index = (UNS8)0x00; index < *d->ConsumerHeartbeatCount; index++ )
 80045d6:	7ffb      	ldrb	r3, [r7, #31]
 80045d8:	3301      	adds	r3, #1
 80045da:	77fb      	strb	r3, [r7, #31]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	7ffa      	ldrb	r2, [r7, #31]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d3c0      	bcc.n	800456c <proceedNODE_GUARD+0x100>
}
 80045ea:	bf00      	nop
 80045ec:	3724      	adds	r7, #36	; 0x24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd90      	pop	{r4, r7, pc}
 80045f2:	bf00      	nop
 80045f4:	0800441d 	.word	0x0800441d

080045f8 <ProducerHeartbeatAlarm>:
** @param d
** @param id
 * @ingroup heartbeato
**/
void ProducerHeartbeatAlarm(CO_Data* d, UNS32 id)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  (void)id;
  if(*d->ProducerHeartBeatTime)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d01a      	beq.n	8004644 <ProducerHeartbeatAlarm+0x4c>
      /* Time expired, the heartbeat must be sent immediately
      ** generate the correct node-id: this is done by the offset 1792
      ** (decimal) and additionaly
      ** the node-id of this device.
      */
      UNS16 tmp = *d->bDeviceNodeId + 0x700;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	b29b      	uxth	r3, r3
 8004616:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 800461a:	82fb      	strh	r3, [r7, #22]
      msg.cob_id = UNS16_LE(tmp);
 800461c:	8afb      	ldrh	r3, [r7, #22]
 800461e:	813b      	strh	r3, [r7, #8]
      msg.len = (UNS8)0x01;
 8004620:	2301      	movs	r3, #1
 8004622:	72fb      	strb	r3, [r7, #11]
      msg.rtr = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	72bb      	strb	r3, [r7, #10]
      msg.data[0] = d->nodeState; /* No toggle for heartbeat !*/
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800462e:	733b      	strb	r3, [r7, #12]
      /* send the heartbeat */
      MSG_WAR(0x3130, "Producing heartbeat: ", d->nodeState);
      canSend(d->canHandle,&msg );
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8004636:	f107 0208 	add.w	r2, r7, #8
 800463a:	4611      	mov	r1, r2
 800463c:	4618      	mov	r0, r3
 800463e:	f7fc fd6b 	bl	8001118 <canSend>

    }else{
      d->ProducerHeartBeatTimer = DelAlarm(d->ProducerHeartBeatTimer);
    }
}
 8004642:	e00a      	b.n	800465a <ProducerHeartbeatAlarm+0x62>
      d->ProducerHeartBeatTimer = DelAlarm(d->ProducerHeartBeatTimer);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 800464a:	4618      	mov	r0, r3
 800464c:	f006 fb66 	bl	800ad1c <DelAlarm>
 8004650:	4603      	mov	r3, r0
 8004652:	461a      	mov	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
}
 800465a:	bf00      	nop
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <GuardTimeAlarm>:
 * @param d 	Pointer on a CAN object data structure 
 * @param id
 * @ingroup nodeguardo
 */
void GuardTimeAlarm(CO_Data* d, UNS32 id)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b084      	sub	sp, #16
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	6039      	str	r1, [r7, #0]
  (void)id;
  if (*d->GuardTime) {
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d041      	beq.n	80046fc <GuardTimeAlarm+0x9a>
    UNS8 i;

    MSG_WAR(0x00, "Producing nodeguard-requests: ", 0);

    for (i = 0; i < NMT_MAX_NODE_ID; i++) {
 8004678:	2300      	movs	r3, #0
 800467a:	73fb      	strb	r3, [r7, #15]
 800467c:	e039      	b.n	80046f2 <GuardTimeAlarm+0x90>
      /** Send node guard request to all nodes except this node, if the 
      * node state is not "Unknown_state"
      */
      if (d->NMTable[i] != Unknown_state && i != *d->bDeviceNodeId) {
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	4413      	add	r3, r2
 8004684:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8004688:	2b0f      	cmp	r3, #15
 800468a:	d02f      	beq.n	80046ec <GuardTimeAlarm+0x8a>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	7bfa      	ldrb	r2, [r7, #15]
 8004694:	429a      	cmp	r2, r3
 8004696:	d029      	beq.n	80046ec <GuardTimeAlarm+0x8a>

        /** Check if the node has confirmed the guarding request within
        * the LifeTime (GuardTime x LifeTimeFactor)
        */
        if (d->nodeGuardStatus[i] <= 0) {
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	4413      	add	r3, r2
 800469e:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d111      	bne.n	80046ca <GuardTimeAlarm+0x68>

          MSG_WAR(0x00, "Node Guard alarm for nodeId : ", i);

          // Call error-callback function
          if (*d->nodeguardError) {
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d006      	beq.n	80046be <GuardTimeAlarm+0x5c>
            (*d->nodeguardError)(d, i);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80046b6:	7bfa      	ldrb	r2, [r7, #15]
 80046b8:	4611      	mov	r1, r2
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	4798      	blx	r3
          }

          // Mark node as disconnected
          d->NMTable[i] = Disconnected;
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	4413      	add	r3, r2
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

        }

        d->nodeGuardStatus[i]--;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	441a      	add	r2, r3
 80046d0:	f892 2144 	ldrb.w	r2, [r2, #324]	; 0x144
 80046d4:	3a01      	subs	r2, #1
 80046d6:	b2d1      	uxtb	r1, r2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	4413      	add	r3, r2
 80046dc:	460a      	mov	r2, r1
 80046de:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144

        masterSendNMTnodeguard(d, i);
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	4619      	mov	r1, r3
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f9a6 	bl	8004a38 <masterSendNMTnodeguard>
    for (i = 0; i < NMT_MAX_NODE_ID; i++) {
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
 80046ee:	3301      	adds	r3, #1
 80046f0:	73fb      	strb	r3, [r7, #15]
 80046f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	dac1      	bge.n	800467e <GuardTimeAlarm+0x1c>
    d->GuardTimeTimer = DelAlarm(d->GuardTimeTimer);
  }



}
 80046fa:	e00a      	b.n	8004712 <GuardTimeAlarm+0xb0>
    d->GuardTimeTimer = DelAlarm(d->GuardTimeTimer);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	; 0x134
 8004702:	4618      	mov	r0, r3
 8004704:	f006 fb0a 	bl	800ad1c <DelAlarm>
 8004708:	4603      	mov	r3, r0
 800470a:	461a      	mov	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
}
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <OnNodeGuardUpdate>:
 * @param unused_indextable
 * @param unused_bSubindex
 * @ingroup nodeguardo
 */
UNS32 OnNodeGuardUpdate(CO_Data* d, const indextable * unused_indextable, UNS8 unused_bSubindex)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b084      	sub	sp, #16
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	4613      	mov	r3, r2
 8004726:	71fb      	strb	r3, [r7, #7]
  (void)unused_indextable;
  (void)unused_bSubindex;
  nodeguardStop(d);
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 f936 	bl	800499a <nodeguardStop>
  nodeguardInit(d);
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f8a0 	bl	8004874 <nodeguardInit>
  return 0;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <OnHeartbeatProducerUpdate>:
**
** @return
 * @ingroup heartbeato
**/
UNS32 OnHeartbeatProducerUpdate(CO_Data* d, const indextable * unused_indextable, UNS8 unused_bSubindex)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af02      	add	r7, sp, #8
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	4613      	mov	r3, r2
 800474c:	71fb      	strb	r3, [r7, #7]
  (void)unused_indextable;
  (void)unused_bSubindex;
  d->ProducerHeartBeatTimer = DelAlarm(d->ProducerHeartBeatTimer);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 8004754:	4618      	mov	r0, r3
 8004756:	f006 fae1 	bl	800ad1c <DelAlarm>
 800475a:	4603      	mov	r3, r0
 800475c:	461a      	mov	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  if ( *d->ProducerHeartBeatTime )
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d014      	beq.n	800479a <OnHeartbeatProducerUpdate+0x5a>
    {
      TIMEVAL time = *d->ProducerHeartBeatTime;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	617b      	str	r3, [r7, #20]
      d->ProducerHeartBeatTimer = SetAlarm(d, 0, &ProducerHeartbeatAlarm, 0, MS_TO_TIMEVAL(time));
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2264      	movs	r2, #100	; 0x64
 800477e:	fb02 f303 	mul.w	r3, r2, r3
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	2300      	movs	r3, #0
 8004786:	4a07      	ldr	r2, [pc, #28]	; (80047a4 <OnHeartbeatProducerUpdate+0x64>)
 8004788:	2100      	movs	r1, #0
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f006 fa4a 	bl	800ac24 <SetAlarm>
 8004790:	4603      	mov	r3, r0
 8004792:	461a      	mov	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    }
  return 0;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	080045f9 	.word	0x080045f9

080047a8 <heartbeatInit>:

void heartbeatInit(CO_Data* d)
{
 80047a8:	b590      	push	{r4, r7, lr}
 80047aa:	b089      	sub	sp, #36	; 0x24
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	6078      	str	r0, [r7, #4]

  UNS8 index; /* Index to scan the table of heartbeat consumers */
  RegisterSetODentryCallBack(d, 0x1017, 0x00, &OnHeartbeatProducerUpdate);
 80047b0:	4b2d      	ldr	r3, [pc, #180]	; (8004868 <heartbeatInit+0xc0>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	f241 0117 	movw	r1, #4119	; 0x1017
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fb91 	bl	8004ee0 <RegisterSetODentryCallBack>

  d->toggle = 0;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0

  for( index = (UNS8)0x00; index < *d->ConsumerHeartbeatCount; index++ )
 80047c6:	2300      	movs	r3, #0
 80047c8:	75fb      	strb	r3, [r7, #23]
 80047ca:	e022      	b.n	8004812 <heartbeatInit+0x6a>
    {
      TIMEVAL time = (UNS16) ( (d->ConsumerHeartbeatEntries[index]) & (UNS32)0x0000FFFF ) ;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80047d2:	7dfb      	ldrb	r3, [r7, #23]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	60fb      	str	r3, [r7, #12]
      if ( time )
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d013      	beq.n	800480c <heartbeatInit+0x64>
        {
          d->ConsumerHeartBeatTimers[index] = SetAlarm(d, index, &ConsumerHeartbeatAlarm, MS_TO_TIMEVAL(time), 0);
 80047e4:	7df9      	ldrb	r1, [r7, #23]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2264      	movs	r2, #100	; 0x64
 80047ea:	fb02 f003 	mul.w	r0, r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80047f4:	7dfb      	ldrb	r3, [r7, #23]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	18d4      	adds	r4, r2, r3
 80047fa:	2300      	movs	r3, #0
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	4603      	mov	r3, r0
 8004800:	4a1a      	ldr	r2, [pc, #104]	; (800486c <heartbeatInit+0xc4>)
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f006 fa0e 	bl	800ac24 <SetAlarm>
 8004808:	4603      	mov	r3, r0
 800480a:	8023      	strh	r3, [r4, #0]
  for( index = (UNS8)0x00; index < *d->ConsumerHeartbeatCount; index++ )
 800480c:	7dfb      	ldrb	r3, [r7, #23]
 800480e:	3301      	adds	r3, #1
 8004810:	75fb      	strb	r3, [r7, #23]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	7dfa      	ldrb	r2, [r7, #23]
 800481c:	429a      	cmp	r2, r3
 800481e:	d3d5      	bcc.n	80047cc <heartbeatInit+0x24>
        }
    }

  if ( *d->ProducerHeartBeatTime )
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d018      	beq.n	800485e <heartbeatInit+0xb6>
    {
      TIMEVAL time = *d->ProducerHeartBeatTime;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	613b      	str	r3, [r7, #16]
      d->ProducerHeartBeatTimer = SetAlarm(d, 0, &ProducerHeartbeatAlarm, MS_TO_TIMEVAL(time), MS_TO_TIMEVAL(time));
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2264      	movs	r2, #100	; 0x64
 800483a:	fb02 f103 	mul.w	r1, r2, r3
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2264      	movs	r2, #100	; 0x64
 8004842:	fb02 f303 	mul.w	r3, r2, r3
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	460b      	mov	r3, r1
 800484a:	4a09      	ldr	r2, [pc, #36]	; (8004870 <heartbeatInit+0xc8>)
 800484c:	2100      	movs	r1, #0
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f006 f9e8 	bl	800ac24 <SetAlarm>
 8004854:	4603      	mov	r3, r0
 8004856:	461a      	mov	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    }
}
 800485e:	bf00      	nop
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	bd90      	pop	{r4, r7, pc}
 8004866:	bf00      	nop
 8004868:	08004741 	.word	0x08004741
 800486c:	0800441d 	.word	0x0800441d
 8004870:	080045f9 	.word	0x080045f9

08004874 <nodeguardInit>:


void nodeguardInit(CO_Data* d)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af02      	add	r7, sp, #8
 800487a:	6078      	str	r0, [r7, #4]

  RegisterSetODentryCallBack(d, 0x100C, 0x00, &OnNodeGuardUpdate);
 800487c:	4b2b      	ldr	r3, [pc, #172]	; (800492c <nodeguardInit+0xb8>)
 800487e:	2200      	movs	r2, #0
 8004880:	f241 010c 	movw	r1, #4108	; 0x100c
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fb2b 	bl	8004ee0 <RegisterSetODentryCallBack>
  RegisterSetODentryCallBack(d, 0x100D, 0x00, &OnNodeGuardUpdate);
 800488a:	4b28      	ldr	r3, [pc, #160]	; (800492c <nodeguardInit+0xb8>)
 800488c:	2200      	movs	r2, #0
 800488e:	f241 010d 	movw	r1, #4109	; 0x100d
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fb24 	bl	8004ee0 <RegisterSetODentryCallBack>

  if (*d->GuardTime && *d->LifeTimeFactor) {
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d03f      	beq.n	8004924 <nodeguardInit+0xb0>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d039      	beq.n	8004924 <nodeguardInit+0xb0>
    UNS8 i;

    TIMEVAL time = *d->GuardTime;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	60bb      	str	r3, [r7, #8]
    d->GuardTimeTimer = SetAlarm(d, 0, &GuardTimeAlarm, MS_TO_TIMEVAL(time), MS_TO_TIMEVAL(time));
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2264      	movs	r2, #100	; 0x64
 80048be:	fb02 f103 	mul.w	r1, r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2264      	movs	r2, #100	; 0x64
 80048c6:	fb02 f303 	mul.w	r3, r2, r3
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	460b      	mov	r3, r1
 80048ce:	4a18      	ldr	r2, [pc, #96]	; (8004930 <nodeguardInit+0xbc>)
 80048d0:	2100      	movs	r1, #0
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f006 f9a6 	bl	800ac24 <SetAlarm>
 80048d8:	4603      	mov	r3, r0
 80048da:	461a      	mov	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
    MSG_WAR(0x0, "GuardTime: ", time);

    for (i = 0; i < NMT_MAX_NODE_ID; i++) {
 80048e2:	2300      	movs	r3, #0
 80048e4:	73fb      	strb	r3, [r7, #15]
 80048e6:	e019      	b.n	800491c <nodeguardInit+0xa8>
      /** Set initial value for the nodes */
      if (d->NMTable[i] != Unknown_state && i != *d->bDeviceNodeId) { 
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	4413      	add	r3, r2
 80048ee:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80048f2:	2b0f      	cmp	r3, #15
 80048f4:	d00f      	beq.n	8004916 <nodeguardInit+0xa2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	7bfa      	ldrb	r2, [r7, #15]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d009      	beq.n	8004916 <nodeguardInit+0xa2>
        d->nodeGuardStatus[i] = *d->LifeTimeFactor;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	7811      	ldrb	r1, [r2, #0]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	4413      	add	r3, r2
 8004910:	460a      	mov	r2, r1
 8004912:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
    for (i = 0; i < NMT_MAX_NODE_ID; i++) {
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	3301      	adds	r3, #1
 800491a:	73fb      	strb	r3, [r7, #15]
 800491c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004920:	2b00      	cmp	r3, #0
 8004922:	dae1      	bge.n	80048e8 <nodeguardInit+0x74>
    }

    MSG_WAR(0x0, "Timer for node-guarding startet", 0);
  }

}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	0800471b 	.word	0x0800471b
 8004930:	08004663 	.word	0x08004663

08004934 <heartbeatStop>:

void heartbeatStop(CO_Data* d)
{
 8004934:	b590      	push	{r4, r7, lr}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNS8 index;
  for( index = (UNS8)0x00; index < *d->ConsumerHeartbeatCount; index++ )
 800493c:	2300      	movs	r3, #0
 800493e:	73fb      	strb	r3, [r7, #15]
 8004940:	e015      	b.n	800496e <heartbeatStop+0x3a>
    {
      d->ConsumerHeartBeatTimers[index] = DelAlarm(d->ConsumerHeartBeatTimers[index]);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	4413      	add	r3, r2
 800494e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	18d4      	adds	r4, r2, r3
 800495e:	4608      	mov	r0, r1
 8004960:	f006 f9dc 	bl	800ad1c <DelAlarm>
 8004964:	4603      	mov	r3, r0
 8004966:	8023      	strh	r3, [r4, #0]
  for( index = (UNS8)0x00; index < *d->ConsumerHeartbeatCount; index++ )
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	3301      	adds	r3, #1
 800496c:	73fb      	strb	r3, [r7, #15]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	7bfa      	ldrb	r2, [r7, #15]
 8004978:	429a      	cmp	r2, r3
 800497a:	d3e2      	bcc.n	8004942 <heartbeatStop+0xe>
    }

  d->ProducerHeartBeatTimer = DelAlarm(d->ProducerHeartBeatTimer);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 8004982:	4618      	mov	r0, r3
 8004984:	f006 f9ca 	bl	800ad1c <DelAlarm>
 8004988:	4603      	mov	r3, r0
 800498a:	461a      	mov	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
}
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	bd90      	pop	{r4, r7, pc}

0800499a <nodeguardStop>:

void nodeguardStop(CO_Data* d)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  d->GuardTimeTimer = DelAlarm(d->GuardTimeTimer);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	; 0x134
 80049a8:	4618      	mov	r0, r3
 80049aa:	f006 f9b7 	bl	800ad1c <DelAlarm>
 80049ae:	4603      	mov	r3, r0
 80049b0:	461a      	mov	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
}
 80049b8:	bf00      	nop
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <lifeGuardInit>:


void lifeGuardInit(CO_Data* d)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  heartbeatInit(d);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7ff feed 	bl	80047a8 <heartbeatInit>
  nodeguardInit(d);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff ff50 	bl	8004874 <nodeguardInit>
}
 80049d4:	bf00      	nop
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <lifeGuardStop>:


void lifeGuardStop(CO_Data* d)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  heartbeatStop(d);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff ffa5 	bl	8004934 <heartbeatStop>
  nodeguardStop(d);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff ffd5 	bl	800499a <nodeguardStop>
}
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <masterSendNMTstateChange>:
** @param cs
**
** @return
**/
UNS8 masterSendNMTstateChange(CO_Data* d, UNS8 nodeId, UNS8 cs)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	70fb      	strb	r3, [r7, #3]
 8004a04:	4613      	mov	r3, r2
 8004a06:	70bb      	strb	r3, [r7, #2]
  Message m;

  MSG_WAR(0x3501, "Send_NMT cs : ", cs);
  MSG_WAR(0x3502, "    to node : ", nodeId);
  /* message configuration */
  m.cob_id = 0x0000; /*(NMT) << 7*/
 8004a08:	2300      	movs	r3, #0
 8004a0a:	81bb      	strh	r3, [r7, #12]
  m.rtr = NOT_A_REQUEST;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	73bb      	strb	r3, [r7, #14]
  m.len = 2;
 8004a10:	2302      	movs	r3, #2
 8004a12:	73fb      	strb	r3, [r7, #15]
  m.data[0] = cs;
 8004a14:	78bb      	ldrb	r3, [r7, #2]
 8004a16:	743b      	strb	r3, [r7, #16]
  m.data[1] = nodeId;
 8004a18:	78fb      	ldrb	r3, [r7, #3]
 8004a1a:	747b      	strb	r3, [r7, #17]

  return canSend(d->canHandle,&m);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8004a22:	f107 020c 	add.w	r2, r7, #12
 8004a26:	4611      	mov	r1, r2
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fc fb75 	bl	8001118 <canSend>
 8004a2e:	4603      	mov	r3, r0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <masterSendNMTnodeguard>:
** @param nodeId
**
** @return
**/
UNS8 masterSendNMTnodeguard(CO_Data* d, UNS8 nodeId)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	70fb      	strb	r3, [r7, #3]
  Message m;

  /* message configuration */
  UNS16 tmp = nodeId | (NODE_GUARD << 7); 
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	b21b      	sxth	r3, r3
 8004a48:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a4c:	b21b      	sxth	r3, r3
 8004a4e:	82fb      	strh	r3, [r7, #22]
  m.cob_id = UNS16_LE(tmp);
 8004a50:	8afb      	ldrh	r3, [r7, #22]
 8004a52:	813b      	strh	r3, [r7, #8]
  m.rtr = REQUEST;
 8004a54:	2301      	movs	r3, #1
 8004a56:	72bb      	strb	r3, [r7, #10]
  m.len = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	72fb      	strb	r3, [r7, #11]

  MSG_WAR(0x3503, "Send_NODE_GUARD to node : ", nodeId);

  return canSend(d->canHandle,&m);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8004a62:	f107 0208 	add.w	r2, r7, #8
 8004a66:	4611      	mov	r1, r2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fc fb55 	bl	8001118 <canSend>
 8004a6e:	4603      	mov	r3, r0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <proceedNMTstateChange>:
**
** @param d
** @param m
**/
void proceedNMTstateChange(CO_Data* d, Message *m)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  if( d->nodeState == Pre_operational ||
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004a88:	2b7f      	cmp	r3, #127	; 0x7f
 8004a8a:	d009      	beq.n	8004aa0 <proceedNMTstateChange+0x28>
      d->nodeState == Operational ||
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
  if( d->nodeState == Pre_operational ||
 8004a92:	2b05      	cmp	r3, #5
 8004a94:	d004      	beq.n	8004aa0 <proceedNMTstateChange+0x28>
      d->nodeState == Stopped ) {
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
      d->nodeState == Operational ||
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d178      	bne.n	8004b92 <proceedNMTstateChange+0x11a>
    MSG_WAR(0x3400, "NMT received. for node :  ", (*m).data[1]);

    /* Check if this NMT-message is for this node */
    /* byte 1 = 0 : all the nodes are concerned (broadcast) */

    if( ( (*m).data[1] == 0 ) || ( (*m).data[1] == *d->bDeviceNodeId ) ){
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	795b      	ldrb	r3, [r3, #5]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d006      	beq.n	8004ab6 <proceedNMTstateChange+0x3e>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	795a      	ldrb	r2, [r3, #5]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d16d      	bne.n	8004b92 <proceedNMTstateChange+0x11a>

      switch( (*m).data[0]){ /* command specifier (cs) */
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	791b      	ldrb	r3, [r3, #4]
 8004aba:	2b80      	cmp	r3, #128	; 0x80
 8004abc:	d029      	beq.n	8004b12 <proceedNMTstateChange+0x9a>
 8004abe:	2b80      	cmp	r3, #128	; 0x80
 8004ac0:	dc04      	bgt.n	8004acc <proceedNMTstateChange+0x54>
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d007      	beq.n	8004ad6 <proceedNMTstateChange+0x5e>
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d014      	beq.n	8004af4 <proceedNMTstateChange+0x7c>
      }/* end switch */

    }/* end if( ( (*m).data[1] == 0 ) || ( (*m).data[1] ==
        bDeviceNodeId ) ) */
  }
}
 8004aca:	e062      	b.n	8004b92 <proceedNMTstateChange+0x11a>
      switch( (*m).data[0]){ /* command specifier (cs) */
 8004acc:	2b81      	cmp	r3, #129	; 0x81
 8004ace:	d02f      	beq.n	8004b30 <proceedNMTstateChange+0xb8>
 8004ad0:	2b82      	cmp	r3, #130	; 0x82
 8004ad2:	d03c      	beq.n	8004b4e <proceedNMTstateChange+0xd6>
}
 8004ad4:	e05d      	b.n	8004b92 <proceedNMTstateChange+0x11a>
        if ( (d->nodeState == Pre_operational) || (d->nodeState == Stopped) )
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004adc:	2b7f      	cmp	r3, #127	; 0x7f
 8004ade:	d004      	beq.n	8004aea <proceedNMTstateChange+0x72>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d14e      	bne.n	8004b88 <proceedNMTstateChange+0x110>
          setState(d,Operational);
 8004aea:	2105      	movs	r1, #5
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f005 fe89 	bl	800a804 <setState>
        break;
 8004af2:	e049      	b.n	8004b88 <proceedNMTstateChange+0x110>
        if ( d->nodeState == Pre_operational ||
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004afa:	2b7f      	cmp	r3, #127	; 0x7f
 8004afc:	d004      	beq.n	8004b08 <proceedNMTstateChange+0x90>
             d->nodeState == Operational )
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
        if ( d->nodeState == Pre_operational ||
 8004b04:	2b05      	cmp	r3, #5
 8004b06:	d141      	bne.n	8004b8c <proceedNMTstateChange+0x114>
          setState(d,Stopped);
 8004b08:	2104      	movs	r1, #4
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f005 fe7a 	bl	800a804 <setState>
        break;
 8004b10:	e03c      	b.n	8004b8c <proceedNMTstateChange+0x114>
        if ( d->nodeState == Operational ||
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004b18:	2b05      	cmp	r3, #5
 8004b1a:	d004      	beq.n	8004b26 <proceedNMTstateChange+0xae>
             d->nodeState == Stopped )
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
        if ( d->nodeState == Operational ||
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d134      	bne.n	8004b90 <proceedNMTstateChange+0x118>
          setState(d,Pre_operational);
 8004b26:	217f      	movs	r1, #127	; 0x7f
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f005 fe6b 	bl	800a804 <setState>
        break;
 8004b2e:	e02f      	b.n	8004b90 <proceedNMTstateChange+0x118>
         if(d->NMT_Slave_Node_Reset_Callback != NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d004      	beq.n	8004b44 <proceedNMTstateChange+0xcc>
            d->NMT_Slave_Node_Reset_Callback(d);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	4798      	blx	r3
        setState(d,Initialisation);
 8004b44:	2100      	movs	r1, #0
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f005 fe5c 	bl	800a804 <setState>
        break;
 8004b4c:	e021      	b.n	8004b92 <proceedNMTstateChange+0x11a>
         UNS8 currentNodeId = getNodeId(d);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f005 ff0a 	bl	800a968 <getNodeId>
 8004b54:	4603      	mov	r3, r0
 8004b56:	73fb      	strb	r3, [r7, #15]
            if(d->NMT_Slave_Communications_Reset_Callback != NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d004      	beq.n	8004b6c <proceedNMTstateChange+0xf4>
               d->NMT_Slave_Communications_Reset_Callback(d);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	4798      	blx	r3
            *d->bDeviceNodeId = 0xFF; 
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	22ff      	movs	r2, #255	; 0xff
 8004b72:	701a      	strb	r2, [r3, #0]
            setNodeId(d, currentNodeId);
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
 8004b76:	4619      	mov	r1, r3
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f005 ff01 	bl	800a980 <setNodeId>
         setState(d,Initialisation);
 8004b7e:	2100      	movs	r1, #0
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f005 fe3f 	bl	800a804 <setState>
         break;
 8004b86:	e004      	b.n	8004b92 <proceedNMTstateChange+0x11a>
        break;
 8004b88:	bf00      	nop
 8004b8a:	e002      	b.n	8004b92 <proceedNMTstateChange+0x11a>
        break;
 8004b8c:	bf00      	nop
 8004b8e:	e000      	b.n	8004b92 <proceedNMTstateChange+0x11a>
        break;
 8004b90:	bf00      	nop
}
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <slaveSendBootUp>:
** @param d
**
** @return
**/
UNS8 slaveSendBootUp(CO_Data* d)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b086      	sub	sp, #24
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]

  MSG_WAR(0x3407, "Send a Boot-Up msg ", 0);

  /* message configuration */
  {
	  UNS16 tmp = NODE_GUARD << 7 | *d->bDeviceNodeId; 
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	b21b      	sxth	r3, r3
 8004baa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004bae:	b21b      	sxth	r3, r3
 8004bb0:	82fb      	strh	r3, [r7, #22]
	  m.cob_id = UNS16_LE(tmp);
 8004bb2:	8afb      	ldrh	r3, [r7, #22]
 8004bb4:	813b      	strh	r3, [r7, #8]
  }
  m.rtr = NOT_A_REQUEST;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	72bb      	strb	r3, [r7, #10]
  m.len = 1;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	72fb      	strb	r3, [r7, #11]
  m.data[0] = 0x00;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	733b      	strb	r3, [r7, #12]

  return canSend(d->canHandle,&m);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8004bc8:	f107 0208 	add.w	r2, r7, #8
 8004bcc:	4611      	mov	r1, r2
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fc faa2 	bl	8001118 <canSend>
 8004bd4:	4603      	mov	r3, r0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <accessDictionaryError>:

//We need the function implementation for linking
//Only a placeholder with a define isnt enough!
UNS8 accessDictionaryError(UNS16 index, UNS8 subIndex,
                           UNS32 sizeDataDict, UNS32 sizeDataGiven, UNS32 code)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b085      	sub	sp, #20
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60ba      	str	r2, [r7, #8]
 8004be6:	607b      	str	r3, [r7, #4]
 8004be8:	4603      	mov	r3, r0
 8004bea:	81fb      	strh	r3, [r7, #14]
 8004bec:	460b      	mov	r3, r1
 8004bee:	737b      	strb	r3, [r7, #13]
  default :
    MSG_WAR(0x2B20, "Unknown error code : ", code);
  }
  #endif

  return 0;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr

08004bfc <_getODentry>:
                   void * pDestData,
                   UNS32 * pExpectedSize,
                   UNS8 * pDataType,
                   UNS8 checkAccess,
                   UNS8 endianize)
{ /* DO NOT USE MSG_ERR because the macro may send a PDO -> infinite
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08a      	sub	sp, #40	; 0x28
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	607b      	str	r3, [r7, #4]
 8004c06:	460b      	mov	r3, r1
 8004c08:	817b      	strh	r3, [r7, #10]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	727b      	strb	r3, [r7, #9]
  (void)endianize;
  UNS32 errorCode;
  UNS32 szData;
  const indextable *ptrTable;

  ptrTable = (*d->scanIndexOD)(d, wIndex, &errorCode);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004c14:	f107 0214 	add.w	r2, r7, #20
 8004c18:	8979      	ldrh	r1, [r7, #10]
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	4798      	blx	r3
 8004c1e:	61f8      	str	r0, [r7, #28]

  if (errorCode != OD_SUCCESSFUL)
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <_getODentry+0x2e>
    return errorCode;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	e07a      	b.n	8004d20 <_getODentry+0x124>
  if( ptrTable->bSubCount <= bSubindex ) {
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	791b      	ldrb	r3, [r3, #4]
 8004c2e:	7a7a      	ldrb	r2, [r7, #9]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d309      	bcc.n	8004c48 <_getODentry+0x4c>
    /* Subindex not found */
    accessDictionaryError(wIndex, bSubindex, 0, 0, OD_NO_SUCH_SUBINDEX);
 8004c34:	7a79      	ldrb	r1, [r7, #9]
 8004c36:	8978      	ldrh	r0, [r7, #10]
 8004c38:	4b3b      	ldr	r3, [pc, #236]	; (8004d28 <_getODentry+0x12c>)
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f7ff ffcd 	bl	8004bde <accessDictionaryError>
    return OD_NO_SUCH_SUBINDEX;
 8004c44:	4b38      	ldr	r3, [pc, #224]	; (8004d28 <_getODentry+0x12c>)
 8004c46:	e06b      	b.n	8004d20 <_getODentry+0x124>
  }

  if (checkAccess && (ptrTable->pSubindex[bSubindex].bAccessType & WO)) {
 8004c48:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d013      	beq.n	8004c78 <_getODentry+0x7c>
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	7a7b      	ldrb	r3, [r7, #9]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	4413      	add	r3, r2
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d009      	beq.n	8004c78 <_getODentry+0x7c>
    MSG_WAR(0x2B30, "Access Type : ", ptrTable->pSubindex[bSubindex].bAccessType);
    accessDictionaryError(wIndex, bSubindex, 0, 0, OD_READ_NOT_ALLOWED);
 8004c64:	7a79      	ldrb	r1, [r7, #9]
 8004c66:	8978      	ldrh	r0, [r7, #10]
 8004c68:	4b30      	ldr	r3, [pc, #192]	; (8004d2c <_getODentry+0x130>)
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f7ff ffb5 	bl	8004bde <accessDictionaryError>
    return OD_READ_NOT_ALLOWED;
 8004c74:	4b2d      	ldr	r3, [pc, #180]	; (8004d2c <_getODentry+0x130>)
 8004c76:	e053      	b.n	8004d20 <_getODentry+0x124>
  }

  if (pDestData == 0) {
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d102      	bne.n	8004c84 <_getODentry+0x88>
    return SDOABT_GENERAL_ERROR;
 8004c7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c82:	e04d      	b.n	8004d20 <_getODentry+0x124>
  }

  if (ptrTable->pSubindex[bSubindex].size > *pExpectedSize) {
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	7a7b      	ldrb	r3, [r7, #9]
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	4413      	add	r3, r2
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d909      	bls.n	8004cac <_getODentry+0xb0>
    /* Requested variable is too large to fit into a transfer line, inform    *
     * the caller about the real size of the requested variable.              */
    *pExpectedSize = ptrTable->pSubindex[bSubindex].size;
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	7a7b      	ldrb	r3, [r7, #9]
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	4413      	add	r3, r2
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	601a      	str	r2, [r3, #0]
    return SDOABT_OUT_OF_MEMORY;
 8004ca8:	4b21      	ldr	r3, [pc, #132]	; (8004d30 <_getODentry+0x134>)
 8004caa:	e039      	b.n	8004d20 <_getODentry+0x124>
  }

  *pDataType = ptrTable->pSubindex[bSubindex].bDataType;
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	7a7b      	ldrb	r3, [r7, #9]
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	4413      	add	r3, r2
 8004cb6:	785a      	ldrb	r2, [r3, #1]
 8004cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cba:	701a      	strb	r2, [r3, #0]
  szData = ptrTable->pSubindex[bSubindex].size;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	7a7b      	ldrb	r3, [r7, #9]
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	4413      	add	r3, r2
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	61bb      	str	r3, [r7, #24]
    }
    *pExpectedSize = szData;
  }
  else /* no endianisation change */
#  endif
  memcpy(pDestData, ptrTable->pSubindex[bSubindex].pObject,szData);
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	7a7b      	ldrb	r3, [r7, #9]
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	4413      	add	r3, r2
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f007 fd7f 	bl	800c7de <memcpy>

  if(*pDataType != visible_string)
 8004ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	2b09      	cmp	r3, #9
 8004ce6:	d003      	beq.n	8004cf0 <_getODentry+0xf4>
      *pExpectedSize = szData;
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	e016      	b.n	8004d1e <_getODentry+0x122>
    /* VISIBLE_STRING objects are returned with \0 termination, if the user   *
     * provided enough space.                                                 *
     * Note:  If the parameter "Default String Size" of the Object Dictionary *
     *        Editor is larger than the string, then the \0 byte will be      *
     *        appended anyways!                                               */
    if(*pExpectedSize > ptrTable->pSubindex[bSubindex].size) {
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	6819      	ldr	r1, [r3, #0]
 8004cf8:	7a7b      	ldrb	r3, [r7, #9]
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	440b      	add	r3, r1
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d909      	bls.n	8004d18 <_getODentry+0x11c>
      *((UNS8*)pDestData + szData) = '\0';
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	4413      	add	r3, r2
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	701a      	strb	r2, [r3, #0]
      *pExpectedSize = szData + 1;
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	e002      	b.n	8004d1e <_getODentry+0x122>
    }
    else
       *pExpectedSize = szData;
 8004d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	601a      	str	r2, [r3, #0]
  }
  return OD_SUCCESSFUL;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3720      	adds	r7, #32
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	06090011 	.word	0x06090011
 8004d2c:	06010001 	.word	0x06010001
 8004d30:	05040005 	.word	0x05040005

08004d34 <_setODentry>:
                   UNS8 bSubindex,
                   void * pSourceData,
                   UNS32 * pExpectedSize,
                   UNS8 checkAccess,
                   UNS8 endianize)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08c      	sub	sp, #48	; 0x30
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	607b      	str	r3, [r7, #4]
 8004d3e:	460b      	mov	r3, r1
 8004d40:	817b      	strh	r3, [r7, #10]
 8004d42:	4613      	mov	r3, r2
 8004d44:	727b      	strb	r3, [r7, #9]
  UNS8 dataType;
  UNS32 errorCode;
  const indextable *ptrTable;
  ODCallback_t Callback;

  ptrTable =(*d->scanIndexOD)(d, wIndex, &errorCode);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004d4c:	f107 0214 	add.w	r2, r7, #20
 8004d50:	8979      	ldrh	r1, [r7, #10]
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	4798      	blx	r3
 8004d56:	6278      	str	r0, [r7, #36]	; 0x24
  if (errorCode != OD_SUCCESSFUL)
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <_setODentry+0x2e>
    return errorCode;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	e0b4      	b.n	8004ecc <_setODentry+0x198>

  if( ptrTable->bSubCount <= bSubindex ) {
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	791b      	ldrb	r3, [r3, #4]
 8004d66:	7a7a      	ldrb	r2, [r7, #9]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d30b      	bcc.n	8004d84 <_setODentry+0x50>
    /* Subindex not found */
    accessDictionaryError(wIndex, bSubindex, 0, *pExpectedSize, OD_NO_SUCH_SUBINDEX);
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	7a79      	ldrb	r1, [r7, #9]
 8004d72:	8978      	ldrh	r0, [r7, #10]
 8004d74:	4b57      	ldr	r3, [pc, #348]	; (8004ed4 <_setODentry+0x1a0>)
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f7ff ff2f 	bl	8004bde <accessDictionaryError>
    return OD_NO_SUCH_SUBINDEX;
 8004d80:	4b54      	ldr	r3, [pc, #336]	; (8004ed4 <_setODentry+0x1a0>)
 8004d82:	e0a3      	b.n	8004ecc <_setODentry+0x198>
  }
  if (checkAccess && (ptrTable->pSubindex[bSubindex].bAccessType == RO)) {
 8004d84:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d013      	beq.n	8004db4 <_setODentry+0x80>
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	7a7b      	ldrb	r3, [r7, #9]
 8004d92:	011b      	lsls	r3, r3, #4
 8004d94:	4413      	add	r3, r2
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d10b      	bne.n	8004db4 <_setODentry+0x80>
    MSG_WAR(0x2B25, "Access Type : ", ptrTable->pSubindex[bSubindex].bAccessType);
    accessDictionaryError(wIndex, bSubindex, 0, *pExpectedSize, OD_WRITE_NOT_ALLOWED);
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	7a79      	ldrb	r1, [r7, #9]
 8004da2:	8978      	ldrh	r0, [r7, #10]
 8004da4:	4b4c      	ldr	r3, [pc, #304]	; (8004ed8 <_setODentry+0x1a4>)
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	2200      	movs	r2, #0
 8004dac:	f7ff ff17 	bl	8004bde <accessDictionaryError>
    return OD_WRITE_NOT_ALLOWED;
 8004db0:	4b49      	ldr	r3, [pc, #292]	; (8004ed8 <_setODentry+0x1a4>)
 8004db2:	e08b      	b.n	8004ecc <_setODentry+0x198>
  }


  dataType = ptrTable->pSubindex[bSubindex].bDataType;
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	7a7b      	ldrb	r3, [r7, #9]
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	4413      	add	r3, r2
 8004dbe:	785b      	ldrb	r3, [r3, #1]
 8004dc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  szData = ptrTable->pSubindex[bSubindex].size;
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	7a7b      	ldrb	r3, [r7, #9]
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	4413      	add	r3, r2
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	61fb      	str	r3, [r7, #28]
  Callback = ptrTable->pSubindex[bSubindex].callback;
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	7a7b      	ldrb	r3, [r7, #9]
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	4413      	add	r3, r2
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	61bb      	str	r3, [r7, #24]

  /* check the size, we must allow to store less bytes than data size, even for intergers
	 (e.g. UNS40 : objdictedit will store it in a uint64_t, setting the size to 8 but PDO comes
	 with 5 bytes so ExpectedSize is 5 */
  if( *pExpectedSize == 0 || *pExpectedSize <= szData )
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d004      	beq.n	8004df2 <_setODentry+0xbe>
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	69fa      	ldr	r2, [r7, #28]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d35e      	bcc.n	8004eb0 <_setODentry+0x17c>
              ((UNS8 *)pSourceData) [(ptrTable->pSubindex[bSubindex].size - 1) - i] = ((UNS8 *)pSourceData)[i];
              ((UNS8 *)pSourceData)[i] = tmp;
            }
        }
#endif
      errorCode = (*d->valueRangeTest)(dataType, pSourceData);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	4798      	blx	r3
 8004e00:	4603      	mov	r3, r0
 8004e02:	617b      	str	r3, [r7, #20]
      if (errorCode) {
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00b      	beq.n	8004e22 <_setODentry+0xee>
        accessDictionaryError(wIndex, bSubindex, szData, *pExpectedSize, errorCode);
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	7a79      	ldrb	r1, [r7, #9]
 8004e12:	8978      	ldrh	r0, [r7, #10]
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	4613      	mov	r3, r2
 8004e18:	69fa      	ldr	r2, [r7, #28]
 8004e1a:	f7ff fee0 	bl	8004bde <accessDictionaryError>
        return errorCode;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	e054      	b.n	8004ecc <_setODentry+0x198>
      }
      memcpy(ptrTable->pSubindex[bSubindex].pObject,pSourceData, *pExpectedSize);
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	7a7b      	ldrb	r3, [r7, #9]
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	4413      	add	r3, r2
 8004e2c:	6898      	ldr	r0, [r3, #8]
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	f007 fcd2 	bl	800c7de <memcpy>
     /* TODO : CONFORM TO DS-301 : 
      *  - stop using NULL terminated strings
      *  - store string size in td_subindex 
      * */
      /* terminate visible_string with '\0' */
      if(dataType == visible_string && *pExpectedSize < szData)
 8004e3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e3e:	2b09      	cmp	r3, #9
 8004e40:	d10f      	bne.n	8004e62 <_setODentry+0x12e>
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d90a      	bls.n	8004e62 <_setODentry+0x12e>
        ((UNS8*)ptrTable->pSubindex[bSubindex].pObject)[*pExpectedSize] = 0;
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	7a7b      	ldrb	r3, [r7, #9]
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	4413      	add	r3, r2
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
      
      *pExpectedSize = szData;
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	69fa      	ldr	r2, [r7, #28]
 8004e66:	601a      	str	r2, [r3, #0]

      /* Callbacks */
      if(Callback){
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00b      	beq.n	8004e86 <_setODentry+0x152>
        errorCode = (Callback)(d, ptrTable, bSubindex);
 8004e6e:	7a7a      	ldrb	r2, [r7, #9]
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	4798      	blx	r3
 8004e78:	4603      	mov	r3, r0
 8004e7a:	617b      	str	r3, [r7, #20]
        if(errorCode != OD_SUCCESSFUL)
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <_setODentry+0x152>
        {
            return errorCode;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	e022      	b.n	8004ecc <_setODentry+0x198>
        }
      }

      /* Store value if requested with user defined function
	     Function should return OD_ACCES_FAILED in case of store error */
      if (ptrTable->pSubindex[bSubindex].bAccessType & TO_BE_SAVE){
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	7a7b      	ldrb	r3, [r7, #9]
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	4413      	add	r3, r2
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d008      	beq.n	8004eac <_setODentry+0x178>
        return (*d->storeODSubIndex)(d, wIndex, bSubindex);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004ea0:	7a7a      	ldrb	r2, [r7, #9]
 8004ea2:	8979      	ldrh	r1, [r7, #10]
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	4798      	blx	r3
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	e00f      	b.n	8004ecc <_setODentry+0x198>
      }
      return OD_SUCCESSFUL;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e00d      	b.n	8004ecc <_setODentry+0x198>
    }else{
      *pExpectedSize = szData;
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	601a      	str	r2, [r3, #0]
      accessDictionaryError(wIndex, bSubindex, szData, *pExpectedSize, OD_LENGTH_DATA_INVALID);
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	7a79      	ldrb	r1, [r7, #9]
 8004ebc:	8978      	ldrh	r0, [r7, #10]
 8004ebe:	4b07      	ldr	r3, [pc, #28]	; (8004edc <_setODentry+0x1a8>)
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	f7ff fe8a 	bl	8004bde <accessDictionaryError>
      return OD_LENGTH_DATA_INVALID;
 8004eca:	4b04      	ldr	r3, [pc, #16]	; (8004edc <_setODentry+0x1a8>)
    }
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3728      	adds	r7, #40	; 0x28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	06090011 	.word	0x06090011
 8004ed8:	06010002 	.word	0x06010002
 8004edc:	06070010 	.word	0x06070010

08004ee0 <RegisterSetODentryCallBack>:


UNS32 RegisterSetODentryCallBack(CO_Data* d, UNS16 wIndex, UNS8 bSubindex, ODCallback_t Callback)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	607b      	str	r3, [r7, #4]
 8004eea:	460b      	mov	r3, r1
 8004eec:	817b      	strh	r3, [r7, #10]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	727b      	strb	r3, [r7, #9]
  UNS32 errorCode;
  const indextable *odentry;

  odentry = d->scanIndexOD (d, wIndex, &errorCode);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004ef8:	f107 0210 	add.w	r2, r7, #16
 8004efc:	8979      	ldrh	r1, [r7, #10]
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	4798      	blx	r3
 8004f02:	6178      	str	r0, [r7, #20]
  if(errorCode == OD_SUCCESSFUL &&  bSubindex < odentry->bSubCount) 
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10b      	bne.n	8004f22 <RegisterSetODentryCallBack+0x42>
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	791b      	ldrb	r3, [r3, #4]
 8004f0e:	7a7a      	ldrb	r2, [r7, #9]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d206      	bcs.n	8004f22 <RegisterSetODentryCallBack+0x42>
    odentry->pSubindex[bSubindex].callback = Callback;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	7a7b      	ldrb	r3, [r7, #9]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	4413      	add	r3, r2
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	60da      	str	r2, [r3, #12]
  return errorCode;
 8004f22:	693b      	ldr	r3, [r7, #16]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <_storeODSubIndex>:


UNS32 _storeODSubIndex (CO_Data* d, UNS16 wIndex, UNS8 bSubindex)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	807b      	strh	r3, [r7, #2]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	707b      	strb	r3, [r7, #1]
  (void)d;
  (void)wIndex;
  (void)bSubindex;
  return OD_SUCCESSFUL;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr

08004f48 <buildPDO>:
 * @param numPdo The PDO number
 * @param *pdo CAN message structure CAN消息指针
 * @return 0 or 0xFF if error.
 */
UNS8 buildPDO (CO_Data * d, UNS8 numPdo, Message * pdo)
{
 8004f48:	b590      	push	{r4, r7, lr}
 8004f4a:	b095      	sub	sp, #84	; 0x54
 8004f4c:	af04      	add	r7, sp, #16
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	460b      	mov	r3, r1
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	72fb      	strb	r3, [r7, #11]
  const indextable *TPDO_com = d->objdict + d->firstIndex->PDO_TRS + numPdo;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	891b      	ldrh	r3, [r3, #8]
 8004f60:	4619      	mov	r1, r3
 8004f62:	7afb      	ldrb	r3, [r7, #11]
 8004f64:	440b      	add	r3, r1
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	4413      	add	r3, r2
 8004f6a:	637b      	str	r3, [r7, #52]	; 0x34
  const indextable *TPDO_map = d->objdict + d->firstIndex->PDO_TRS_MAP + numPdo;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	895b      	ldrh	r3, [r3, #10]
 8004f76:	4619      	mov	r1, r3
 8004f78:	7afb      	ldrb	r3, [r7, #11]
 8004f7a:	440b      	add	r3, r1
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	4413      	add	r3, r2
 8004f80:	633b      	str	r3, [r7, #48]	; 0x30

  UNS8 prp_j = 0x00;
 8004f82:	2300      	movs	r3, #0
 8004f84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  UNS32 offset = 0x00000000;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	63bb      	str	r3, [r7, #56]	; 0x38
  const UNS8 *pMappingCount = (UNS8 *) TPDO_map->pSubindex[0].pObject;
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	62fb      	str	r3, [r7, #44]	; 0x2c

  pdo->cob_id = (UNS16) UNS16_LE(*(UNS32*)TPDO_com->pSubindex[1].pObject & 0x7FF);
 8004f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3310      	adds	r3, #16
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	801a      	strh	r2, [r3, #0]
  pdo->rtr = NOT_A_REQUEST;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	709a      	strb	r2, [r3, #2]
  MSG_WAR (0x300D, "  Number of objects mapped : ", *pMappingCount);

  do
    {
      UNS8 dataType;            /* Unused */
      UNS8 tmp[] = { 0, 0, 0, 0, 0, 0, 0, 0 };  /* temporary space to hold bits */
 8004fb0:	f107 0314 	add.w	r3, r7, #20
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	605a      	str	r2, [r3, #4]

      /* pointer fo the var which holds the mapping parameter of an mapping entry  */
      UNS32 *pMappingParameter = (UNS32 *) TPDO_map->pSubindex[prp_j + 1].pObject;
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	4413      	add	r3, r2
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	62bb      	str	r3, [r7, #40]	; 0x28
      UNS16 index = (UNS16) ((*pMappingParameter) >> 16);
 8004fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	0c1b      	lsrs	r3, r3, #16
 8004fd2:	84fb      	strh	r3, [r7, #38]	; 0x26
      UNS32 Size = (UNS32) (*pMappingParameter & (UNS32) 0x000000FF);     /* Size in bits */
 8004fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	623b      	str	r3, [r7, #32]

      /* get variable only if Size != 0 and Size is lower than remaining bits in the PDO */
      if (Size && ((offset + Size) <= 64))
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d04b      	beq.n	800507a <buildPDO+0x132>
 8004fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	2b40      	cmp	r3, #64	; 0x40
 8004fea:	d846      	bhi.n	800507a <buildPDO+0x132>
        {
          UNS32 ByteSize = 1 + ((Size - 1) >> 3);        /*1->8 => 1 ; 9->16 => 2, ... */
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	08db      	lsrs	r3, r3, #3
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	613b      	str	r3, [r7, #16]
          UNS8 subIndex =
          	(UNS8) (((*pMappingParameter) >> (UNS8) 8) & (UNS32) 0x000000FF);
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	0a1b      	lsrs	r3, r3, #8
          UNS8 subIndex =
 8004ffc:	77fb      	strb	r3, [r7, #31]

          MSG_WAR (0x300F, "  got mapping parameter : ", *pMappingParameter);
          MSG_WAR (0x3050, "    at index : ", TPDO_map->index);
          MSG_WAR (0x3051, "    sub-index : ", prp_j + 1);

          if (getODentry (d, index, subIndex, tmp, &ByteSize, &dataType, 0) !=
 8004ffe:	f107 0014 	add.w	r0, r7, #20
 8005002:	7ffa      	ldrb	r2, [r7, #31]
 8005004:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8005006:	2301      	movs	r3, #1
 8005008:	9303      	str	r3, [sp, #12]
 800500a:	2300      	movs	r3, #0
 800500c:	9302      	str	r3, [sp, #8]
 800500e:	f107 031e 	add.w	r3, r7, #30
 8005012:	9301      	str	r3, [sp, #4]
 8005014:	f107 0310 	add.w	r3, r7, #16
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	4603      	mov	r3, r0
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f7ff fded 	bl	8004bfc <_getODentry>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00d      	beq.n	8005044 <buildPDO+0xfc>
              OD_SUCCESSFUL)
            {
              MSG_ERR (0x1013,
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	9301      	str	r3, [sp, #4]
 800502e:	4b1f      	ldr	r3, [pc, #124]	; (80050ac <buildPDO+0x164>)
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	f241 0313 	movw	r3, #4115	; 0x1013
 8005036:	2258      	movs	r2, #88	; 0x58
 8005038:	491d      	ldr	r1, [pc, #116]	; (80050b0 <buildPDO+0x168>)
 800503a:	481e      	ldr	r0, [pc, #120]	; (80050b4 <buildPDO+0x16c>)
 800503c:	f007 fbe2 	bl	800c804 <iprintf>
                       " Couldn't find mapped variable at index-subindex-size : ",
                       (UNS32) (*pMappingParameter));
              return 0xFF;
 8005040:	23ff      	movs	r3, #255	; 0xff
 8005042:	e02e      	b.n	80050a2 <buildPDO+0x15a>
            }
          /* copy bit per bit in little endian */
          CopyBits ((UNS8) Size, ((UNS8 *) tmp), 0, 0,
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	b2d8      	uxtb	r0, r3
                    (UNS8 *) & pdo->data[offset >> 3], (UNS8)(offset % 8), 0);
 8005048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504a:	08db      	lsrs	r3, r3, #3
          CopyBits ((UNS8) Size, ((UNS8 *) tmp), 0, 0,
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	4413      	add	r3, r2
 8005050:	3304      	adds	r3, #4
                    (UNS8 *) & pdo->data[offset >> 3], (UNS8)(offset % 8), 0);
 8005052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005054:	b2d2      	uxtb	r2, r2
          CopyBits ((UNS8) Size, ((UNS8 *) tmp), 0, 0,
 8005056:	f002 0207 	and.w	r2, r2, #7
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	f107 0414 	add.w	r4, r7, #20
 8005060:	2100      	movs	r1, #0
 8005062:	9102      	str	r1, [sp, #8]
 8005064:	9201      	str	r2, [sp, #4]
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	2300      	movs	r3, #0
 800506a:	2200      	movs	r2, #0
 800506c:	4621      	mov	r1, r4
 800506e:	f000 fa8b 	bl	8005588 <CopyBits>

          offset += Size;
 8005072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	4413      	add	r3, r2
 8005078:	63bb      	str	r3, [r7, #56]	; 0x38
        }
      prp_j++;
 800507a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800507e:	3301      	adds	r3, #1
 8005080:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    } while (prp_j < *pMappingCount);
 8005084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800508c:	429a      	cmp	r2, r3
 800508e:	d38f      	bcc.n	8004fb0 <buildPDO+0x68>

  pdo->len = (UNS8)(1 + ((offset - 1) >> 3));
 8005090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005092:	3b01      	subs	r3, #1
 8005094:	08db      	lsrs	r3, r3, #3
 8005096:	b2db      	uxtb	r3, r3
 8005098:	3301      	adds	r3, #1
 800509a:	b2da      	uxtb	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	70da      	strb	r2, [r3, #3]

  MSG_WAR (0x3015, "  End scan mapped variable", 0);

  return 0;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3744      	adds	r7, #68	; 0x44
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd90      	pop	{r4, r7, pc}
 80050aa:	bf00      	nop
 80050ac:	0800dda0 	.word	0x0800dda0
 80050b0:	0800dd64 	.word	0x0800dd64
 80050b4:	0800dd88 	.word	0x0800dd88

080050b8 <proceedPDO>:
** @param m
**
** @return
**/
UNS8 proceedPDO (CO_Data * d, Message * m)
{
 80050b8:	b5b0      	push	{r4, r5, r7, lr}
 80050ba:	b098      	sub	sp, #96	; 0x60
 80050bc:	af04      	add	r7, sp, #16
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  UNS8 numPdo;
  UNS8 numMap;                  /* Number of the mapped varable */
  UNS8 *pMappingCount = NULL;   /* count of mapped objects... */
 80050c2:	2300      	movs	r3, #0
 80050c4:	647b      	str	r3, [r7, #68]	; 0x44
  /* pointer to the var which is mapped to a pdo... */
  /*  void *     pMappedAppObject = NULL;   */
  /* pointer fo the var which holds the mapping parameter of an
     mapping entry */
  UNS32 *pMappingParameter = NULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	643b      	str	r3, [r7, #64]	; 0x40
  UNS8 *pTransmissionType = NULL;       /* pointer to the transmission
 80050ca:	2300      	movs	r3, #0
 80050cc:	63fb      	str	r3, [r7, #60]	; 0x3c
                                           type */
  UNS32 *pwCobId = NULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	63bb      	str	r3, [r7, #56]	; 0x38
  UNS8 status;
  UNS32 objDict;
  UNS16 offsetObjdict;
  UNS16 lastIndex;

  status = state2;
 80050d2:	2302      	movs	r3, #2
 80050d4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

  MSG_WAR (0x3935, "proceedPDO, cobID : ", (UNS16_LE(m->cob_id) & 0x7ff));
  offset = 0x00;
 80050d8:	2300      	movs	r3, #0
 80050da:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  numPdo = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  numMap = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  if ((*m).rtr == NOT_A_REQUEST)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	789b      	ldrb	r3, [r3, #2]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f040 8126 	bne.w	8005340 <proceedPDO+0x288>
    { 
      offsetObjdict = d->firstIndex->PDO_RCV;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	889b      	ldrh	r3, [r3, #4]
 80050fa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      lastIndex = d->lastIndex->PDO_RCV;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	889b      	ldrh	r3, [r3, #4]
 8005104:	86fb      	strh	r3, [r7, #54]	; 0x36

      if (offsetObjdict)
 8005106:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 8230 	beq.w	8005570 <proceedPDO+0x4b8>
        while (offsetObjdict <= lastIndex)
 8005110:	e10f      	b.n	8005332 <proceedPDO+0x27a>
          {
            switch (status)
 8005112:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005116:	2b02      	cmp	r3, #2
 8005118:	d002      	beq.n	8005120 <proceedPDO+0x68>
 800511a:	2b04      	cmp	r3, #4
 800511c:	d025      	beq.n	800516a <proceedPDO+0xb2>
 800511e:	e108      	b.n	8005332 <proceedPDO+0x27a>
              {

              case state2:
                pwCobId = d->objdict[offsetObjdict].pSubindex[1].pObject;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	4413      	add	r3, r2
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3310      	adds	r3, #16
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	63bb      	str	r3, [r7, #56]	; 0x38
                uint32_t fjdskjf=*pwCobId;
 8005134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
                if (*pwCobId == UNS16_LE(m->cob_id))
 800513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	8812      	ldrh	r2, [r2, #0]
 8005142:	4293      	cmp	r3, r2
 8005144:	d103      	bne.n	800514e <proceedPDO+0x96>
                  {
                    /* The cobId is recognized */
                    status = state4;
 8005146:	2304      	movs	r3, #4
 8005148:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                    MSG_WAR (0x3936, "cobId found at index ",
                             0x1400 + numPdo);
                    break;
 800514c:	e0f1      	b.n	8005332 <proceedPDO+0x27a>
                  }
                else
                  {
                    /* received cobId does not match */
                    numPdo++;
 800514e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005152:	3301      	adds	r3, #1
 8005154:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                    offsetObjdict++;
 8005158:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800515c:	3301      	adds	r3, #1
 800515e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                    status = state2;
 8005162:	2302      	movs	r3, #2
 8005164:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                    break;
 8005168:	e0e3      	b.n	8005332 <proceedPDO+0x27a>
                  }

              case state4:     /* Get Mapped Objects Number */
                /* The cobId of the message received has been found in the
                   dictionnary. */
                offsetObjdict = d->firstIndex->PDO_RCV_MAP;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	88db      	ldrh	r3, [r3, #6]
 8005170:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                lastIndex = d->lastIndex->PDO_RCV_MAP;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	88db      	ldrh	r3, [r3, #6]
 800517a:	86fb      	strh	r3, [r7, #54]	; 0x36
                pMappingCount =
                  (UNS8 *) (d->objdict + offsetObjdict +
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8005184:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005188:	440b      	add	r3, r1
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	4413      	add	r3, r2
                            numPdo)->pSubindex[0].pObject;
 800518e:	681b      	ldr	r3, [r3, #0]
                pMappingCount =
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	647b      	str	r3, [r7, #68]	; 0x44
                numMap = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                while (numMap < *pMappingCount)
 800519a:	e08d      	b.n	80052b8 <proceedPDO+0x200>
                  {
                    UNS8 tmp[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
 800519c:	f107 031c 	add.w	r3, r7, #28
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	605a      	str	r2, [r3, #4]
                    UNS32 ByteSize;
                    pMappingParameter =
                      (UNS32 *) (d->objdict + offsetObjdict +
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 80051ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80051b2:	440b      	add	r3, r1
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	4413      	add	r3, r2
                                 numPdo)->pSubindex[numMap + 1].pObject;
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80051be:	3301      	adds	r3, #1
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	4413      	add	r3, r2
                    pMappingParameter =
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	643b      	str	r3, [r7, #64]	; 0x40
                    if (pMappingParameter == NULL)
 80051c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10e      	bne.n	80051ec <proceedPDO+0x134>
                      {
                        MSG_ERR (0x1937, "Couldn't get mapping parameter : ",
 80051ce:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80051d2:	3301      	adds	r3, #1
 80051d4:	9301      	str	r3, [sp, #4]
 80051d6:	4b9f      	ldr	r3, [pc, #636]	; (8005454 <proceedPDO+0x39c>)
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	f641 1337 	movw	r3, #6455	; 0x1937
 80051de:	22ef      	movs	r2, #239	; 0xef
 80051e0:	499d      	ldr	r1, [pc, #628]	; (8005458 <proceedPDO+0x3a0>)
 80051e2:	489e      	ldr	r0, [pc, #632]	; (800545c <proceedPDO+0x3a4>)
 80051e4:	f007 fb0e 	bl	800c804 <iprintf>
                                 numMap + 1);
                        return 0xFF;
 80051e8:	23ff      	movs	r3, #255	; 0xff
 80051ea:	e1c2      	b.n	8005572 <proceedPDO+0x4ba>
                    /* The 16 hight bits contains the index, the medium 8 bits
                       contains the subindex, */
                    /* and the lower 8 bits contains the size of the mapped
                       variable. */

                    Size = (UNS8) (*pMappingParameter & (UNS32) 0x000000FF);
 80051ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                    /* set variable only if Size != 0 and 
                     * Size is lower than remaining bits in the PDO */
                    if (Size && ((offset + Size) <= (m->len << 3)))
 80051f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d058      	beq.n	80052ae <proceedPDO+0x1f6>
 80051fc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005200:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005204:	441a      	add	r2, r3
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	78db      	ldrb	r3, [r3, #3]
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	429a      	cmp	r2, r3
 800520e:	dc4e      	bgt.n	80052ae <proceedPDO+0x1f6>
                      {
                        /* copy bit per bit in little endian */
                        CopyBits (Size, (UNS8 *) & m->data[offset >> 3],
 8005210:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005214:	08db      	lsrs	r3, r3, #3
 8005216:	b2db      	uxtb	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	4413      	add	r3, r2
 800521e:	1d19      	adds	r1, r3, #4
 8005220:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	b2da      	uxtb	r2, r3
 800522a:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 800522e:	2300      	movs	r3, #0
 8005230:	9302      	str	r3, [sp, #8]
 8005232:	2300      	movs	r3, #0
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	f107 031c 	add.w	r3, r7, #28
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	2300      	movs	r3, #0
 800523e:	f000 f9a3 	bl	8005588 <CopyBits>
                                  offset % 8, 0, ((UNS8 *) tmp), 0, 0);
                        /*1->8 => 1 ; 9->16 =>2, ... */
                        ByteSize = (UNS32)(1 + ((Size - 1) >> 3));
 8005242:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005246:	3b01      	subs	r3, #1
 8005248:	10db      	asrs	r3, r3, #3
 800524a:	3301      	adds	r3, #1
 800524c:	61bb      	str	r3, [r7, #24]

                        objDict =
                          setODentry (d, (UNS16) ((*pMappingParameter) >> 16),
 800524e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	0c1b      	lsrs	r3, r3, #16
 8005254:	b299      	uxth	r1, r3
 8005256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	0a1b      	lsrs	r3, r3, #8
 800525c:	b2da      	uxtb	r2, r3
                        objDict =
 800525e:	f107 001c 	add.w	r0, r7, #28
 8005262:	2301      	movs	r3, #1
 8005264:	9302      	str	r3, [sp, #8]
 8005266:	2300      	movs	r3, #0
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	f107 0318 	add.w	r3, r7, #24
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	4603      	mov	r3, r0
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7ff fd5e 	bl	8004d34 <_setODentry>
 8005278:	62b8      	str	r0, [r7, #40]	; 0x28
                                      (UNS8) (((*pMappingParameter) >> 8) &
                                              0xFF), tmp, &ByteSize, 0);

                        if (objDict != OD_SUCCESSFUL)
 800527a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00f      	beq.n	80052a0 <proceedPDO+0x1e8>
                          {
                            MSG_ERR (0x1938,
 8005280:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8005284:	3301      	adds	r3, #1
 8005286:	9301      	str	r3, [sp, #4]
 8005288:	4b75      	ldr	r3, [pc, #468]	; (8005460 <proceedPDO+0x3a8>)
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	f641 1338 	movw	r3, #6456	; 0x1938
 8005290:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8005294:	4970      	ldr	r1, [pc, #448]	; (8005458 <proceedPDO+0x3a0>)
 8005296:	4871      	ldr	r0, [pc, #452]	; (800545c <proceedPDO+0x3a4>)
 8005298:	f007 fab4 	bl	800c804 <iprintf>
                                     numMap + 1);
                            MSG_WAR (0x2939, "         Mapped at index : ",
                                     (*pMappingParameter) >> 16);
                            MSG_WAR (0x2940, "                subindex : ",
                                     ((*pMappingParameter) >> 8) & 0xFF);
                            return 0xFF;
 800529c:	23ff      	movs	r3, #255	; 0xff
 800529e:	e168      	b.n	8005572 <proceedPDO+0x4ba>
                                 UNS16_LE(m->cob_id));
                        MSG_WAR (0x3943, "         Mapped at index : ",
                                 (*pMappingParameter) >> 16);
                        MSG_WAR (0x3944, "                subindex : ",
                                 ((*pMappingParameter) >> 8) & 0xFF);
                        offset += Size;
 80052a0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80052a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052a8:	4413      	add	r3, r2
 80052aa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                      }
                    numMap++;
 80052ae:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80052b2:	3301      	adds	r3, #1
 80052b4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                while (numMap < *pMappingCount)
 80052b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80052c0:	429a      	cmp	r2, r3
 80052c2:	f4ff af6b 	bcc.w	800519c <proceedPDO+0xe4>
                  }             /* end loop while on mapped variables */
                if (d->RxPDO_EventTimers)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d02f      	beq.n	800532e <proceedPDO+0x276>
                {
                    TIMEVAL EventTimerDuration = *(UNS16 *)d->objdict[offsetObjdict].pSubindex[5].pObject;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	4413      	add	r3, r2
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3350      	adds	r3, #80	; 0x50
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	633b      	str	r3, [r7, #48]	; 0x30
                    if(EventTimerDuration){
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d021      	beq.n	800532e <proceedPDO+0x276>
                        DelAlarm (d->RxPDO_EventTimers[numPdo]);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	4413      	add	r3, r2
 80052f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f005 fd0e 	bl	800ad1c <DelAlarm>
                        d->RxPDO_EventTimers[numPdo] = SetAlarm (d, numPdo, d->RxPDO_EventTimers_Handler,
 8005300:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6918      	ldr	r0, [r3, #16]
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	2264      	movs	r2, #100	; 0x64
 800530c:	fb02 f503 	mul.w	r5, r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	18d4      	adds	r4, r2, r3
 800531c:	2300      	movs	r3, #0
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	462b      	mov	r3, r5
 8005322:	4602      	mov	r2, r0
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f005 fc7d 	bl	800ac24 <SetAlarm>
 800532a:	4603      	mov	r3, r0
 800532c:	8023      	strh	r3, [r4, #0]
                        MS_TO_TIMEVAL (EventTimerDuration), 0);
                    }
                }
                return 0;
 800532e:	2300      	movs	r3, #0
 8005330:	e11f      	b.n	8005572 <proceedPDO+0x4ba>
        while (offsetObjdict <= lastIndex)
 8005332:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005336:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005338:	429a      	cmp	r2, r3
 800533a:	f67f aeea 	bls.w	8005112 <proceedPDO+0x5a>
 800533e:	e117      	b.n	8005570 <proceedPDO+0x4b8>

              }                 /* end switch status */
          }                     /* end while */
    }                           /* end if Donnees */
  else if ((*m).rtr == REQUEST)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	789b      	ldrb	r3, [r3, #2]
 8005344:	2b01      	cmp	r3, #1
 8005346:	f040 8113 	bne.w	8005570 <proceedPDO+0x4b8>
    {
      MSG_WAR (0x3946, "Receive a PDO request cobId : ", UNS16_LE(m->cob_id));
      status = state1;
 800534a:	2301      	movs	r3, #1
 800534c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
      offsetObjdict = d->firstIndex->PDO_TRS;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	891b      	ldrh	r3, [r3, #8]
 8005356:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      lastIndex = d->lastIndex->PDO_TRS;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	891b      	ldrh	r3, [r3, #8]
 8005360:	86fb      	strh	r3, [r7, #54]	; 0x36
      if (offsetObjdict)
 8005362:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 8102 	beq.w	8005570 <proceedPDO+0x4b8>
        while (offsetObjdict <= lastIndex)
 800536c:	e0fa      	b.n	8005564 <proceedPDO+0x4ac>
          {
            /* study of all PDO stored in the objects dictionary */

            switch (status)
 800536e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005372:	2b04      	cmp	r3, #4
 8005374:	d027      	beq.n	80053c6 <proceedPDO+0x30e>
 8005376:	2b05      	cmp	r3, #5
 8005378:	f000 80cf 	beq.w	800551a <proceedPDO+0x462>
 800537c:	2b01      	cmp	r3, #1
 800537e:	d000      	beq.n	8005382 <proceedPDO+0x2ca>
 8005380:	e0f0      	b.n	8005564 <proceedPDO+0x4ac>

              case state1:     /* check the CobId */
                /* get CobId of the dictionary which match to the received PDO
                 */
                pwCobId =
                   (d->objdict +
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	4413      	add	r3, r2
                             offsetObjdict)->pSubindex[1].pObject;
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3310      	adds	r3, #16
                pwCobId =
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	63bb      	str	r3, [r7, #56]	; 0x38
                if (*pwCobId == UNS16_LE(m->cob_id))
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	8812      	ldrh	r2, [r2, #0]
 800539e:	4293      	cmp	r3, r2
 80053a0:	d103      	bne.n	80053aa <proceedPDO+0x2f2>
                  {
                    status = state4;
 80053a2:	2304      	movs	r3, #4
 80053a4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                    break;
 80053a8:	e0dc      	b.n	8005564 <proceedPDO+0x4ac>
                  }
                else
                  {
                    numPdo++;
 80053aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80053ae:	3301      	adds	r3, #1
 80053b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                    offsetObjdict++;
 80053b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80053b8:	3301      	adds	r3, #1
 80053ba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                  }
                status = state1;
 80053be:	2301      	movs	r3, #1
 80053c0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                break;
 80053c4:	e0ce      	b.n	8005564 <proceedPDO+0x4ac>


              case state4:     /* check transmission type */
                pTransmissionType =
                  (UNS8 *) d->objdict[offsetObjdict].pSubindex[2].pObject;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4413      	add	r3, r2
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3320      	adds	r3, #32
                pTransmissionType =
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	63fb      	str	r3, [r7, #60]	; 0x3c
                /* If PDO is to be sampled and send on RTR, do it */
                if ((*pTransmissionType == TRANS_RTR))
 80053da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2bfd      	cmp	r3, #253	; 0xfd
 80053e0:	d103      	bne.n	80053ea <proceedPDO+0x332>
                  {
                    status = state5;
 80053e2:	2305      	movs	r3, #5
 80053e4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                    break;
 80053e8:	e0bc      	b.n	8005564 <proceedPDO+0x4ac>
                  }
                /* RTR_SYNC means data prepared at SYNC, transmitted on RTR */
                else if ((*pTransmissionType == TRANS_RTR_SYNC))
 80053ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	2bfc      	cmp	r3, #252	; 0xfc
 80053f0:	d13a      	bne.n	8005468 <proceedPDO+0x3b0>
                  {
                    if (d->PDO_status[numPdo].
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6899      	ldr	r1, [r3, #8]
 80053f6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80053fa:	4613      	mov	r3, r2
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	4413      	add	r3, r2
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	440b      	add	r3, r1
 8005404:	781b      	ldrb	r3, [r3, #0]
                        transmit_type_parameter & PDO_RTR_SYNC_READY)
 8005406:	f003 0301 	and.w	r3, r3, #1
                    if (d->PDO_status[numPdo].
 800540a:	2b00      	cmp	r3, #0
 800540c:	d011      	beq.n	8005432 <proceedPDO+0x37a>
                      {
                        /*Data ready, just send */
                        canSend (d->canHandle,
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 01e4 	ldr.w	r0, [r3, #484]	; 0x1e4
                                 &d->PDO_status[numPdo].last_message);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6899      	ldr	r1, [r3, #8]
 8005418:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800541c:	4613      	mov	r3, r2
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	4413      	add	r3, r2
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	440b      	add	r3, r1
                        canSend (d->canHandle,
 8005426:	3306      	adds	r3, #6
 8005428:	4619      	mov	r1, r3
 800542a:	f7fb fe75 	bl	8001118 <canSend>
                        return 0;
 800542e:	2300      	movs	r3, #0
 8005430:	e09f      	b.n	8005572 <proceedPDO+0x4ba>
                      }
                    else
                      {
                        /* if SYNC did never occur, transmit current data */
                        /* DS301 do not tell what to do in such a case... */
                        MSG_ERR (0x1947,
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <proceedPDO+0x3ac>)
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	f641 1347 	movw	r3, #6471	; 0x1947
 8005440:	f240 126b 	movw	r2, #363	; 0x16b
 8005444:	4904      	ldr	r1, [pc, #16]	; (8005458 <proceedPDO+0x3a0>)
 8005446:	4805      	ldr	r0, [pc, #20]	; (800545c <proceedPDO+0x3a4>)
 8005448:	f007 f9dc 	bl	800c804 <iprintf>
                                 "Not ready RTR_SYNC TPDO send current data : ",
                                 UNS16_LE(m->cob_id));
                        status = state5;
 800544c:	2305      	movs	r3, #5
 800544e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                      }
                    break;
 8005452:	e087      	b.n	8005564 <proceedPDO+0x4ac>
 8005454:	0800de08 	.word	0x0800de08
 8005458:	0800dd64 	.word	0x0800dd64
 800545c:	0800dd88 	.word	0x0800dd88
 8005460:	0800de2c 	.word	0x0800de2c
 8005464:	0800de54 	.word	0x0800de54
                  }
                else if ((*pTransmissionType == TRANS_EVENT_PROFILE) ||
 8005468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2bff      	cmp	r3, #255	; 0xff
 800546e:	d003      	beq.n	8005478 <proceedPDO+0x3c0>
                         (*pTransmissionType == TRANS_EVENT_SPECIFIC))
 8005470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005472:	781b      	ldrb	r3, [r3, #0]
                else if ((*pTransmissionType == TRANS_EVENT_PROFILE) ||
 8005474:	2bfe      	cmp	r3, #254	; 0xfe
 8005476:	d14e      	bne.n	8005516 <proceedPDO+0x45e>
                  {
                    /* Zap all timers and inhibit flag */
                    d->PDO_status[numPdo].event_timer =
                      DelAlarm (d->PDO_status[numPdo].event_timer);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6899      	ldr	r1, [r3, #8]
 800547c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005480:	4613      	mov	r3, r2
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	4413      	add	r3, r2
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	440b      	add	r3, r1
 800548a:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
                    d->PDO_status[numPdo].event_timer =
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6899      	ldr	r1, [r3, #8]
 8005492:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005496:	4613      	mov	r3, r2
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	4413      	add	r3, r2
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	18cc      	adds	r4, r1, r3
                      DelAlarm (d->PDO_status[numPdo].event_timer);
 80054a0:	f005 fc3c 	bl	800ad1c <DelAlarm>
 80054a4:	4603      	mov	r3, r0
                    d->PDO_status[numPdo].event_timer =
 80054a6:	8063      	strh	r3, [r4, #2]
                    d->PDO_status[numPdo].inhibit_timer =
                      DelAlarm (d->PDO_status[numPdo].inhibit_timer);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6899      	ldr	r1, [r3, #8]
 80054ac:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80054b0:	4613      	mov	r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	4413      	add	r3, r2
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	440b      	add	r3, r1
 80054ba:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
                    d->PDO_status[numPdo].inhibit_timer =
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6899      	ldr	r1, [r3, #8]
 80054c2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80054c6:	4613      	mov	r3, r2
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	4413      	add	r3, r2
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	18cc      	adds	r4, r1, r3
                      DelAlarm (d->PDO_status[numPdo].inhibit_timer);
 80054d0:	f005 fc24 	bl	800ad1c <DelAlarm>
 80054d4:	4603      	mov	r3, r0
                    d->PDO_status[numPdo].inhibit_timer =
 80054d6:	80a3      	strh	r3, [r4, #4]
                    d->PDO_status[numPdo].transmit_type_parameter &=
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6899      	ldr	r1, [r3, #8]
 80054dc:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80054e0:	4613      	mov	r3, r2
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	4413      	add	r3, r2
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	440b      	add	r3, r1
 80054ea:	7819      	ldrb	r1, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6898      	ldr	r0, [r3, #8]
 80054f0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80054f4:	4613      	mov	r3, r2
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	4413      	add	r3, r2
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	4403      	add	r3, r0
 80054fe:	f021 0201 	bic.w	r2, r1, #1
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]
                      ~PDO_INHIBITED;
                    /* Call  PDOEventTimerAlarm for this TPDO, 
                     * this will trigger emission et reset timers */
                    PDOEventTimerAlarm (d, numPdo);
 8005506:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800550a:	4619      	mov	r1, r3
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fa03 	bl	8005918 <PDOEventTimerAlarm>
                    return 0;
 8005512:	2300      	movs	r3, #0
 8005514:	e02d      	b.n	8005572 <proceedPDO+0x4ba>
                  {
                    /* The requested PDO is not to send on request. So, does
                       nothing. */
                    MSG_WAR (0x2947, "PDO is not to send on request : ",
                             UNS16_LE(m->cob_id));
                    return 0xFF;
 8005516:	23ff      	movs	r3, #255	; 0xff
 8005518:	e02b      	b.n	8005572 <proceedPDO+0x4ba>
                  }

              case state5:     /* build and send requested PDO */
                {
                  Message pdo;
                  if (buildPDO (d, numPdo, &pdo))
 800551a:	f107 020c 	add.w	r2, r7, #12
 800551e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff fd0f 	bl	8004f48 <buildPDO>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00e      	beq.n	800554e <proceedPDO+0x496>
                    {
                      MSG_ERR (0x1948, " Couldn't build TPDO number : ", numPdo);
 8005530:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005534:	9301      	str	r3, [sp, #4]
 8005536:	4b11      	ldr	r3, [pc, #68]	; (800557c <proceedPDO+0x4c4>)
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	f641 1348 	movw	r3, #6472	; 0x1948
 800553e:	f240 128d 	movw	r2, #397	; 0x18d
 8005542:	490f      	ldr	r1, [pc, #60]	; (8005580 <proceedPDO+0x4c8>)
 8005544:	480f      	ldr	r0, [pc, #60]	; (8005584 <proceedPDO+0x4cc>)
 8005546:	f007 f95d 	bl	800c804 <iprintf>
                      return 0xFF;
 800554a:	23ff      	movs	r3, #255	; 0xff
 800554c:	e011      	b.n	8005572 <proceedPDO+0x4ba>
                    }
                  canSend (d->canHandle, &pdo);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8005554:	f107 020c 	add.w	r2, r7, #12
 8005558:	4611      	mov	r1, r2
 800555a:	4618      	mov	r0, r3
 800555c:	f7fb fddc 	bl	8001118 <canSend>
                  return 0;
 8005560:	2300      	movs	r3, #0
 8005562:	e006      	b.n	8005572 <proceedPDO+0x4ba>
        while (offsetObjdict <= lastIndex)
 8005564:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005568:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800556a:	429a      	cmp	r2, r3
 800556c:	f67f aeff 	bls.w	800536e <proceedPDO+0x2b6>
                }
              }                 /* end switch status */
          }                     /* end while */
    }                           /* end if Requete */

  return 0;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3750      	adds	r7, #80	; 0x50
 8005576:	46bd      	mov	sp, r7
 8005578:	bdb0      	pop	{r4, r5, r7, pc}
 800557a:	bf00      	nop
 800557c:	0800de84 	.word	0x0800de84
 8005580:	0800dd64 	.word	0x0800dd64
 8005584:	0800dd88 	.word	0x0800dd88

08005588 <CopyBits>:
** @param DestBigEndian
**/
void CopyBits (UNS8 NbBits, UNS8 * SrcByteIndex, UNS8 SrcBitIndex,
          UNS8 SrcBigEndian, UNS8 * DestByteIndex, UNS8 DestBitIndex,
          UNS8 DestBigEndian)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6039      	str	r1, [r7, #0]
 8005590:	4611      	mov	r1, r2
 8005592:	461a      	mov	r2, r3
 8005594:	4603      	mov	r3, r0
 8005596:	71fb      	strb	r3, [r7, #7]
 8005598:	460b      	mov	r3, r1
 800559a:	71bb      	strb	r3, [r7, #6]
 800559c:	4613      	mov	r3, r2
 800559e:	717b      	strb	r3, [r7, #5]
  /* This loop copy as many bits that it can each time, crossing */
  /* successively bytes */
  // boundaries from LSB to MSB.
  while (NbBits > 0)
 80055a0:	e082      	b.n	80056a8 <CopyBits+0x120>
    {
      /* Bit missalignement between src and dest */
      INTEGER8 Vect = DestBitIndex - SrcBitIndex;
 80055a2:	7f3a      	ldrb	r2, [r7, #28]
 80055a4:	79bb      	ldrb	r3, [r7, #6]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	73fb      	strb	r3, [r7, #15]

      /* We can now get src and align it to dest */
      UNS8 Aligned =
          (UNS8)(Vect > 0 ? *SrcByteIndex << Vect : *SrcByteIndex >> -Vect);
 80055ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	dd08      	ble.n	80055c6 <CopyBits+0x3e>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	461a      	mov	r2, r3
 80055ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055be:	fa02 f303 	lsl.w	r3, r2, r3
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	e008      	b.n	80055d8 <CopyBits+0x50>
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055d0:	425b      	negs	r3, r3
 80055d2:	fa42 f303 	asr.w	r3, r2, r3
 80055d6:	b2db      	uxtb	r3, r3
      UNS8 Aligned =
 80055d8:	73bb      	strb	r3, [r7, #14]

      /* Compute the nb of bit we will be able to copy */
      UNS8 BoudaryLimit = (Vect > 0 ? 8 - DestBitIndex : 8 - SrcBitIndex);
 80055da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	dd04      	ble.n	80055ec <CopyBits+0x64>
 80055e2:	7f3b      	ldrb	r3, [r7, #28]
 80055e4:	f1c3 0308 	rsb	r3, r3, #8
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	e003      	b.n	80055f4 <CopyBits+0x6c>
 80055ec:	79bb      	ldrb	r3, [r7, #6]
 80055ee:	f1c3 0308 	rsb	r3, r3, #8
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	737b      	strb	r3, [r7, #13]
      UNS8 BitsToCopy = BoudaryLimit > NbBits ? NbBits : BoudaryLimit;
 80055f6:	7b7a      	ldrb	r2, [r7, #13]
 80055f8:	79fb      	ldrb	r3, [r7, #7]
 80055fa:	4293      	cmp	r3, r2
 80055fc:	bf28      	it	cs
 80055fe:	4613      	movcs	r3, r2
 8005600:	733b      	strb	r3, [r7, #12]

      /* Create a mask that will serve in: */
      UNS8 Mask = (UNS8)
        ((0xff << (DestBitIndex + BitsToCopy)) |
 8005602:	7f3a      	ldrb	r2, [r7, #28]
 8005604:	7b3b      	ldrb	r3, [r7, #12]
 8005606:	4413      	add	r3, r2
 8005608:	22ff      	movs	r2, #255	; 0xff
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	b25a      	sxtb	r2, r3
         (0xff >> (8 - DestBitIndex)));
 8005610:	7f3b      	ldrb	r3, [r7, #28]
 8005612:	f1c3 0308 	rsb	r3, r3, #8
 8005616:	21ff      	movs	r1, #255	; 0xff
 8005618:	fa41 f303 	asr.w	r3, r1, r3
        ((0xff << (DestBitIndex + BitsToCopy)) |
 800561c:	b25b      	sxtb	r3, r3
 800561e:	4313      	orrs	r3, r2
 8005620:	b25b      	sxtb	r3, r3
      UNS8 Mask = (UNS8)
 8005622:	72fb      	strb	r3, [r7, #11]

      /* - Filtering src */
      UNS8 Filtered = (UNS8)(Aligned & ~Mask);
 8005624:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005628:	43db      	mvns	r3, r3
 800562a:	b25a      	sxtb	r2, r3
 800562c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005630:	4013      	ands	r3, r2
 8005632:	b25b      	sxtb	r3, r3
 8005634:	72bb      	strb	r3, [r7, #10]

      /* - and erase bits where we write, preserve where we don't */
      *DestByteIndex &= Mask;
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	781a      	ldrb	r2, [r3, #0]
 800563a:	7afb      	ldrb	r3, [r7, #11]
 800563c:	4013      	ands	r3, r2
 800563e:	b2da      	uxtb	r2, r3
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	701a      	strb	r2, [r3, #0]

      /* Then write. */
      *DestByteIndex |= Filtered;
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	781a      	ldrb	r2, [r3, #0]
 8005648:	7abb      	ldrb	r3, [r7, #10]
 800564a:	4313      	orrs	r3, r2
 800564c:	b2da      	uxtb	r2, r3
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	701a      	strb	r2, [r3, #0]

      /*Compute next time cursors for src */
      if ((SrcBitIndex += BitsToCopy) > 7)      /* cross boundary ? */
 8005652:	79ba      	ldrb	r2, [r7, #6]
 8005654:	7b3b      	ldrb	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	71bb      	strb	r3, [r7, #6]
 800565a:	79bb      	ldrb	r3, [r7, #6]
 800565c:	2b07      	cmp	r3, #7
 800565e:	d90b      	bls.n	8005678 <CopyBits+0xf0>
        {
          SrcBitIndex = 0;      /* First bit */
 8005660:	2300      	movs	r3, #0
 8005662:	71bb      	strb	r3, [r7, #6]
          SrcByteIndex += (SrcBigEndian ? -1 : 1);      /* Next byte */
 8005664:	797b      	ldrb	r3, [r7, #5]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <CopyBits+0xe8>
 800566a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800566e:	e000      	b.n	8005672 <CopyBits+0xea>
 8005670:	2301      	movs	r3, #1
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	4413      	add	r3, r2
 8005676:	603b      	str	r3, [r7, #0]
        }


      /*Compute next time cursors for dest */
      if ((DestBitIndex += BitsToCopy) > 7)
 8005678:	7f3a      	ldrb	r2, [r7, #28]
 800567a:	7b3b      	ldrb	r3, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	773b      	strb	r3, [r7, #28]
 8005680:	7f3b      	ldrb	r3, [r7, #28]
 8005682:	2b07      	cmp	r3, #7
 8005684:	d90c      	bls.n	80056a0 <CopyBits+0x118>
        {
          DestBitIndex = 0;     /* First bit */
 8005686:	2300      	movs	r3, #0
 8005688:	773b      	strb	r3, [r7, #28]
          DestByteIndex += (DestBigEndian ? -1 : 1);    /* Next byte */
 800568a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <CopyBits+0x110>
 8005692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005696:	e000      	b.n	800569a <CopyBits+0x112>
 8005698:	2301      	movs	r3, #1
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4413      	add	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
        }

      /*And decrement counter. */
      NbBits -= BitsToCopy;
 80056a0:	79fa      	ldrb	r2, [r7, #7]
 80056a2:	7b3b      	ldrb	r3, [r7, #12]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	71fb      	strb	r3, [r7, #7]
  while (NbBits > 0)
 80056a8:	79fb      	ldrb	r3, [r7, #7]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f47f af79 	bne.w	80055a2 <CopyBits+0x1a>
    }

}
 80056b0:	bf00      	nop
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bc80      	pop	{r7}
 80056b8:	4770      	bx	lr

080056ba <sendPdo>:
** @param d 
** @param pdoNum PDO_status对应序号或者通讯管道
** @param pdo 发送内容
**/
static void sendPdo(CO_Data * d, UNS32 pdoNum, Message * pdo)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	607a      	str	r2, [r7, #4]
  /*store_as_last_message */
  d->PDO_status[pdoNum].last_message = *pdo;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6899      	ldr	r1, [r3, #8]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	4613      	mov	r3, r2
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	4413      	add	r3, r2
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	440b      	add	r3, r1
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	3306      	adds	r3, #6
 80056da:	6810      	ldr	r0, [r2, #0]
 80056dc:	6851      	ldr	r1, [r2, #4]
 80056de:	6892      	ldr	r2, [r2, #8]
 80056e0:	6018      	str	r0, [r3, #0]
 80056e2:	6059      	str	r1, [r3, #4]
 80056e4:	609a      	str	r2, [r3, #8]
  MSG_WAR (0x396D, "sendPDO cobId :", UNS16_LE(pdo->cob_id));
  MSG_WAR (0x396E, "     Nb octets  : ", pdo->len);

  canSend (d->canHandle, pdo);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fb fd12 	bl	8001118 <canSend>
}
 80056f4:	bf00      	nop
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <sendOnePDOevent>:
 * @param *d Pointer on a CAN object data structure
 */

UNS8
sendOnePDOevent (CO_Data * d, UNS8 pdoNum)
{
 80056fc:	b5b0      	push	{r4, r5, r7, lr}
 80056fe:	b08a      	sub	sp, #40	; 0x28
 8005700:	af02      	add	r7, sp, #8
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	70fb      	strb	r3, [r7, #3]
  UNS16 offsetObjdict;
  Message pdo;
  if (!d->CurrentCommunicationState.csPDO ||
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00c      	beq.n	800572c <sendOnePDOevent+0x30>
      (d->PDO_status[pdoNum].transmit_type_parameter & PDO_INHIBITED))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6899      	ldr	r1, [r3, #8]
 8005716:	78fa      	ldrb	r2, [r7, #3]
 8005718:	4613      	mov	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	4413      	add	r3, r2
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	440b      	add	r3, r1
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	f003 0301 	and.w	r3, r3, #1
  if (!d->CurrentCommunicationState.csPDO ||
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <sendOnePDOevent+0x34>
    {
      return 0;
 800572c:	2300      	movs	r3, #0
 800572e:	e0e3      	b.n	80058f8 <sendOnePDOevent+0x1fc>
    }

  offsetObjdict = (UNS16) (d->firstIndex->PDO_TRS + pdoNum);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	891a      	ldrh	r2, [r3, #8]
 8005736:	78fb      	ldrb	r3, [r7, #3]
 8005738:	b29b      	uxth	r3, r3
 800573a:	4413      	add	r3, r2
 800573c:	83fb      	strh	r3, [r7, #30]

  if (*(UNS32 *) d->objdict[offsetObjdict].pSubindex[1].pObject & 0x80000000)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	8bfb      	ldrh	r3, [r7, #30]
 8005744:	00db      	lsls	r3, r3, #3
 8005746:	4413      	add	r3, r2
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3310      	adds	r3, #16
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	da01      	bge.n	8005758 <sendOnePDOevent+0x5c>
    {
      return 0;
 8005754:	2300      	movs	r3, #0
 8005756:	e0cf      	b.n	80058f8 <sendOnePDOevent+0x1fc>
    }
 
  MSG_WAR (0x3968, "  PDO is on EVENT. Trans type : ",
           *((UNS8 *) d->objdict[offsetObjdict].pSubindex[2].pObject));
  
  memset(&pdo, 0, sizeof(pdo));
 8005758:	f107 0308 	add.w	r3, r7, #8
 800575c:	220c      	movs	r2, #12
 800575e:	2100      	movs	r1, #0
 8005760:	4618      	mov	r0, r3
 8005762:	f007 f847 	bl	800c7f4 <memset>
  if (buildPDO (d, pdoNum, &pdo))
 8005766:	f107 0208 	add.w	r2, r7, #8
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	4619      	mov	r1, r3
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff fbea 	bl	8004f48 <buildPDO>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00d      	beq.n	8005796 <sendOnePDOevent+0x9a>
    {
      MSG_ERR (0x3907, " Couldn't build TPDO number : ",
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	9301      	str	r3, [sp, #4]
 800577e:	4b60      	ldr	r3, [pc, #384]	; (8005900 <sendOnePDOevent+0x204>)
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	f643 1307 	movw	r3, #14599	; 0x3907
 8005786:	f240 221f 	movw	r2, #543	; 0x21f
 800578a:	495e      	ldr	r1, [pc, #376]	; (8005904 <sendOnePDOevent+0x208>)
 800578c:	485e      	ldr	r0, [pc, #376]	; (8005908 <sendOnePDOevent+0x20c>)
 800578e:	f007 f839 	bl	800c804 <iprintf>
               pdoNum);
      return 0;
 8005792:	2300      	movs	r3, #0
 8005794:	e0b0      	b.n	80058f8 <sendOnePDOevent+0x1fc>
    }

  /*Compare new and old PDO */
  if (d->PDO_status[pdoNum].last_message.cob_id == pdo.cob_id
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6899      	ldr	r1, [r3, #8]
 800579a:	78fa      	ldrb	r2, [r7, #3]
 800579c:	4613      	mov	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4413      	add	r3, r2
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	440b      	add	r3, r1
 80057a6:	88da      	ldrh	r2, [r3, #6]
 80057a8:	893b      	ldrh	r3, [r7, #8]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d121      	bne.n	80057f2 <sendOnePDOevent+0xf6>
      && d->PDO_status[pdoNum].last_message.len == pdo.len
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6899      	ldr	r1, [r3, #8]
 80057b2:	78fa      	ldrb	r2, [r7, #3]
 80057b4:	4613      	mov	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4413      	add	r3, r2
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	440b      	add	r3, r1
 80057be:	7a5a      	ldrb	r2, [r3, #9]
 80057c0:	7afb      	ldrb	r3, [r7, #11]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d115      	bne.n	80057f2 <sendOnePDOevent+0xf6>
      && memcmp(d->PDO_status[pdoNum].last_message.data,
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6899      	ldr	r1, [r3, #8]
 80057ca:	78fa      	ldrb	r2, [r7, #3]
 80057cc:	4613      	mov	r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	4413      	add	r3, r2
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	440b      	add	r3, r1
 80057d6:	f103 000a 	add.w	r0, r3, #10
 80057da:	f107 0308 	add.w	r3, r7, #8
 80057de:	3304      	adds	r3, #4
 80057e0:	2208      	movs	r2, #8
 80057e2:	4619      	mov	r1, r3
 80057e4:	f006 ffec 	bl	800c7c0 <memcmp>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <sendOnePDOevent+0xf6>
					pdo.data, 8) == 0
    )
    {
      /* No changes -> go to next pdo */
      return 0;
 80057ee:	2300      	movs	r3, #0
 80057f0:	e082      	b.n	80058f8 <sendOnePDOevent+0x1fc>
      TIMEVAL InhibitTimerDuration;

      MSG_WAR (0x306A, "Changes TPDO number : ", pdoNum);
      /* Changes detected -> transmit message */
      EventTimerDuration =
        *(UNS16 *) d->objdict[offsetObjdict].pSubindex[5].
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	8bfb      	ldrh	r3, [r7, #30]
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	4413      	add	r3, r2
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3350      	adds	r3, #80	; 0x50
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	881b      	ldrh	r3, [r3, #0]
      EventTimerDuration =
 8005804:	61bb      	str	r3, [r7, #24]
        pObject;
      InhibitTimerDuration =
        *(UNS16 *) d->objdict[offsetObjdict].pSubindex[3].
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	8bfb      	ldrh	r3, [r7, #30]
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	4413      	add	r3, r2
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3330      	adds	r3, #48	; 0x30
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	881b      	ldrh	r3, [r3, #0]
      InhibitTimerDuration =
 8005818:	617b      	str	r3, [r7, #20]
        pObject;

      /* Start both event_timer and inhibit_timer */
      if (EventTimerDuration)
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d023      	beq.n	8005868 <sendOnePDOevent+0x16c>
        {
          DelAlarm (d->PDO_status[pdoNum].event_timer);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6899      	ldr	r1, [r3, #8]
 8005824:	78fa      	ldrb	r2, [r7, #3]
 8005826:	4613      	mov	r3, r2
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	4413      	add	r3, r2
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	440b      	add	r3, r1
 8005830:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005834:	4618      	mov	r0, r3
 8005836:	f005 fa71 	bl	800ad1c <DelAlarm>
          d->PDO_status[pdoNum].event_timer =
            SetAlarm (d, pdoNum, &PDOEventTimerAlarm,
 800583a:	78f8      	ldrb	r0, [r7, #3]
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	2264      	movs	r2, #100	; 0x64
 8005840:	fb02 f503 	mul.w	r5, r2, r3
          d->PDO_status[pdoNum].event_timer =
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6899      	ldr	r1, [r3, #8]
 8005848:	78fa      	ldrb	r2, [r7, #3]
 800584a:	4613      	mov	r3, r2
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	4413      	add	r3, r2
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	18cc      	adds	r4, r1, r3
            SetAlarm (d, pdoNum, &PDOEventTimerAlarm,
 8005854:	2300      	movs	r3, #0
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	462b      	mov	r3, r5
 800585a:	4a2c      	ldr	r2, [pc, #176]	; (800590c <sendOnePDOevent+0x210>)
 800585c:	4601      	mov	r1, r0
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f005 f9e0 	bl	800ac24 <SetAlarm>
 8005864:	4603      	mov	r3, r0
          d->PDO_status[pdoNum].event_timer =
 8005866:	8063      	strh	r3, [r4, #2]
                      MS_TO_TIMEVAL (EventTimerDuration), 0);
        }

      if (InhibitTimerDuration)
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d03c      	beq.n	80058e8 <sendOnePDOevent+0x1ec>
        {
          DelAlarm (d->PDO_status[pdoNum].inhibit_timer);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6899      	ldr	r1, [r3, #8]
 8005872:	78fa      	ldrb	r2, [r7, #3]
 8005874:	4613      	mov	r3, r2
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	4413      	add	r3, r2
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	440b      	add	r3, r1
 800587e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005882:	4618      	mov	r0, r3
 8005884:	f005 fa4a 	bl	800ad1c <DelAlarm>
          d->PDO_status[pdoNum].inhibit_timer =
            SetAlarm (d, pdoNum, &PDOInhibitTimerAlarm,
 8005888:	78f8      	ldrb	r0, [r7, #3]
                      US_TO_TIMEVAL (InhibitTimerDuration *
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2264      	movs	r2, #100	; 0x64
 800588e:	fb02 f303 	mul.w	r3, r2, r3
            SetAlarm (d, pdoNum, &PDOInhibitTimerAlarm,
 8005892:	4a1f      	ldr	r2, [pc, #124]	; (8005910 <sendOnePDOevent+0x214>)
 8005894:	fba2 2303 	umull	r2, r3, r2, r3
 8005898:	08dd      	lsrs	r5, r3, #3
          d->PDO_status[pdoNum].inhibit_timer =
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6899      	ldr	r1, [r3, #8]
 800589e:	78fa      	ldrb	r2, [r7, #3]
 80058a0:	4613      	mov	r3, r2
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	4413      	add	r3, r2
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	18cc      	adds	r4, r1, r3
            SetAlarm (d, pdoNum, &PDOInhibitTimerAlarm,
 80058aa:	2300      	movs	r3, #0
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	462b      	mov	r3, r5
 80058b0:	4a18      	ldr	r2, [pc, #96]	; (8005914 <sendOnePDOevent+0x218>)
 80058b2:	4601      	mov	r1, r0
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f005 f9b5 	bl	800ac24 <SetAlarm>
 80058ba:	4603      	mov	r3, r0
          d->PDO_status[pdoNum].inhibit_timer =
 80058bc:	80a3      	strh	r3, [r4, #4]
                                     100), 0);
          /* and inhibit TPDO */
          d->PDO_status[pdoNum].transmit_type_parameter |=
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6899      	ldr	r1, [r3, #8]
 80058c2:	78fa      	ldrb	r2, [r7, #3]
 80058c4:	4613      	mov	r3, r2
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	4413      	add	r3, r2
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	440b      	add	r3, r1
 80058ce:	7819      	ldrb	r1, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6898      	ldr	r0, [r3, #8]
 80058d4:	78fa      	ldrb	r2, [r7, #3]
 80058d6:	4613      	mov	r3, r2
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	4413      	add	r3, r2
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	4403      	add	r3, r0
 80058e0:	f041 0201 	orr.w	r2, r1, #1
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	701a      	strb	r2, [r3, #0]
            PDO_INHIBITED;
        }

      sendPdo(d, pdoNum, &pdo);
 80058e8:	78fb      	ldrb	r3, [r7, #3]
 80058ea:	f107 0208 	add.w	r2, r7, #8
 80058ee:	4619      	mov	r1, r3
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff fee2 	bl	80056ba <sendPdo>
    }
    return 1;
 80058f6:	2301      	movs	r3, #1
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3720      	adds	r7, #32
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bdb0      	pop	{r4, r5, r7, pc}
 8005900:	0800de84 	.word	0x0800de84
 8005904:	0800dd64 	.word	0x0800dd64
 8005908:	0800dd88 	.word	0x0800dd88
 800590c:	08005919 	.word	0x08005919
 8005910:	cccccccd 	.word	0xcccccccd
 8005914:	08005961 	.word	0x08005961

08005918 <PDOEventTimerAlarm>:
 * @param pdoNum The PDO number
 */

void
PDOEventTimerAlarm (CO_Data * d, UNS32 pdoNum)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  /* This is needed to avoid deletion of re-attribuated timer */
  d->PDO_status[pdoNum].event_timer = TIMER_NONE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6899      	ldr	r1, [r3, #8]
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	4613      	mov	r3, r2
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	4413      	add	r3, r2
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	440b      	add	r3, r1
 8005932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005936:	805a      	strh	r2, [r3, #2]
  /* force emission of PDO by artificially changing last emitted */
  d->PDO_status[pdoNum].last_message.cob_id = 0;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6899      	ldr	r1, [r3, #8]
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	4613      	mov	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	4413      	add	r3, r2
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	440b      	add	r3, r1
 8005948:	2200      	movs	r2, #0
 800594a:	80da      	strh	r2, [r3, #6]
  sendOnePDOevent (d, (UNS8) pdoNum);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	b2db      	uxtb	r3, r3
 8005950:	4619      	mov	r1, r3
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7ff fed2 	bl	80056fc <sendOnePDOevent>
}
 8005958:	bf00      	nop
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <PDOInhibitTimerAlarm>:
 * @param *d Pointer on a CAN object data structure
 * @param pdoNum The PDO number
 */
void
PDOInhibitTimerAlarm (CO_Data * d, UNS32 pdoNum)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  /* This is needed to avoid deletion of re-attribuated timer */
  d->PDO_status[pdoNum].inhibit_timer = TIMER_NONE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6899      	ldr	r1, [r3, #8]
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	4613      	mov	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	4413      	add	r3, r2
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	440b      	add	r3, r1
 800597a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800597e:	809a      	strh	r2, [r3, #4]
  /* Remove inhibit flag */
  d->PDO_status[pdoNum].transmit_type_parameter &= ~PDO_INHIBITED;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6899      	ldr	r1, [r3, #8]
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	4613      	mov	r3, r2
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	4413      	add	r3, r2
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	440b      	add	r3, r1
 8005990:	7819      	ldrb	r1, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6898      	ldr	r0, [r3, #8]
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	4613      	mov	r3, r2
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	4413      	add	r3, r2
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	4403      	add	r3, r0
 80059a2:	f021 0201 	bic.w	r2, r1, #1
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]
  sendOnePDOevent (d, (UNS8) pdoNum);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	4619      	mov	r1, r3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7ff fea3 	bl	80056fc <sendOnePDOevent>
}
 80059b6:	bf00      	nop
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <_RxPDO_EventTimers_Handler>:


void
_RxPDO_EventTimers_Handler(CO_Data *d, UNS32 pdoNum)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	6039      	str	r1, [r7, #0]
	(void)d;
	(void)pdoNum;
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bc80      	pop	{r7}
 80059d0:	4770      	bx	lr
	...

080059d4 <_sendPDOevent>:
** @return
**/

UNS8
_sendPDOevent (CO_Data * d, UNS8 isSyncEvent)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08c      	sub	sp, #48	; 0x30
 80059d8:	af02      	add	r7, sp, #8
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	460b      	mov	r3, r1
 80059de:	70fb      	strb	r3, [r7, #3]
  UNS8 pdoNum = 0x00;           /* number of the actual processed pdo-nr. */
 80059e0:	2300      	movs	r3, #0
 80059e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  UNS8 *pTransmissionType = NULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	61fb      	str	r3, [r7, #28]
  UNS8 status = state3;
 80059ea:	2303      	movs	r3, #3
 80059ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  UNS16 offsetObjdict = d->firstIndex->PDO_TRS;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	891b      	ldrh	r3, [r3, #8]
 80059f6:	84bb      	strh	r3, [r7, #36]	; 0x24
  UNS16 offsetObjdictMap = d->firstIndex->PDO_TRS_MAP;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	895b      	ldrh	r3, [r3, #10]
 80059fe:	847b      	strh	r3, [r7, #34]	; 0x22
  UNS16 lastIndex = d->lastIndex->PDO_TRS;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	891b      	ldrh	r3, [r3, #8]
 8005a06:	837b      	strh	r3, [r7, #26]

  if (!d->CurrentCommunicationState.csPDO)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <_sendPDOevent+0x42>
    {
      return 0;
 8005a12:	2300      	movs	r3, #0
 8005a14:	e135      	b.n	8005c82 <_sendPDOevent+0x2ae>
    }


  /* study all PDO stored in the objects dictionary */
  if (offsetObjdict)
 8005a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 8131 	beq.w	8005c80 <_sendPDOevent+0x2ac>
    {
      Message pdo;/* = Message_Initializer;*/
      memset(&pdo, 0, sizeof(pdo));
 8005a1e:	f107 030c 	add.w	r3, r7, #12
 8005a22:	220c      	movs	r2, #12
 8005a24:	2100      	movs	r1, #0
 8005a26:	4618      	mov	r0, r3
 8005a28:	f006 fee4 	bl	800c7f4 <memset>
      while (offsetObjdict <= lastIndex)
 8005a2c:	e123      	b.n	8005c76 <_sendPDOevent+0x2a2>
        {
          switch (status)
 8005a2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a32:	2b05      	cmp	r3, #5
 8005a34:	f000 80f5 	beq.w	8005c22 <_sendPDOevent+0x24e>
 8005a38:	2b0b      	cmp	r3, #11
 8005a3a:	f000 80fe 	beq.w	8005c3a <_sendPDOevent+0x266>
 8005a3e:	2b03      	cmp	r3, #3
 8005a40:	f040 810a 	bne.w	8005c58 <_sendPDOevent+0x284>
            {
            case state3:
              if ( /* bSubCount always 5 with objdictedit -> check disabled */
                   /*d->objdict[offsetObjdict].bSubCount < 5 ||*/
                   /* check if TPDO is not valid */
                   *(UNS32 *) d->objdict[offsetObjdict].pSubindex[1].
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	4413      	add	r3, r2
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3310      	adds	r3, #16
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	681b      	ldr	r3, [r3, #0]
              if ( /* bSubCount always 5 with objdictedit -> check disabled */
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	da03      	bge.n	8005a62 <_sendPDOevent+0x8e>
                   pObject & 0x80000000)
                {
                  MSG_WAR (0x3960, "Not a valid PDO ", 0x1800 + pdoNum);
                  /*Go next TPDO */
                  status = state11;
 8005a5a:	230b      	movs	r3, #11
 8005a5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                  break;
 8005a60:	e109      	b.n	8005c76 <_sendPDOevent+0x2a2>
                }
              /* get the PDO transmission type */
              pTransmissionType =
                (UNS8 *) d->objdict[offsetObjdict].pSubindex[2].pObject;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	4413      	add	r3, r2
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3320      	adds	r3, #32
              pTransmissionType =
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	61fb      	str	r3, [r7, #28]
              MSG_WAR (0x3962, "Reading PDO at index : ", 0x1800 + pdoNum);

              /* check if transmission type is SYNCRONOUS */
              /* message transmited every n SYNC with n=TransmissionType */
              if (isSyncEvent &&
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d04b      	beq.n	8005b12 <_sendPDOevent+0x13e>
                  (*pTransmissionType >= TRANS_SYNC_MIN) &&
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
              if (isSyncEvent &&
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d047      	beq.n	8005b12 <_sendPDOevent+0x13e>
                  (*pTransmissionType <= TRANS_SYNC_MAX) &&
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	781b      	ldrb	r3, [r3, #0]
                  (*pTransmissionType >= TRANS_SYNC_MIN) &&
 8005a86:	2bf0      	cmp	r3, #240	; 0xf0
 8005a88:	d843      	bhi.n	8005b12 <_sendPDOevent+0x13e>
                  (++d->PDO_status[pdoNum].transmit_type_parameter ==
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6899      	ldr	r1, [r3, #8]
 8005a8e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005a92:	4613      	mov	r3, r2
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	4413      	add	r3, r2
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	440b      	add	r3, r1
 8005a9c:	781a      	ldrb	r2, [r3, #0]
 8005a9e:	3201      	adds	r2, #1
 8005aa0:	b2d2      	uxtb	r2, r2
                  (*pTransmissionType <= TRANS_SYNC_MAX) &&
 8005aa2:	701a      	strb	r2, [r3, #0]
                  (++d->PDO_status[pdoNum].transmit_type_parameter ==
 8005aa4:	781a      	ldrb	r2, [r3, #0]
                   *pTransmissionType))
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
                  (*pTransmissionType <= TRANS_SYNC_MAX) &&
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d131      	bne.n	8005b12 <_sendPDOevent+0x13e>
                {
                  /*Reset count of SYNC */
                  d->PDO_status[pdoNum].transmit_type_parameter = 0;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6899      	ldr	r1, [r3, #8]
 8005ab2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	4413      	add	r3, r2
 8005abc:	005b      	lsls	r3, r3, #1
 8005abe:	440b      	add	r3, r1
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	701a      	strb	r2, [r3, #0]
                  MSG_WAR (0x3964, "  PDO is on SYNCHRO. Trans type : ",
                           *pTransmissionType);
                  memset(&pdo, 0, sizeof(pdo));
 8005ac4:	f107 030c 	add.w	r3, r7, #12
 8005ac8:	220c      	movs	r2, #12
 8005aca:	2100      	movs	r1, #0
 8005acc:	4618      	mov	r0, r3
 8005ace:	f006 fe91 	bl	800c7f4 <memset>
                  /*{
                    Message msg_init = Message_Initializer;
                    pdo = msg_init;
                  }*/
                  if (buildPDO (d, pdoNum, &pdo))
 8005ad2:	f107 020c 	add.w	r2, r7, #12
 8005ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ada:	4619      	mov	r1, r3
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7ff fa33 	bl	8004f48 <buildPDO>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d010      	beq.n	8005b0a <_sendPDOevent+0x136>
                    {
                      MSG_ERR (0x1906, " Couldn't build TPDO number : ",
 8005ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005aec:	9301      	str	r3, [sp, #4]
 8005aee:	4b67      	ldr	r3, [pc, #412]	; (8005c8c <_sendPDOevent+0x2b8>)
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	f641 1306 	movw	r3, #6406	; 0x1906
 8005af6:	f240 22cd 	movw	r2, #717	; 0x2cd
 8005afa:	4965      	ldr	r1, [pc, #404]	; (8005c90 <_sendPDOevent+0x2bc>)
 8005afc:	4865      	ldr	r0, [pc, #404]	; (8005c94 <_sendPDOevent+0x2c0>)
 8005afe:	f006 fe81 	bl	800c804 <iprintf>
                               pdoNum);
                      status = state11;
 8005b02:	230b      	movs	r3, #11
 8005b04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                      break;
 8005b08:	e0b5      	b.n	8005c76 <_sendPDOevent+0x2a2>
                    }
                  status = state5;
 8005b0a:	2305      	movs	r3, #5
 8005b0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005b10:	e086      	b.n	8005c20 <_sendPDOevent+0x24c>
                  /* If transmission RTR, with data sampled on SYNC */
                }
              else if (isSyncEvent && (*pTransmissionType == TRANS_RTR_SYNC))
 8005b12:	78fb      	ldrb	r3, [r7, #3]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d056      	beq.n	8005bc6 <_sendPDOevent+0x1f2>
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2bfc      	cmp	r3, #252	; 0xfc
 8005b1e:	d152      	bne.n	8005bc6 <_sendPDOevent+0x1f2>
                {
                  if (buildPDO
                      (d, pdoNum, &d->PDO_status[pdoNum].last_message))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6899      	ldr	r1, [r3, #8]
 8005b24:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005b28:	4613      	mov	r3, r2
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	4413      	add	r3, r2
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	440b      	add	r3, r1
                  if (buildPDO
 8005b32:	1d9a      	adds	r2, r3, #6
 8005b34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b38:	4619      	mov	r1, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7ff fa04 	bl	8004f48 <buildPDO>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d024      	beq.n	8005b90 <_sendPDOevent+0x1bc>
                    {
                      MSG_ERR (0x1966, " Couldn't build TPDO number : ",
 8005b46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	4b4f      	ldr	r3, [pc, #316]	; (8005c8c <_sendPDOevent+0x2b8>)
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	f641 1366 	movw	r3, #6502	; 0x1966
 8005b54:	f240 22da 	movw	r2, #730	; 0x2da
 8005b58:	494d      	ldr	r1, [pc, #308]	; (8005c90 <_sendPDOevent+0x2bc>)
 8005b5a:	484e      	ldr	r0, [pc, #312]	; (8005c94 <_sendPDOevent+0x2c0>)
 8005b5c:	f006 fe52 	bl	800c804 <iprintf>
                               pdoNum);
                      d->PDO_status[pdoNum].transmit_type_parameter &=
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6899      	ldr	r1, [r3, #8]
 8005b64:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005b68:	4613      	mov	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	4413      	add	r3, r2
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	440b      	add	r3, r1
 8005b72:	7819      	ldrb	r1, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6898      	ldr	r0, [r3, #8]
 8005b78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	4413      	add	r3, r2
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	4403      	add	r3, r0
 8005b86:	f021 0201 	bic.w	r2, r1, #1
 8005b8a:	b2d2      	uxtb	r2, r2
 8005b8c:	701a      	strb	r2, [r3, #0]
 8005b8e:	e016      	b.n	8005bbe <_sendPDOevent+0x1ea>
                        ~PDO_RTR_SYNC_READY;
                    }
                  else
                    {
                      d->PDO_status[pdoNum].transmit_type_parameter |=
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6899      	ldr	r1, [r3, #8]
 8005b94:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005b98:	4613      	mov	r3, r2
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	4413      	add	r3, r2
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	440b      	add	r3, r1
 8005ba2:	7819      	ldrb	r1, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6898      	ldr	r0, [r3, #8]
 8005ba8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005bac:	4613      	mov	r3, r2
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	4413      	add	r3, r2
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	4403      	add	r3, r0
 8005bb6:	f041 0201 	orr.w	r2, r1, #1
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	701a      	strb	r2, [r3, #0]
                        PDO_RTR_SYNC_READY;
                    }
                  status = state11;
 8005bbe:	230b      	movs	r3, #11
 8005bc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                  break;
 8005bc4:	e057      	b.n	8005c76 <_sendPDOevent+0x2a2>
                  /* If transmission on Event and not inhibited, check for changes */
                }
              else
                if ( (isSyncEvent && (*pTransmissionType == TRANS_SYNC_ACYCLIC))
 8005bc6:	78fb      	ldrb	r3, [r7, #3]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <_sendPDOevent+0x200>
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d018      	beq.n	8005c06 <_sendPDOevent+0x232>
                     ||
 8005bd4:	78fb      	ldrb	r3, [r7, #3]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d11f      	bne.n	8005c1a <_sendPDOevent+0x246>
                     (!isSyncEvent && (*pTransmissionType == TRANS_EVENT_PROFILE || *pTransmissionType == TRANS_EVENT_SPECIFIC)
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2bff      	cmp	r3, #255	; 0xff
 8005be0:	d003      	beq.n	8005bea <_sendPDOevent+0x216>
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2bfe      	cmp	r3, #254	; 0xfe
 8005be8:	d117      	bne.n	8005c1a <_sendPDOevent+0x246>
                       && !(d->PDO_status[pdoNum].transmit_type_parameter & PDO_INHIBITED)))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6899      	ldr	r1, [r3, #8]
 8005bee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	4413      	add	r3, r2
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	440b      	add	r3, r1
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d109      	bne.n	8005c1a <_sendPDOevent+0x246>
                {
                  sendOnePDOevent(d, pdoNum);
 8005c06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff fd75 	bl	80056fc <sendOnePDOevent>
                  status = state11;
 8005c12:	230b      	movs	r3, #11
 8005c14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005c18:	e002      	b.n	8005c20 <_sendPDOevent+0x24c>
              else
                {
                  MSG_WAR (0x306C,
                           "  PDO is not on EVENT or synchro or not at this SYNC. Trans type : ",
                           *pTransmissionType);
                  status = state11;
 8005c1a:	230b      	movs	r3, #11
 8005c1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                }
              break;
 8005c20:	e029      	b.n	8005c76 <_sendPDOevent+0x2a2>
            case state5:       /*Send the pdo */
              sendPdo(d, pdoNum, &pdo);
 8005c22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c26:	f107 020c 	add.w	r2, r7, #12
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7ff fd44 	bl	80056ba <sendPdo>
              status = state11;
 8005c32:	230b      	movs	r3, #11
 8005c34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
              break;
 8005c38:	e01d      	b.n	8005c76 <_sendPDOevent+0x2a2>
            case state11:      /*Go to next TPDO */
              pdoNum++;
 8005c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c3e:	3301      	adds	r3, #1
 8005c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              offsetObjdict++;
 8005c44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c46:	3301      	adds	r3, #1
 8005c48:	84bb      	strh	r3, [r7, #36]	; 0x24
              offsetObjdictMap++;
 8005c4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	847b      	strh	r3, [r7, #34]	; 0x22
              MSG_WAR (0x3970, "next pdo index : ", pdoNum);
              status = state3;
 8005c50:	2303      	movs	r3, #3
 8005c52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
              break;
 8005c56:	e00e      	b.n	8005c76 <_sendPDOevent+0x2a2>

            default:
              MSG_ERR (0x1972, "Unknown state has been reached :", status);
 8005c58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c5c:	9301      	str	r3, [sp, #4]
 8005c5e:	4b0e      	ldr	r3, [pc, #56]	; (8005c98 <_sendPDOevent+0x2c4>)
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	f641 1372 	movw	r3, #6514	; 0x1972
 8005c66:	f240 3205 	movw	r2, #773	; 0x305
 8005c6a:	4909      	ldr	r1, [pc, #36]	; (8005c90 <_sendPDOevent+0x2bc>)
 8005c6c:	4809      	ldr	r0, [pc, #36]	; (8005c94 <_sendPDOevent+0x2c0>)
 8005c6e:	f006 fdc9 	bl	800c804 <iprintf>
              return 0xFF;
 8005c72:	23ff      	movs	r3, #255	; 0xff
 8005c74:	e005      	b.n	8005c82 <_sendPDOevent+0x2ae>
      while (offsetObjdict <= lastIndex)
 8005c76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c78:	8b7b      	ldrh	r3, [r7, #26]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	f67f aed7 	bls.w	8005a2e <_sendPDOevent+0x5a>
            }                   /* end switch case */

        }                       /* end while */
    }
  return 0;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3728      	adds	r7, #40	; 0x28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	0800de84 	.word	0x0800de84
 8005c90:	0800dd64 	.word	0x0800dd64
 8005c94:	0800dd88 	.word	0x0800dd88
 8005c98:	0800dea4 	.word	0x0800dea4

08005c9c <TPDO_Communication_Parameter_Callback>:

UNS32
TPDO_Communication_Parameter_Callback (CO_Data * d,
                                       const indextable * OD_entry,
                                       UNS8 bSubindex)
{
 8005c9c:	b590      	push	{r4, r7, lr}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	71fb      	strb	r3, [r7, #7]
  /* If PDO are actives */
  if (d->CurrentCommunicationState.csPDO)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d051      	beq.n	8005d58 <TPDO_Communication_Parameter_Callback+0xbc>
    switch (bSubindex)
 8005cb4:	79fb      	ldrb	r3, [r7, #7]
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	db50      	blt.n	8005d5c <TPDO_Communication_Parameter_Callback+0xc0>
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	dd02      	ble.n	8005cc4 <TPDO_Communication_Parameter_Callback+0x28>
 8005cbe:	2b05      	cmp	r3, #5
 8005cc0:	d000      	beq.n	8005cc4 <TPDO_Communication_Parameter_Callback+0x28>
          PDOEventTimerAlarm (d, numPdo);
          return 0;
        }

      default:                 /* other subindex are ignored */
        break;
 8005cc2:	e04b      	b.n	8005d5c <TPDO_Communication_Parameter_Callback+0xc0>
          const indextable *TPDO_com = d->objdict + d->firstIndex->PDO_TRS;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	891b      	ldrh	r3, [r3, #8]
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
          UNS8 numPdo = (UNS8) (OD_entry - TPDO_com);    /* number of the actual processed pdo-nr. */
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	10db      	asrs	r3, r3, #3
 8005cdc:	74fb      	strb	r3, [r7, #19]
            DelAlarm (d->PDO_status[numPdo].event_timer);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6899      	ldr	r1, [r3, #8]
 8005ce2:	7cfa      	ldrb	r2, [r7, #19]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	4413      	add	r3, r2
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	440b      	add	r3, r1
 8005cee:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
          d->PDO_status[numPdo].event_timer =
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6899      	ldr	r1, [r3, #8]
 8005cf6:	7cfa      	ldrb	r2, [r7, #19]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	18cc      	adds	r4, r1, r3
            DelAlarm (d->PDO_status[numPdo].event_timer);
 8005d02:	f005 f80b 	bl	800ad1c <DelAlarm>
 8005d06:	4603      	mov	r3, r0
          d->PDO_status[numPdo].event_timer =
 8005d08:	8063      	strh	r3, [r4, #2]
            DelAlarm (d->PDO_status[numPdo].inhibit_timer);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6899      	ldr	r1, [r3, #8]
 8005d0e:	7cfa      	ldrb	r2, [r7, #19]
 8005d10:	4613      	mov	r3, r2
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	4413      	add	r3, r2
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	440b      	add	r3, r1
 8005d1a:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
          d->PDO_status[numPdo].inhibit_timer =
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6899      	ldr	r1, [r3, #8]
 8005d22:	7cfa      	ldrb	r2, [r7, #19]
 8005d24:	4613      	mov	r3, r2
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	4413      	add	r3, r2
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	18cc      	adds	r4, r1, r3
            DelAlarm (d->PDO_status[numPdo].inhibit_timer);
 8005d2e:	f004 fff5 	bl	800ad1c <DelAlarm>
 8005d32:	4603      	mov	r3, r0
          d->PDO_status[numPdo].inhibit_timer =
 8005d34:	80a3      	strh	r3, [r4, #4]
          d->PDO_status[numPdo].transmit_type_parameter = 0;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6899      	ldr	r1, [r3, #8]
 8005d3a:	7cfa      	ldrb	r2, [r7, #19]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	4413      	add	r3, r2
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	440b      	add	r3, r1
 8005d46:	2200      	movs	r2, #0
 8005d48:	701a      	strb	r2, [r3, #0]
          PDOEventTimerAlarm (d, numPdo);
 8005d4a:	7cfb      	ldrb	r3, [r7, #19]
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f7ff fde2 	bl	8005918 <PDOEventTimerAlarm>
          return 0;
 8005d54:	2300      	movs	r3, #0
 8005d56:	e003      	b.n	8005d60 <TPDO_Communication_Parameter_Callback+0xc4>
      }
  return 0;
 8005d58:	bf00      	nop
 8005d5a:	e000      	b.n	8005d5e <TPDO_Communication_Parameter_Callback+0xc2>
        break;
 8005d5c:	bf00      	nop
  return 0;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	371c      	adds	r7, #28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd90      	pop	{r4, r7, pc}

08005d68 <PDOInit>:
** 非同步配置，PDOinit后_sendPDOevent（d，0）配置
* @param *d 
*/
void
PDOInit (CO_Data * d)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* For each TPDO mapping parameters */
  UNS16 pdoIndex = 0x1800;      /* OD index of TDPO */
 8005d70:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005d74:	82fb      	strh	r3, [r7, #22]

  UNS16 offsetObjdict = d->firstIndex->PDO_TRS;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	891b      	ldrh	r3, [r3, #8]
 8005d7c:	82bb      	strh	r3, [r7, #20]
  UNS16 lastIndex = d->lastIndex->PDO_TRS;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	891b      	ldrh	r3, [r3, #8]
 8005d84:	827b      	strh	r3, [r7, #18]
  if (offsetObjdict)
 8005d86:	8abb      	ldrh	r3, [r7, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d025      	beq.n	8005dd8 <PDOInit+0x70>
    while (offsetObjdict <= lastIndex)
 8005d8c:	e020      	b.n	8005dd0 <PDOInit+0x68>
    {
        /* Assign callbacks to sensible TPDO mapping subindexes */
        UNS32 errorCode;
        const indextable *ptrTable = (*d->scanIndexOD)(d, pdoIndex, &errorCode);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005d94:	f107 0208 	add.w	r2, r7, #8
 8005d98:	8af9      	ldrh	r1, [r7, #22]
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	4798      	blx	r3
 8005d9e:	60f8      	str	r0, [r7, #12]
        if (errorCode == OD_SUCCESSFUL)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10e      	bne.n	8005dc4 <PDOInit+0x5c>
        {
            /*Assign callbacks to corresponding subindex */
            /* Transmission type */
            ptrTable->pSubindex[2].callback = &TPDO_Communication_Parameter_Callback;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3320      	adds	r3, #32
 8005dac:	4a0e      	ldr	r2, [pc, #56]	; (8005de8 <PDOInit+0x80>)
 8005dae:	60da      	str	r2, [r3, #12]
            /* Inhibit time */
            ptrTable->pSubindex[3].callback = &TPDO_Communication_Parameter_Callback;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3330      	adds	r3, #48	; 0x30
 8005db6:	4a0c      	ldr	r2, [pc, #48]	; (8005de8 <PDOInit+0x80>)
 8005db8:	60da      	str	r2, [r3, #12]
            /* Event timer */
            ptrTable->pSubindex[5].callback = &TPDO_Communication_Parameter_Callback;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3350      	adds	r3, #80	; 0x50
 8005dc0:	4a09      	ldr	r2, [pc, #36]	; (8005de8 <PDOInit+0x80>)
 8005dc2:	60da      	str	r2, [r3, #12]
        }
        pdoIndex++;
 8005dc4:	8afb      	ldrh	r3, [r7, #22]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	82fb      	strh	r3, [r7, #22]
        offsetObjdict++;
 8005dca:	8abb      	ldrh	r3, [r7, #20]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	82bb      	strh	r3, [r7, #20]
    while (offsetObjdict <= lastIndex)
 8005dd0:	8aba      	ldrh	r2, [r7, #20]
 8005dd2:	8a7b      	ldrh	r3, [r7, #18]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d9da      	bls.n	8005d8e <PDOInit+0x26>
    }

  /* Trigger a non-sync event */
  _sendPDOevent (d, 0);
 8005dd8:	2100      	movs	r1, #0
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7ff fdfa 	bl	80059d4 <_sendPDOevent>
}
 8005de0:	bf00      	nop
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	08005c9d 	.word	0x08005c9d

08005dec <PDOStop>:
 * @brief 所有的配置的TPDO对应的PDO_status初始化为0或者TIMER_NONE
 * @param *d 
 */
void
PDOStop (CO_Data * d)
{
 8005dec:	b590      	push	{r4, r7, lr}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* For each TPDO mapping parameters */
  UNS8 pdoNum = 0x00;           /* number of the actual processed pdo-nr. */
 8005df4:	2300      	movs	r3, #0
 8005df6:	73fb      	strb	r3, [r7, #15]
  UNS16 offsetObjdict = d->firstIndex->PDO_TRS;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	891b      	ldrh	r3, [r3, #8]
 8005dfe:	81bb      	strh	r3, [r7, #12]
  UNS16 lastIndex = d->lastIndex->PDO_TRS;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	891b      	ldrh	r3, [r3, #8]
 8005e06:	817b      	strh	r3, [r7, #10]
  if (offsetObjdict)
 8005e08:	89bb      	ldrh	r3, [r7, #12]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d04a      	beq.n	8005ea4 <PDOStop+0xb8>
    while (offsetObjdict <= lastIndex)
 8005e0e:	e045      	b.n	8005e9c <PDOStop+0xb0>
      {
        /* Delete TPDO timers */
        d->PDO_status[pdoNum].event_timer =
          DelAlarm (d->PDO_status[pdoNum].event_timer);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6899      	ldr	r1, [r3, #8]
 8005e14:	7bfa      	ldrb	r2, [r7, #15]
 8005e16:	4613      	mov	r3, r2
 8005e18:	00db      	lsls	r3, r3, #3
 8005e1a:	4413      	add	r3, r2
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	440b      	add	r3, r1
 8005e20:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
        d->PDO_status[pdoNum].event_timer =
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6899      	ldr	r1, [r3, #8]
 8005e28:	7bfa      	ldrb	r2, [r7, #15]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	4413      	add	r3, r2
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	18cc      	adds	r4, r1, r3
          DelAlarm (d->PDO_status[pdoNum].event_timer);
 8005e34:	f004 ff72 	bl	800ad1c <DelAlarm>
 8005e38:	4603      	mov	r3, r0
        d->PDO_status[pdoNum].event_timer =
 8005e3a:	8063      	strh	r3, [r4, #2]
        d->PDO_status[pdoNum].inhibit_timer =
          DelAlarm (d->PDO_status[pdoNum].inhibit_timer);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6899      	ldr	r1, [r3, #8]
 8005e40:	7bfa      	ldrb	r2, [r7, #15]
 8005e42:	4613      	mov	r3, r2
 8005e44:	00db      	lsls	r3, r3, #3
 8005e46:	4413      	add	r3, r2
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	440b      	add	r3, r1
 8005e4c:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
        d->PDO_status[pdoNum].inhibit_timer =
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6899      	ldr	r1, [r3, #8]
 8005e54:	7bfa      	ldrb	r2, [r7, #15]
 8005e56:	4613      	mov	r3, r2
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	4413      	add	r3, r2
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	18cc      	adds	r4, r1, r3
          DelAlarm (d->PDO_status[pdoNum].inhibit_timer);
 8005e60:	f004 ff5c 	bl	800ad1c <DelAlarm>
 8005e64:	4603      	mov	r3, r0
        d->PDO_status[pdoNum].inhibit_timer =
 8005e66:	80a3      	strh	r3, [r4, #4]
        /* Reset transmit type parameter */
        d->PDO_status[pdoNum].transmit_type_parameter = 0;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6899      	ldr	r1, [r3, #8]
 8005e6c:	7bfa      	ldrb	r2, [r7, #15]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	4413      	add	r3, r2
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	440b      	add	r3, r1
 8005e78:	2200      	movs	r2, #0
 8005e7a:	701a      	strb	r2, [r3, #0]
        d->PDO_status[pdoNum].last_message.cob_id = 0;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6899      	ldr	r1, [r3, #8]
 8005e80:	7bfa      	ldrb	r2, [r7, #15]
 8005e82:	4613      	mov	r3, r2
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	4413      	add	r3, r2
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	440b      	add	r3, r1
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	80da      	strh	r2, [r3, #6]
        pdoNum++;
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	3301      	adds	r3, #1
 8005e94:	73fb      	strb	r3, [r7, #15]
        offsetObjdict++;
 8005e96:	89bb      	ldrh	r3, [r7, #12]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	81bb      	strh	r3, [r7, #12]
    while (offsetObjdict <= lastIndex)
 8005e9c:	89ba      	ldrh	r2, [r7, #12]
 8005e9e:	897b      	ldrh	r3, [r7, #10]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d9b5      	bls.n	8005e10 <PDOStop+0x24>
      }
}
 8005ea4:	bf00      	nop
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd90      	pop	{r4, r7, pc}

08005eac <SDOTimeoutAlarm>:
 **
 ** @param d
 ** @param id
 **/
void SDOTimeoutAlarm(CO_Data* d, UNS32 id)
{
 8005eac:	b5b0      	push	{r4, r5, r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af02      	add	r7, sp, #8
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
	UNS16 offset;
	UNS8 nodeId;
	/* Get the client->server cobid.*/
	offset = d->firstIndex->SDO_CLT;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	885b      	ldrh	r3, [r3, #2]
 8005ebc:	81fb      	strh	r3, [r7, #14]
	if ((offset == 0) || ((offset+d->transfers[id].CliServNbr) > d->lastIndex->SDO_CLT)) {
 8005ebe:	89fb      	ldrh	r3, [r7, #14]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 809b 	beq.w	8005ffc <SDOTimeoutAlarm+0x150>
 8005ec6:	89fb      	ldrh	r3, [r7, #14]
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	2054      	movs	r0, #84	; 0x54
 8005ece:	fb00 f202 	mul.w	r2, r0, r2
 8005ed2:	440a      	add	r2, r1
 8005ed4:	3228      	adds	r2, #40	; 0x28
 8005ed6:	7812      	ldrb	r2, [r2, #0]
 8005ed8:	4413      	add	r3, r2
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	6992      	ldr	r2, [r2, #24]
 8005ede:	8852      	ldrh	r2, [r2, #2]
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	f300 808b 	bgt.w	8005ffc <SDOTimeoutAlarm+0x150>
		return ;
	}
	nodeId = *((UNS8*) d->objdict[offset+d->transfers[id].CliServNbr].pSubindex[3].pObject);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	89fb      	ldrh	r3, [r7, #14]
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	2454      	movs	r4, #84	; 0x54
 8005ef2:	fb04 f101 	mul.w	r1, r4, r1
 8005ef6:	4401      	add	r1, r0
 8005ef8:	3128      	adds	r1, #40	; 0x28
 8005efa:	7809      	ldrb	r1, [r1, #0]
 8005efc:	440b      	add	r3, r1
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	4413      	add	r3, r2
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3330      	adds	r3, #48	; 0x30
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	737b      	strb	r3, [r7, #13]
	MSG_ERR(0x1A01, "SDO timeout. SDO response not received.", 0);
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	9301      	str	r3, [sp, #4]
 8005f10:	4b3c      	ldr	r3, [pc, #240]	; (8006004 <SDOTimeoutAlarm+0x158>)
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	f641 2301 	movw	r3, #6657	; 0x1a01
 8005f18:	2295      	movs	r2, #149	; 0x95
 8005f1a:	493b      	ldr	r1, [pc, #236]	; (8006008 <SDOTimeoutAlarm+0x15c>)
 8005f1c:	483b      	ldr	r0, [pc, #236]	; (800600c <SDOTimeoutAlarm+0x160>)
 8005f1e:	f006 fc71 	bl	800c804 <iprintf>
	MSG_WAR(0x2A02, "server node id : ", nodeId);
	MSG_WAR(0x2A02, "         index : ", d->transfers[id].index);
	MSG_WAR(0x2A02, "      subIndex : ", d->transfers[id].subIndex);
	/* Reset timer handler */
	d->transfers[id].timer = TIMER_NONE;
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2154      	movs	r1, #84	; 0x54
 8005f28:	fb01 f303 	mul.w	r3, r1, r3
 8005f2c:	4413      	add	r3, r2
 8005f2e:	3374      	adds	r3, #116	; 0x74
 8005f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f34:	801a      	strh	r2, [r3, #0]
	/*Set aborted state*/
	d->transfers[id].state = SDO_ABORTED_INTERNAL;
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2154      	movs	r1, #84	; 0x54
 8005f3c:	fb01 f303 	mul.w	r3, r1, r3
 8005f40:	4413      	add	r3, r2
 8005f42:	332a      	adds	r3, #42	; 0x2a
 8005f44:	2285      	movs	r2, #133	; 0x85
 8005f46:	701a      	strb	r2, [r3, #0]
	/* Sending a SDO abort */
	sendSDOabort(d, d->transfers[id].whoami, d->transfers[id].CliServNbr,
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2154      	movs	r1, #84	; 0x54
 8005f4e:	fb01 f303 	mul.w	r3, r1, r3
 8005f52:	4413      	add	r3, r2
 8005f54:	3329      	adds	r3, #41	; 0x29
 8005f56:	7818      	ldrb	r0, [r3, #0]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2154      	movs	r1, #84	; 0x54
 8005f5e:	fb01 f303 	mul.w	r3, r1, r3
 8005f62:	4413      	add	r3, r2
 8005f64:	3328      	adds	r3, #40	; 0x28
 8005f66:	781c      	ldrb	r4, [r3, #0]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2154      	movs	r1, #84	; 0x54
 8005f6e:	fb01 f303 	mul.w	r3, r1, r3
 8005f72:	4413      	add	r3, r2
 8005f74:	3330      	adds	r3, #48	; 0x30
 8005f76:	881d      	ldrh	r5, [r3, #0]
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2154      	movs	r1, #84	; 0x54
 8005f7e:	fb01 f303 	mul.w	r3, r1, r3
 8005f82:	4413      	add	r3, r2
 8005f84:	3332      	adds	r3, #50	; 0x32
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	4a21      	ldr	r2, [pc, #132]	; (8006010 <SDOTimeoutAlarm+0x164>)
 8005f8a:	9201      	str	r2, [sp, #4]
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	462b      	mov	r3, r5
 8005f90:	4622      	mov	r2, r4
 8005f92:	4601      	mov	r1, r0
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fced 	bl	8006974 <sendSDOabort>
			d->transfers[id].index, d->transfers[id].subIndex, SDOABT_TIMED_OUT);
	d->transfers[id].abortCode = SDOABT_TIMED_OUT;
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2154      	movs	r1, #84	; 0x54
 8005fa0:	fb01 f303 	mul.w	r3, r1, r3
 8005fa4:	4413      	add	r3, r2
 8005fa6:	332c      	adds	r3, #44	; 0x2c
 8005fa8:	4a19      	ldr	r2, [pc, #100]	; (8006010 <SDOTimeoutAlarm+0x164>)
 8005faa:	601a      	str	r2, [r3, #0]
	/* Call the user function to inform of the problem.*/
	if(d->transfers[id].Callback)
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2154      	movs	r1, #84	; 0x54
 8005fb2:	fb01 f303 	mul.w	r3, r1, r3
 8005fb6:	4413      	add	r3, r2
 8005fb8:	3378      	adds	r3, #120	; 0x78
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00b      	beq.n	8005fd8 <SDOTimeoutAlarm+0x12c>
		/*If ther is a callback, it is responsible to close SDO transfer (client)*/
		(*d->transfers[id].Callback)(d, nodeId);
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2154      	movs	r1, #84	; 0x54
 8005fc6:	fb01 f303 	mul.w	r3, r1, r3
 8005fca:	4413      	add	r3, r2
 8005fcc:	3378      	adds	r3, #120	; 0x78
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	7b7a      	ldrb	r2, [r7, #13]
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	4798      	blx	r3
	/*Reset the line if (whoami == SDO_SERVER) or the callback did not close the line.
	  Otherwise this sdo transfer would never be closed. */
	if(d->transfers[id].abortCode == SDOABT_TIMED_OUT) 
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2154      	movs	r1, #84	; 0x54
 8005fde:	fb01 f303 	mul.w	r3, r1, r3
 8005fe2:	4413      	add	r3, r2
 8005fe4:	332c      	adds	r3, #44	; 0x2c
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a09      	ldr	r2, [pc, #36]	; (8006010 <SDOTimeoutAlarm+0x164>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d107      	bne.n	8005ffe <SDOTimeoutAlarm+0x152>
		resetSDOline(d, (UNS8)id);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fa1f 	bl	8006438 <resetSDOline>
 8005ffa:	e000      	b.n	8005ffe <SDOTimeoutAlarm+0x152>
		return ;
 8005ffc:	bf00      	nop
}
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bdb0      	pop	{r4, r5, r7, pc}
 8006004:	0800df04 	.word	0x0800df04
 8006008:	0800dec8 	.word	0x0800dec8
 800600c:	0800deec 	.word	0x0800deec
 8006010:	05040000 	.word	0x05040000

08006014 <resetSDO>:
 ** Reset all sdo buffers
 **
 ** @param d
 **/
void resetSDO (CO_Data* d)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
	UNS8 j;

	/* transfer structure initialization */
	for (j = 0 ; j < SDO_MAX_SIMULTANEOUS_TRANSFERS ; j++)
 800601c:	2300      	movs	r3, #0
 800601e:	73fb      	strb	r3, [r7, #15]
 8006020:	e007      	b.n	8006032 <resetSDO+0x1e>
		resetSDOline(d, j);
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fa06 	bl	8006438 <resetSDOline>
	for (j = 0 ; j < SDO_MAX_SIMULTANEOUS_TRANSFERS ; j++)
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	3301      	adds	r3, #1
 8006030:	73fb      	strb	r3, [r7, #15]
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0f4      	beq.n	8006022 <resetSDO+0xe>
}
 8006038:	bf00      	nop
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <SDOlineToObjdict>:
 ** @param line
 **
 ** @return
 **/
UNS32 SDOlineToObjdict (CO_Data* d, UNS8 line)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b088      	sub	sp, #32
 8006044:	af04      	add	r7, sp, #16
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	70fb      	strb	r3, [r7, #3]
	UNS32 size;
	UNS32 errorCode;
	MSG_WAR(0x3A08, "Enter in SDOlineToObjdict ", line);
	/* if SDO initiated with e=0 and s=0 count is null, offset carry effective size*/
	if( d->transfers[line].count == 0)
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	2154      	movs	r1, #84	; 0x54
 8006052:	fb01 f303 	mul.w	r3, r1, r3
 8006056:	4413      	add	r3, r2
 8006058:	3334      	adds	r3, #52	; 0x34
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10f      	bne.n	8006080 <SDOlineToObjdict+0x40>
		d->transfers[line].count = d->transfers[line].offset;
 8006060:	78fa      	ldrb	r2, [r7, #3]
 8006062:	78fb      	ldrb	r3, [r7, #3]
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	2054      	movs	r0, #84	; 0x54
 8006068:	fb00 f202 	mul.w	r2, r0, r2
 800606c:	440a      	add	r2, r1
 800606e:	3238      	adds	r2, #56	; 0x38
 8006070:	6812      	ldr	r2, [r2, #0]
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	2054      	movs	r0, #84	; 0x54
 8006076:	fb00 f303 	mul.w	r3, r0, r3
 800607a:	440b      	add	r3, r1
 800607c:	3334      	adds	r3, #52	; 0x34
 800607e:	601a      	str	r2, [r3, #0]
	size = d->transfers[line].count;
 8006080:	78fb      	ldrb	r3, [r7, #3]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	2154      	movs	r1, #84	; 0x54
 8006086:	fb01 f303 	mul.w	r3, r1, r3
 800608a:	4413      	add	r3, r2
 800608c:	3334      	adds	r3, #52	; 0x34
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	60bb      	str	r3, [r7, #8]
	{
		errorCode = setODentry(d, d->transfers[line].index, d->transfers[line].subIndex,
				(void *) d->transfers[line].data, &size, 1);
	}
#else //SDO_DYNAMIC_BUFFER_ALLOCATION
	errorCode = setODentry(d, d->transfers[line].index, d->transfers[line].subIndex,
 8006092:	78fb      	ldrb	r3, [r7, #3]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	2154      	movs	r1, #84	; 0x54
 8006098:	fb01 f303 	mul.w	r3, r1, r3
 800609c:	4413      	add	r3, r2
 800609e:	3330      	adds	r3, #48	; 0x30
 80060a0:	8818      	ldrh	r0, [r3, #0]
 80060a2:	78fb      	ldrb	r3, [r7, #3]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	2154      	movs	r1, #84	; 0x54
 80060a8:	fb01 f303 	mul.w	r3, r1, r3
 80060ac:	4413      	add	r3, r2
 80060ae:	3332      	adds	r3, #50	; 0x32
 80060b0:	7819      	ldrb	r1, [r3, #0]
 80060b2:	78fb      	ldrb	r3, [r7, #3]
 80060b4:	2254      	movs	r2, #84	; 0x54
 80060b6:	fb02 f303 	mul.w	r3, r2, r3
 80060ba:	3338      	adds	r3, #56	; 0x38
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	4413      	add	r3, r2
 80060c0:	1d1a      	adds	r2, r3, #4
 80060c2:	2301      	movs	r3, #1
 80060c4:	9302      	str	r3, [sp, #8]
 80060c6:	2301      	movs	r3, #1
 80060c8:	9301      	str	r3, [sp, #4]
 80060ca:	f107 0308 	add.w	r3, r7, #8
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	4613      	mov	r3, r2
 80060d2:	460a      	mov	r2, r1
 80060d4:	4601      	mov	r1, r0
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7fe fe2c 	bl	8004d34 <_setODentry>
 80060dc:	60f8      	str	r0, [r7, #12]
			(void *) d->transfers[line].data, &size, 1);
#endif //SDO_DYNAMIC_BUFFER_ALLOCATION

	if (errorCode != OD_SUCCESSFUL)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <SDOlineToObjdict+0xa8>
		return errorCode;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	e000      	b.n	80060ea <SDOlineToObjdict+0xaa>
	MSG_WAR(0x3A08, "exit of SDOlineToObjdict ", line);
	return 0;
 80060e8:	2300      	movs	r3, #0

}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <objdictToSDOline>:
 ** @param line
 **
 ** @return
 **/
UNS32 objdictToSDOline (CO_Data* d, UNS8 line)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b08a      	sub	sp, #40	; 0x28
 80060f6:	af04      	add	r7, sp, #16
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	460b      	mov	r3, r1
 80060fc:	70fb      	strb	r3, [r7, #3]
    UNS32  size = SDO_MAX_LENGTH_TRANSFER;
 80060fe:	2320      	movs	r3, #32
 8006100:	613b      	str	r3, [r7, #16]
                1);
            }
        }
    }
#else //SDO_DYNAMIC_BUFFER_ALLOCATION
	errorCode = getODentry(d, 	d->transfers[line].index,
 8006102:	78fb      	ldrb	r3, [r7, #3]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	2154      	movs	r1, #84	; 0x54
 8006108:	fb01 f303 	mul.w	r3, r1, r3
 800610c:	4413      	add	r3, r2
 800610e:	3330      	adds	r3, #48	; 0x30
 8006110:	8818      	ldrh	r0, [r3, #0]
 8006112:	78fb      	ldrb	r3, [r7, #3]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	2154      	movs	r1, #84	; 0x54
 8006118:	fb01 f303 	mul.w	r3, r1, r3
 800611c:	4413      	add	r3, r2
 800611e:	3332      	adds	r3, #50	; 0x32
 8006120:	7819      	ldrb	r1, [r3, #0]
 8006122:	78fb      	ldrb	r3, [r7, #3]
 8006124:	2254      	movs	r2, #84	; 0x54
 8006126:	fb02 f303 	mul.w	r3, r2, r3
 800612a:	3338      	adds	r3, #56	; 0x38
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	4413      	add	r3, r2
 8006130:	1d1a      	adds	r2, r3, #4
 8006132:	2301      	movs	r3, #1
 8006134:	9303      	str	r3, [sp, #12]
 8006136:	2301      	movs	r3, #1
 8006138:	9302      	str	r3, [sp, #8]
 800613a:	f107 030f 	add.w	r3, r7, #15
 800613e:	9301      	str	r3, [sp, #4]
 8006140:	f107 0310 	add.w	r3, r7, #16
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	4613      	mov	r3, r2
 8006148:	460a      	mov	r2, r1
 800614a:	4601      	mov	r1, r0
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7fe fd55 	bl	8004bfc <_getODentry>
 8006152:	6178      	str	r0, [r7, #20]
			d->transfers[line].subIndex,
			(void *)d->transfers[line].data,
			&size, &dataType, 1);
#endif //SDO_DYNAMIC_BUFFER_ALLOCATION

	if (errorCode != OD_SUCCESSFUL)
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <objdictToSDOline+0x6c>
		return errorCode;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	e012      	b.n	8006184 <objdictToSDOline+0x92>

	d->transfers[line].count = size;
 800615e:	78fb      	ldrb	r3, [r7, #3]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	6879      	ldr	r1, [r7, #4]
 8006164:	2054      	movs	r0, #84	; 0x54
 8006166:	fb00 f303 	mul.w	r3, r0, r3
 800616a:	440b      	add	r3, r1
 800616c:	3334      	adds	r3, #52	; 0x34
 800616e:	601a      	str	r2, [r3, #0]
	d->transfers[line].offset = 0;
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	2154      	movs	r1, #84	; 0x54
 8006176:	fb01 f303 	mul.w	r3, r1, r3
 800617a:	4413      	add	r3, r2
 800617c:	3338      	adds	r3, #56	; 0x38
 800617e:	2200      	movs	r2, #0
 8006180:	601a      	str	r2, [r3, #0]

	return 0;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <lineToSDO>:
 ** @param nbBytes
 ** @param data
 **
 ** @return
 **/
UNS8 lineToSDO (CO_Data* d, UNS8 line, UNS32 nbBytes, UNS8* data) {
 800618c:	b590      	push	{r4, r7, lr}
 800618e:	b089      	sub	sp, #36	; 0x24
 8006190:	af02      	add	r7, sp, #8
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	607a      	str	r2, [r7, #4]
 8006196:	603b      	str	r3, [r7, #0]
 8006198:	460b      	mov	r3, r1
 800619a:	72fb      	strb	r3, [r7, #11]
	UNS8 i;
	UNS32 offset;

#ifndef SDO_DYNAMIC_BUFFER_ALLOCATION
	if ((d->transfers[line].offset + nbBytes) > SDO_MAX_LENGTH_TRANSFER) {
 800619c:	7afb      	ldrb	r3, [r7, #11]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	2154      	movs	r1, #84	; 0x54
 80061a2:	fb01 f303 	mul.w	r3, r1, r3
 80061a6:	4413      	add	r3, r2
 80061a8:	3338      	adds	r3, #56	; 0x38
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4413      	add	r3, r2
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d90d      	bls.n	80061d0 <lineToSDO+0x44>
		MSG_ERR(0x1A10,"SDO Size of data too large. Exceed SDO_MAX_LENGTH_TRANSFER", nbBytes);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	9301      	str	r3, [sp, #4]
 80061b8:	4b33      	ldr	r3, [pc, #204]	; (8006288 <lineToSDO+0xfc>)
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	f641 2310 	movw	r3, #6672	; 0x1a10
 80061c0:	f44f 729b 	mov.w	r2, #310	; 0x136
 80061c4:	4931      	ldr	r1, [pc, #196]	; (800628c <lineToSDO+0x100>)
 80061c6:	4832      	ldr	r0, [pc, #200]	; (8006290 <lineToSDO+0x104>)
 80061c8:	f006 fb1c 	bl	800c804 <iprintf>
		return 0xFF;
 80061cc:	23ff      	movs	r3, #255	; 0xff
 80061ce:	e057      	b.n	8006280 <lineToSDO+0xf4>
	}
#endif //SDO_DYNAMIC_BUFFER_ALLOCATION

	if ((d->transfers[line].offset + nbBytes) > d->transfers[line].count) {
 80061d0:	7afb      	ldrb	r3, [r7, #11]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	2154      	movs	r1, #84	; 0x54
 80061d6:	fb01 f303 	mul.w	r3, r1, r3
 80061da:	4413      	add	r3, r2
 80061dc:	3338      	adds	r3, #56	; 0x38
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	441a      	add	r2, r3
 80061e4:	7afb      	ldrb	r3, [r7, #11]
 80061e6:	68f9      	ldr	r1, [r7, #12]
 80061e8:	2054      	movs	r0, #84	; 0x54
 80061ea:	fb00 f303 	mul.w	r3, r0, r3
 80061ee:	440b      	add	r3, r1
 80061f0:	3334      	adds	r3, #52	; 0x34
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d90d      	bls.n	8006214 <lineToSDO+0x88>
		MSG_ERR(0x1A11,"SDO Size of data too large. Exceed count", nbBytes);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	9301      	str	r3, [sp, #4]
 80061fc:	4b25      	ldr	r3, [pc, #148]	; (8006294 <lineToSDO+0x108>)
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	f641 2311 	movw	r3, #6673	; 0x1a11
 8006204:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8006208:	4920      	ldr	r1, [pc, #128]	; (800628c <lineToSDO+0x100>)
 800620a:	4821      	ldr	r0, [pc, #132]	; (8006290 <lineToSDO+0x104>)
 800620c:	f006 fafa 	bl	800c804 <iprintf>
		return 0xFF;
 8006210:	23ff      	movs	r3, #255	; 0xff
 8006212:	e035      	b.n	8006280 <lineToSDO+0xf4>
	}
	offset = d->transfers[line].offset;
 8006214:	7afb      	ldrb	r3, [r7, #11]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	2154      	movs	r1, #84	; 0x54
 800621a:	fb01 f303 	mul.w	r3, r1, r3
 800621e:	4413      	add	r3, r2
 8006220:	3338      	adds	r3, #56	; 0x38
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	613b      	str	r3, [r7, #16]
		}
		for (i = 0 ; i < nbBytes ; i++)
			* (data + i) = d->transfers[line].dynamicData[offset + i];
	}
#else //SDO_DYNAMIC_BUFFER_ALLOCATION
	for (i = 0 ; i < nbBytes ; i++)
 8006226:	2300      	movs	r3, #0
 8006228:	75fb      	strb	r3, [r7, #23]
 800622a:	e012      	b.n	8006252 <lineToSDO+0xc6>
		* (data + i) = d->transfers[line].data[offset + i];
 800622c:	7af9      	ldrb	r1, [r7, #11]
 800622e:	7dfa      	ldrb	r2, [r7, #23]
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	441a      	add	r2, r3
 8006234:	7dfb      	ldrb	r3, [r7, #23]
 8006236:	6838      	ldr	r0, [r7, #0]
 8006238:	4403      	add	r3, r0
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	2454      	movs	r4, #84	; 0x54
 800623e:	fb04 f101 	mul.w	r1, r4, r1
 8006242:	4401      	add	r1, r0
 8006244:	440a      	add	r2, r1
 8006246:	323c      	adds	r2, #60	; 0x3c
 8006248:	7812      	ldrb	r2, [r2, #0]
 800624a:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < nbBytes ; i++)
 800624c:	7dfb      	ldrb	r3, [r7, #23]
 800624e:	3301      	adds	r3, #1
 8006250:	75fb      	strb	r3, [r7, #23]
 8006252:	7dfb      	ldrb	r3, [r7, #23]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	429a      	cmp	r2, r3
 8006258:	d8e8      	bhi.n	800622c <lineToSDO+0xa0>
#endif //SDO_DYNAMIC_BUFFER_ALLOCATION
	d->transfers[line].offset = d->transfers[line].offset + nbBytes;
 800625a:	7afb      	ldrb	r3, [r7, #11]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	2154      	movs	r1, #84	; 0x54
 8006260:	fb01 f303 	mul.w	r3, r1, r3
 8006264:	4413      	add	r3, r2
 8006266:	3338      	adds	r3, #56	; 0x38
 8006268:	6819      	ldr	r1, [r3, #0]
 800626a:	7afb      	ldrb	r3, [r7, #11]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	440a      	add	r2, r1
 8006270:	68f9      	ldr	r1, [r7, #12]
 8006272:	2054      	movs	r0, #84	; 0x54
 8006274:	fb00 f303 	mul.w	r3, r0, r3
 8006278:	440b      	add	r3, r1
 800627a:	3338      	adds	r3, #56	; 0x38
 800627c:	601a      	str	r2, [r3, #0]
	return 0;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	371c      	adds	r7, #28
 8006284:	46bd      	mov	sp, r7
 8006286:	bd90      	pop	{r4, r7, pc}
 8006288:	0800df2c 	.word	0x0800df2c
 800628c:	0800dec8 	.word	0x0800dec8
 8006290:	0800deec 	.word	0x0800deec
 8006294:	0800df68 	.word	0x0800df68

08006298 <SDOtoLine>:
 ** @param data
 **
 ** @return
 **/
UNS8 SDOtoLine (CO_Data* d, UNS8 line, UNS32 nbBytes, UNS8* data)
{
 8006298:	b590      	push	{r4, r7, lr}
 800629a:	b089      	sub	sp, #36	; 0x24
 800629c:	af02      	add	r7, sp, #8
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	607a      	str	r2, [r7, #4]
 80062a2:	603b      	str	r3, [r7, #0]
 80062a4:	460b      	mov	r3, r1
 80062a6:	72fb      	strb	r3, [r7, #11]
	UNS8 i;
	UNS32 offset;
#ifndef SDO_DYNAMIC_BUFFER_ALLOCATION
	if ((d->transfers[line].offset + nbBytes) > SDO_MAX_LENGTH_TRANSFER) {
 80062a8:	7afb      	ldrb	r3, [r7, #11]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	2154      	movs	r1, #84	; 0x54
 80062ae:	fb01 f303 	mul.w	r3, r1, r3
 80062b2:	4413      	add	r3, r2
 80062b4:	3338      	adds	r3, #56	; 0x38
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4413      	add	r3, r2
 80062bc:	2b20      	cmp	r3, #32
 80062be:	d90d      	bls.n	80062dc <SDOtoLine+0x44>
		MSG_ERR(0x1A15,"SDO Size of data too large. Exceed SDO_MAX_LENGTH_TRANSFER", nbBytes);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	9301      	str	r3, [sp, #4]
 80062c4:	4b23      	ldr	r3, [pc, #140]	; (8006354 <SDOtoLine+0xbc>)
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	f641 2315 	movw	r3, #6677	; 0x1a15
 80062cc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80062d0:	4921      	ldr	r1, [pc, #132]	; (8006358 <SDOtoLine+0xc0>)
 80062d2:	4822      	ldr	r0, [pc, #136]	; (800635c <SDOtoLine+0xc4>)
 80062d4:	f006 fa96 	bl	800c804 <iprintf>
		return 0xFF;
 80062d8:	23ff      	movs	r3, #255	; 0xff
 80062da:	e036      	b.n	800634a <SDOtoLine+0xb2>
	}
#endif //SDO_DYNAMIC_BUFFER_ALLOCATION

	offset = d->transfers[line].offset;
 80062dc:	7afb      	ldrb	r3, [r7, #11]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	2154      	movs	r1, #84	; 0x54
 80062e2:	fb01 f303 	mul.w	r3, r1, r3
 80062e6:	4413      	add	r3, r2
 80062e8:	3338      	adds	r3, #56	; 0x38
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	613b      	str	r3, [r7, #16]

		for (i = 0 ; i < nbBytes ; i++)
			lineData[offset + i] = * (data + i);
	}
#else //SDO_DYNAMIC_BUFFER_ALLOCATION
	for (i = 0 ; i < nbBytes ; i++)
 80062ee:	2300      	movs	r3, #0
 80062f0:	75fb      	strb	r3, [r7, #23]
 80062f2:	e013      	b.n	800631c <SDOtoLine+0x84>
		d->transfers[line].data[offset + i] = * (data + i);
 80062f4:	7dfb      	ldrb	r3, [r7, #23]
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	18d1      	adds	r1, r2, r3
 80062fa:	7afa      	ldrb	r2, [r7, #11]
 80062fc:	7df8      	ldrb	r0, [r7, #23]
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	4403      	add	r3, r0
 8006302:	780c      	ldrb	r4, [r1, #0]
 8006304:	68f9      	ldr	r1, [r7, #12]
 8006306:	2054      	movs	r0, #84	; 0x54
 8006308:	fb00 f202 	mul.w	r2, r0, r2
 800630c:	440a      	add	r2, r1
 800630e:	4413      	add	r3, r2
 8006310:	333c      	adds	r3, #60	; 0x3c
 8006312:	4622      	mov	r2, r4
 8006314:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < nbBytes ; i++)
 8006316:	7dfb      	ldrb	r3, [r7, #23]
 8006318:	3301      	adds	r3, #1
 800631a:	75fb      	strb	r3, [r7, #23]
 800631c:	7dfb      	ldrb	r3, [r7, #23]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	429a      	cmp	r2, r3
 8006322:	d8e7      	bhi.n	80062f4 <SDOtoLine+0x5c>
#endif //SDO_DYNAMIC_BUFFER_ALLOCATION

	d->transfers[line].offset = d->transfers[line].offset + nbBytes;
 8006324:	7afb      	ldrb	r3, [r7, #11]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	2154      	movs	r1, #84	; 0x54
 800632a:	fb01 f303 	mul.w	r3, r1, r3
 800632e:	4413      	add	r3, r2
 8006330:	3338      	adds	r3, #56	; 0x38
 8006332:	6819      	ldr	r1, [r3, #0]
 8006334:	7afb      	ldrb	r3, [r7, #11]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	440a      	add	r2, r1
 800633a:	68f9      	ldr	r1, [r7, #12]
 800633c:	2054      	movs	r0, #84	; 0x54
 800633e:	fb00 f303 	mul.w	r3, r0, r3
 8006342:	440b      	add	r3, r1
 8006344:	3338      	adds	r3, #56	; 0x38
 8006346:	601a      	str	r2, [r3, #0]
	return 0;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	371c      	adds	r7, #28
 800634e:	46bd      	mov	sp, r7
 8006350:	bd90      	pop	{r4, r7, pc}
 8006352:	bf00      	nop
 8006354:	0800df2c 	.word	0x0800df2c
 8006358:	0800dec8 	.word	0x0800dec8
 800635c:	0800deec 	.word	0x0800deec

08006360 <failedSDO>:
 **
 ** @return
 **/
UNS8 failedSDO (CO_Data* d, UNS8 CliServNbr, UNS8 whoami, UNS16 index,
		UNS8 subIndex, UNS32 abortCode)
{
 8006360:	b590      	push	{r4, r7, lr}
 8006362:	b087      	sub	sp, #28
 8006364:	af02      	add	r7, sp, #8
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	4608      	mov	r0, r1
 800636a:	4611      	mov	r1, r2
 800636c:	461a      	mov	r2, r3
 800636e:	4603      	mov	r3, r0
 8006370:	70fb      	strb	r3, [r7, #3]
 8006372:	460b      	mov	r3, r1
 8006374:	70bb      	strb	r3, [r7, #2]
 8006376:	4613      	mov	r3, r2
 8006378:	803b      	strh	r3, [r7, #0]
	UNS8 err;
	UNS8 line;
	err = getSDOlineOnUse( d, CliServNbr, whoami, &line );
 800637a:	f107 030e 	add.w	r3, r7, #14
 800637e:	78ba      	ldrb	r2, [r7, #2]
 8006380:	78f9      	ldrb	r1, [r7, #3]
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f9b8 	bl	80066f8 <getSDOlineOnUse>
 8006388:	4603      	mov	r3, r0
 800638a:	73fb      	strb	r3, [r7, #15]
	if (!err) { /* If a line on use have been found.*/
		MSG_WAR(0x3A20, "FailedSDO : line found : ", line);
	}
	if ((! err) && (whoami == SDO_SERVER)) {
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d107      	bne.n	80063a2 <failedSDO+0x42>
 8006392:	78bb      	ldrb	r3, [r7, #2]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d104      	bne.n	80063a2 <failedSDO+0x42>
		resetSDOline( d, line );
 8006398:	7bbb      	ldrb	r3, [r7, #14]
 800639a:	4619      	mov	r1, r3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f84b 	bl	8006438 <resetSDOline>
		MSG_WAR(0x3A21, "FailedSDO : line released : ", line);
	}
	if ((! err) && (whoami == SDO_CLIENT)) {
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d12f      	bne.n	8006408 <failedSDO+0xa8>
 80063a8:	78bb      	ldrb	r3, [r7, #2]
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d12c      	bne.n	8006408 <failedSDO+0xa8>
		StopSDO_TIMER(line);
 80063ae:	7bbb      	ldrb	r3, [r7, #14]
 80063b0:	4619      	mov	r1, r3
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	2354      	movs	r3, #84	; 0x54
 80063b6:	fb03 f301 	mul.w	r3, r3, r1
 80063ba:	4413      	add	r3, r2
 80063bc:	3374      	adds	r3, #116	; 0x74
 80063be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063c2:	7bba      	ldrb	r2, [r7, #14]
 80063c4:	4614      	mov	r4, r2
 80063c6:	4618      	mov	r0, r3
 80063c8:	f004 fca8 	bl	800ad1c <DelAlarm>
 80063cc:	4603      	mov	r3, r0
 80063ce:	4619      	mov	r1, r3
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	2354      	movs	r3, #84	; 0x54
 80063d4:	fb03 f304 	mul.w	r3, r3, r4
 80063d8:	4413      	add	r3, r2
 80063da:	3374      	adds	r3, #116	; 0x74
 80063dc:	460a      	mov	r2, r1
 80063de:	801a      	strh	r2, [r3, #0]
		d->transfers[line].state = SDO_ABORTED_INTERNAL;
 80063e0:	7bbb      	ldrb	r3, [r7, #14]
 80063e2:	4619      	mov	r1, r3
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	2354      	movs	r3, #84	; 0x54
 80063e8:	fb03 f301 	mul.w	r3, r3, r1
 80063ec:	4413      	add	r3, r2
 80063ee:	332a      	adds	r3, #42	; 0x2a
 80063f0:	2285      	movs	r2, #133	; 0x85
 80063f2:	701a      	strb	r2, [r3, #0]
		d->transfers[line].abortCode = abortCode;
 80063f4:	7bbb      	ldrb	r3, [r7, #14]
 80063f6:	4619      	mov	r1, r3
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	2354      	movs	r3, #84	; 0x54
 80063fc:	fb03 f301 	mul.w	r3, r3, r1
 8006400:	4413      	add	r3, r2
 8006402:	332c      	adds	r3, #44	; 0x2c
 8006404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006406:	601a      	str	r2, [r3, #0]
	}
	MSG_WAR(0x3A22, "Sending SDO abort ", 0);
	err = sendSDOabort(d, whoami, CliServNbr, index, subIndex, abortCode);
 8006408:	8838      	ldrh	r0, [r7, #0]
 800640a:	78fa      	ldrb	r2, [r7, #3]
 800640c:	78b9      	ldrb	r1, [r7, #2]
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	9301      	str	r3, [sp, #4]
 8006412:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	4603      	mov	r3, r0
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 faaa 	bl	8006974 <sendSDOabort>
 8006420:	4603      	mov	r3, r0
 8006422:	73fb      	strb	r3, [r7, #15]
	if (err) {
 8006424:	7bfb      	ldrb	r3, [r7, #15]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <failedSDO+0xce>
		MSG_WAR(0x3A23, "Unable to send the SDO abort", 0);
		return 0xFF;
 800642a:	23ff      	movs	r3, #255	; 0xff
 800642c:	e000      	b.n	8006430 <failedSDO+0xd0>
	}
	return 0;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	bd90      	pop	{r4, r7, pc}

08006438 <resetSDOline>:
 * @brief 重置未使用的transfers
 * @param *d 
 * @param line CS通讯管道序号
 */
void resetSDOline ( CO_Data* d, UNS8 line )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af02      	add	r7, sp, #8
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	70fb      	strb	r3, [r7, #3]
	UNS32 i;
	MSG_WAR(0x3A25, "reset SDO line nb : ", line);
	initSDOline(d, line, 0, 0, 0, SDO_RESET);
 8006444:	78f9      	ldrb	r1, [r7, #3]
 8006446:	2300      	movs	r3, #0
 8006448:	9301      	str	r3, [sp, #4]
 800644a:	2300      	movs	r3, #0
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	2300      	movs	r3, #0
 8006450:	2200      	movs	r2, #0
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f82a 	bl	80064ac <initSDOline>
	for (i = 0 ; i < SDO_MAX_LENGTH_TRANSFER ; i++)
 8006458:	2300      	movs	r3, #0
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	e00d      	b.n	800647a <resetSDOline+0x42>
		d->transfers[line].data[i] = 0;
 800645e:	78fb      	ldrb	r3, [r7, #3]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	2154      	movs	r1, #84	; 0x54
 8006464:	fb01 f303 	mul.w	r3, r1, r3
 8006468:	441a      	add	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	4413      	add	r3, r2
 800646e:	333c      	adds	r3, #60	; 0x3c
 8006470:	2200      	movs	r2, #0
 8006472:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < SDO_MAX_LENGTH_TRANSFER ; i++)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3301      	adds	r3, #1
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b1f      	cmp	r3, #31
 800647e:	d9ee      	bls.n	800645e <resetSDOline+0x26>
	d->transfers[line].whoami = 0;
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	2154      	movs	r1, #84	; 0x54
 8006486:	fb01 f303 	mul.w	r3, r1, r3
 800648a:	4413      	add	r3, r2
 800648c:	3329      	adds	r3, #41	; 0x29
 800648e:	2200      	movs	r2, #0
 8006490:	701a      	strb	r2, [r3, #0]
	d->transfers[line].abortCode = 0;
 8006492:	78fb      	ldrb	r3, [r7, #3]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	2154      	movs	r1, #84	; 0x54
 8006498:	fb01 f303 	mul.w	r3, r1, r3
 800649c:	4413      	add	r3, r2
 800649e:	332c      	adds	r3, #44	; 0x2c
 80064a0:	2200      	movs	r2, #0
 80064a2:	601a      	str	r2, [r3, #0]
}
 80064a4:	bf00      	nop
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <initSDOline>:
 * @param subIndex
 * @param state 初始化的状态
 * @return 0
 */
UNS8 initSDOline (CO_Data* d, UNS8 line, UNS8 CliServNbr, UNS16 index, UNS8 subIndex, UNS8 state)
{
 80064ac:	b590      	push	{r4, r7, lr}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	4608      	mov	r0, r1
 80064b6:	4611      	mov	r1, r2
 80064b8:	461a      	mov	r2, r3
 80064ba:	4603      	mov	r3, r0
 80064bc:	70fb      	strb	r3, [r7, #3]
 80064be:	460b      	mov	r3, r1
 80064c0:	70bb      	strb	r3, [r7, #2]
 80064c2:	4613      	mov	r3, r2
 80064c4:	803b      	strh	r3, [r7, #0]
	MSG_WAR(0x3A25, "init SDO line nb : ", line);
	if (state == SDO_DOWNLOAD_IN_PROGRESS       || state == SDO_UPLOAD_IN_PROGRESS ||
 80064c6:	7f3b      	ldrb	r3, [r7, #28]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d008      	beq.n	80064de <initSDOline+0x32>
 80064cc:	7f3b      	ldrb	r3, [r7, #28]
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d005      	beq.n	80064de <initSDOline+0x32>
 80064d2:	7f3b      	ldrb	r3, [r7, #28]
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d002      	beq.n	80064de <initSDOline+0x32>
        state == SDO_BLOCK_DOWNLOAD_IN_PROGRESS || state == SDO_BLOCK_UPLOAD_IN_PROGRESS){
 80064d8:	7f3b      	ldrb	r3, [r7, #28]
 80064da:	2b05      	cmp	r3, #5
 80064dc:	d113      	bne.n	8006506 <initSDOline+0x5a>
		StartSDO_TIMER(line)
 80064de:	78f9      	ldrb	r1, [r7, #3]
 80064e0:	78fc      	ldrb	r4, [r7, #3]
 80064e2:	2300      	movs	r3, #0
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	4b62      	ldr	r3, [pc, #392]	; (8006670 <initSDOline+0x1c4>)
 80064e8:	4a62      	ldr	r2, [pc, #392]	; (8006674 <initSDOline+0x1c8>)
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f004 fb9a 	bl	800ac24 <SetAlarm>
 80064f0:	4603      	mov	r3, r0
 80064f2:	4619      	mov	r1, r3
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	2354      	movs	r3, #84	; 0x54
 80064f8:	fb03 f304 	mul.w	r3, r3, r4
 80064fc:	4413      	add	r3, r2
 80064fe:	3374      	adds	r3, #116	; 0x74
 8006500:	460a      	mov	r2, r1
 8006502:	801a      	strh	r2, [r3, #0]
 8006504:	e016      	b.n	8006534 <initSDOline+0x88>
	}else{
		StopSDO_TIMER(line)
 8006506:	78fb      	ldrb	r3, [r7, #3]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	2154      	movs	r1, #84	; 0x54
 800650c:	fb01 f303 	mul.w	r3, r1, r3
 8006510:	4413      	add	r3, r2
 8006512:	3374      	adds	r3, #116	; 0x74
 8006514:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006518:	78fc      	ldrb	r4, [r7, #3]
 800651a:	4618      	mov	r0, r3
 800651c:	f004 fbfe 	bl	800ad1c <DelAlarm>
 8006520:	4603      	mov	r3, r0
 8006522:	4619      	mov	r1, r3
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	2354      	movs	r3, #84	; 0x54
 8006528:	fb03 f304 	mul.w	r3, r3, r4
 800652c:	4413      	add	r3, r2
 800652e:	3374      	adds	r3, #116	; 0x74
 8006530:	460a      	mov	r2, r1
 8006532:	801a      	strh	r2, [r3, #0]
	}
	d->transfers[line].CliServNbr = CliServNbr;
 8006534:	78fb      	ldrb	r3, [r7, #3]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	2154      	movs	r1, #84	; 0x54
 800653a:	fb01 f303 	mul.w	r3, r1, r3
 800653e:	4413      	add	r3, r2
 8006540:	3328      	adds	r3, #40	; 0x28
 8006542:	78ba      	ldrb	r2, [r7, #2]
 8006544:	701a      	strb	r2, [r3, #0]
	d->transfers[line].index = index;
 8006546:	78fb      	ldrb	r3, [r7, #3]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	2154      	movs	r1, #84	; 0x54
 800654c:	fb01 f303 	mul.w	r3, r1, r3
 8006550:	4413      	add	r3, r2
 8006552:	3330      	adds	r3, #48	; 0x30
 8006554:	883a      	ldrh	r2, [r7, #0]
 8006556:	801a      	strh	r2, [r3, #0]
	d->transfers[line].subIndex = subIndex;
 8006558:	78fb      	ldrb	r3, [r7, #3]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	2154      	movs	r1, #84	; 0x54
 800655e:	fb01 f303 	mul.w	r3, r1, r3
 8006562:	4413      	add	r3, r2
 8006564:	3332      	adds	r3, #50	; 0x32
 8006566:	7e3a      	ldrb	r2, [r7, #24]
 8006568:	701a      	strb	r2, [r3, #0]
	d->transfers[line].state = state;
 800656a:	78fb      	ldrb	r3, [r7, #3]
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	2154      	movs	r1, #84	; 0x54
 8006570:	fb01 f303 	mul.w	r3, r1, r3
 8006574:	4413      	add	r3, r2
 8006576:	332a      	adds	r3, #42	; 0x2a
 8006578:	7f3a      	ldrb	r2, [r7, #28]
 800657a:	701a      	strb	r2, [r3, #0]
	d->transfers[line].toggle = 0;
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	2154      	movs	r1, #84	; 0x54
 8006582:	fb01 f303 	mul.w	r3, r1, r3
 8006586:	4413      	add	r3, r2
 8006588:	332b      	adds	r3, #43	; 0x2b
 800658a:	2200      	movs	r2, #0
 800658c:	701a      	strb	r2, [r3, #0]
	d->transfers[line].count = 0;
 800658e:	78fb      	ldrb	r3, [r7, #3]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	2154      	movs	r1, #84	; 0x54
 8006594:	fb01 f303 	mul.w	r3, r1, r3
 8006598:	4413      	add	r3, r2
 800659a:	3334      	adds	r3, #52	; 0x34
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]
	d->transfers[line].offset = 0;
 80065a0:	78fb      	ldrb	r3, [r7, #3]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	2154      	movs	r1, #84	; 0x54
 80065a6:	fb01 f303 	mul.w	r3, r1, r3
 80065aa:	4413      	add	r3, r2
 80065ac:	3338      	adds	r3, #56	; 0x38
 80065ae:	2200      	movs	r2, #0
 80065b0:	601a      	str	r2, [r3, #0]
    d->transfers[line].peerCRCsupport = 0;
 80065b2:	78fb      	ldrb	r3, [r7, #3]
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	2154      	movs	r1, #84	; 0x54
 80065b8:	fb01 f303 	mul.w	r3, r1, r3
 80065bc:	4413      	add	r3, r2
 80065be:	335c      	adds	r3, #92	; 0x5c
 80065c0:	2200      	movs	r2, #0
 80065c2:	701a      	strb	r2, [r3, #0]
    d->transfers[line].blksize = 0;
 80065c4:	78fb      	ldrb	r3, [r7, #3]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	2154      	movs	r1, #84	; 0x54
 80065ca:	fb01 f303 	mul.w	r3, r1, r3
 80065ce:	4413      	add	r3, r2
 80065d0:	335d      	adds	r3, #93	; 0x5d
 80065d2:	2200      	movs	r2, #0
 80065d4:	701a      	strb	r2, [r3, #0]
    d->transfers[line].ackseq = 0;
 80065d6:	78fb      	ldrb	r3, [r7, #3]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	2154      	movs	r1, #84	; 0x54
 80065dc:	fb01 f303 	mul.w	r3, r1, r3
 80065e0:	4413      	add	r3, r2
 80065e2:	335e      	adds	r3, #94	; 0x5e
 80065e4:	2200      	movs	r2, #0
 80065e6:	701a      	strb	r2, [r3, #0]
    d->transfers[line].objsize = 0;
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	2154      	movs	r1, #84	; 0x54
 80065ee:	fb01 f303 	mul.w	r3, r1, r3
 80065f2:	4413      	add	r3, r2
 80065f4:	3360      	adds	r3, #96	; 0x60
 80065f6:	2200      	movs	r2, #0
 80065f8:	601a      	str	r2, [r3, #0]
    d->transfers[line].lastblockoffset = 0;
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	2154      	movs	r1, #84	; 0x54
 8006600:	fb01 f303 	mul.w	r3, r1, r3
 8006604:	4413      	add	r3, r2
 8006606:	3364      	adds	r3, #100	; 0x64
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]
    d->transfers[line].seqno = 0;
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	2154      	movs	r1, #84	; 0x54
 8006612:	fb01 f303 	mul.w	r3, r1, r3
 8006616:	4413      	add	r3, r2
 8006618:	3368      	adds	r3, #104	; 0x68
 800661a:	2200      	movs	r2, #0
 800661c:	701a      	strb	r2, [r3, #0]
    d->transfers[line].endfield = 0;
 800661e:	78fb      	ldrb	r3, [r7, #3]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	2154      	movs	r1, #84	; 0x54
 8006624:	fb01 f303 	mul.w	r3, r1, r3
 8006628:	4413      	add	r3, r2
 800662a:	3369      	adds	r3, #105	; 0x69
 800662c:	2200      	movs	r2, #0
 800662e:	701a      	strb	r2, [r3, #0]
    d->transfers[line].rxstep = RXSTEP_INIT;
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	2154      	movs	r1, #84	; 0x54
 8006636:	fb01 f303 	mul.w	r3, r1, r3
 800663a:	4413      	add	r3, r2
 800663c:	336a      	adds	r3, #106	; 0x6a
 800663e:	2200      	movs	r2, #0
 8006640:	701a      	strb	r2, [r3, #0]
	d->transfers[line].dataType = 0;
 8006642:	78fb      	ldrb	r3, [r7, #3]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	2154      	movs	r1, #84	; 0x54
 8006648:	fb01 f303 	mul.w	r3, r1, r3
 800664c:	4413      	add	r3, r2
 800664e:	3373      	adds	r3, #115	; 0x73
 8006650:	2200      	movs	r2, #0
 8006652:	701a      	strb	r2, [r3, #0]
	d->transfers[line].Callback = NULL;
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	2154      	movs	r1, #84	; 0x54
 800665a:	fb01 f303 	mul.w	r3, r1, r3
 800665e:	4413      	add	r3, r2
 8006660:	3378      	adds	r3, #120	; 0x78
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
#ifdef SDO_DYNAMIC_BUFFER_ALLOCATION
	free(d->transfers[line].dynamicData);
	d->transfers[line].dynamicData = 0;
	d->transfers[line].dynamicDataSize = 0;
#endif //SDO_DYNAMIC_BUFFER_ALLOCATION
	return 0;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	bd90      	pop	{r4, r7, pc}
 8006670:	000493e0 	.word	0x000493e0
 8006674:	08005ead 	.word	0x08005ead

08006678 <getSDOfreeLine>:
 * @param whoami 我的身份 SDO_SERVER or SDO_CLIENT.
 * @param *line CS通讯管道序号
 * @return 0xFF 所有的结构体都在使用中  Else, return 0.
 */
UNS8 getSDOfreeLine ( CO_Data* d, UNS8 whoami, UNS8 *line )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b088      	sub	sp, #32
 800667c:	af02      	add	r7, sp, #8
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	460b      	mov	r3, r1
 8006682:	607a      	str	r2, [r7, #4]
 8006684:	72fb      	strb	r3, [r7, #11]

	UNS8 i;

	for (i = 0 ; i < SDO_MAX_SIMULTANEOUS_TRANSFERS ; i++){
 8006686:	2300      	movs	r3, #0
 8006688:	75fb      	strb	r3, [r7, #23]
 800668a:	e01a      	b.n	80066c2 <getSDOfreeLine+0x4a>
		if ( d->transfers[i].state == SDO_RESET ) {
 800668c:	7dfb      	ldrb	r3, [r7, #23]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	2154      	movs	r1, #84	; 0x54
 8006692:	fb01 f303 	mul.w	r3, r1, r3
 8006696:	4413      	add	r3, r2
 8006698:	332a      	adds	r3, #42	; 0x2a
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10d      	bne.n	80066bc <getSDOfreeLine+0x44>
			*line = i;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	7dfa      	ldrb	r2, [r7, #23]
 80066a4:	701a      	strb	r2, [r3, #0]
			d->transfers[i].whoami = whoami;
 80066a6:	7dfb      	ldrb	r3, [r7, #23]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	2154      	movs	r1, #84	; 0x54
 80066ac:	fb01 f303 	mul.w	r3, r1, r3
 80066b0:	4413      	add	r3, r2
 80066b2:	3329      	adds	r3, #41	; 0x29
 80066b4:	7afa      	ldrb	r2, [r7, #11]
 80066b6:	701a      	strb	r2, [r3, #0]
			return 0;
 80066b8:	2300      	movs	r3, #0
 80066ba:	e012      	b.n	80066e2 <getSDOfreeLine+0x6a>
	for (i = 0 ; i < SDO_MAX_SIMULTANEOUS_TRANSFERS ; i++){
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
 80066be:	3301      	adds	r3, #1
 80066c0:	75fb      	strb	r3, [r7, #23]
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d0e1      	beq.n	800668c <getSDOfreeLine+0x14>
		} /* end if */
	} /* end for */
	MSG_ERR(0x1A25, "Too many SDO in progress. Aborted.", i);
 80066c8:	7dfb      	ldrb	r3, [r7, #23]
 80066ca:	9301      	str	r3, [sp, #4]
 80066cc:	4b07      	ldr	r3, [pc, #28]	; (80066ec <getSDOfreeLine+0x74>)
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	f641 2325 	movw	r3, #6693	; 0x1a25
 80066d4:	f240 220f 	movw	r2, #527	; 0x20f
 80066d8:	4905      	ldr	r1, [pc, #20]	; (80066f0 <getSDOfreeLine+0x78>)
 80066da:	4806      	ldr	r0, [pc, #24]	; (80066f4 <getSDOfreeLine+0x7c>)
 80066dc:	f006 f892 	bl	800c804 <iprintf>
	return 0xFF;
 80066e0:	23ff      	movs	r3, #255	; 0xff
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	0800df94 	.word	0x0800df94
 80066f0:	0800dec8 	.word	0x0800dec8
 80066f4:	0800deec 	.word	0x0800deec

080066f8 <getSDOlineOnUse>:
 * @param whoami CS通讯管道中 me 扮演的角色
 * @param *line CS通讯管道序号
 * @return 0xFF if error.  Else, return 0
 */
UNS8 getSDOlineOnUse (CO_Data* d, UNS8 CliServNbr, UNS8 whoami, UNS8 *line)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	607b      	str	r3, [r7, #4]
 8006702:	460b      	mov	r3, r1
 8006704:	72fb      	strb	r3, [r7, #11]
 8006706:	4613      	mov	r3, r2
 8006708:	72bb      	strb	r3, [r7, #10]

	UNS8 i;

	for (i = 0 ; i < SDO_MAX_SIMULTANEOUS_TRANSFERS ; i++){
 800670a:	2300      	movs	r3, #0
 800670c:	75fb      	strb	r3, [r7, #23]
 800670e:	e034      	b.n	800677a <getSDOlineOnUse+0x82>
		if ( (d->transfers[i].state != SDO_RESET) &&
 8006710:	7dfb      	ldrb	r3, [r7, #23]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	2154      	movs	r1, #84	; 0x54
 8006716:	fb01 f303 	mul.w	r3, r1, r3
 800671a:	4413      	add	r3, r2
 800671c:	332a      	adds	r3, #42	; 0x2a
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d027      	beq.n	8006774 <getSDOlineOnUse+0x7c>
				(d->transfers[i].state != SDO_ABORTED_INTERNAL) &&
 8006724:	7dfb      	ldrb	r3, [r7, #23]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	2154      	movs	r1, #84	; 0x54
 800672a:	fb01 f303 	mul.w	r3, r1, r3
 800672e:	4413      	add	r3, r2
 8006730:	332a      	adds	r3, #42	; 0x2a
 8006732:	781b      	ldrb	r3, [r3, #0]
		if ( (d->transfers[i].state != SDO_RESET) &&
 8006734:	2b85      	cmp	r3, #133	; 0x85
 8006736:	d01d      	beq.n	8006774 <getSDOlineOnUse+0x7c>
				(d->transfers[i].CliServNbr == CliServNbr) &&
 8006738:	7dfb      	ldrb	r3, [r7, #23]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	2154      	movs	r1, #84	; 0x54
 800673e:	fb01 f303 	mul.w	r3, r1, r3
 8006742:	4413      	add	r3, r2
 8006744:	3328      	adds	r3, #40	; 0x28
 8006746:	781b      	ldrb	r3, [r3, #0]
				(d->transfers[i].state != SDO_ABORTED_INTERNAL) &&
 8006748:	7afa      	ldrb	r2, [r7, #11]
 800674a:	429a      	cmp	r2, r3
 800674c:	d112      	bne.n	8006774 <getSDOlineOnUse+0x7c>
				(d->transfers[i].whoami == whoami) ) {
 800674e:	7dfb      	ldrb	r3, [r7, #23]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	2154      	movs	r1, #84	; 0x54
 8006754:	fb01 f303 	mul.w	r3, r1, r3
 8006758:	4413      	add	r3, r2
 800675a:	3329      	adds	r3, #41	; 0x29
 800675c:	781b      	ldrb	r3, [r3, #0]
				(d->transfers[i].CliServNbr == CliServNbr) &&
 800675e:	7aba      	ldrb	r2, [r7, #10]
 8006760:	429a      	cmp	r2, r3
 8006762:	d107      	bne.n	8006774 <getSDOlineOnUse+0x7c>
			if (line) *line = i;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <getSDOlineOnUse+0x78>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	7dfa      	ldrb	r2, [r7, #23]
 800676e:	701a      	strb	r2, [r3, #0]
			return 0;
 8006770:	2300      	movs	r3, #0
 8006772:	e006      	b.n	8006782 <getSDOlineOnUse+0x8a>
	for (i = 0 ; i < SDO_MAX_SIMULTANEOUS_TRANSFERS ; i++){
 8006774:	7dfb      	ldrb	r3, [r7, #23]
 8006776:	3301      	adds	r3, #1
 8006778:	75fb      	strb	r3, [r7, #23]
 800677a:	7dfb      	ldrb	r3, [r7, #23]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0c7      	beq.n	8006710 <getSDOlineOnUse+0x18>
		}
	}
	return 0xFF;
 8006780:	23ff      	movs	r3, #255	; 0xff
}
 8006782:	4618      	mov	r0, r3
 8006784:	371c      	adds	r7, #28
 8006786:	46bd      	mov	sp, r7
 8006788:	bc80      	pop	{r7}
 800678a:	4770      	bx	lr

0800678c <getSDOlineRestBytes>:
 ** @param nbBytes 
 **
 ** @return
 **/
UNS8 getSDOlineRestBytes (CO_Data* d, UNS8 line, UNS32 * nbBytes)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	460b      	mov	r3, r1
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	72fb      	strb	r3, [r7, #11]
	/* SDO initiated with e=0 and s=0 have count set to null */
	if (d->transfers[line].count == 0)
 800679a:	7afb      	ldrb	r3, [r7, #11]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	2154      	movs	r1, #84	; 0x54
 80067a0:	fb01 f303 	mul.w	r3, r1, r3
 80067a4:	4413      	add	r3, r2
 80067a6:	3334      	adds	r3, #52	; 0x34
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d103      	bne.n	80067b6 <getSDOlineRestBytes+0x2a>
		* nbBytes = 0;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	e012      	b.n	80067dc <getSDOlineRestBytes+0x50>
	else
		* nbBytes = d->transfers[line].count - d->transfers[line].offset;
 80067b6:	7afb      	ldrb	r3, [r7, #11]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	2154      	movs	r1, #84	; 0x54
 80067bc:	fb01 f303 	mul.w	r3, r1, r3
 80067c0:	4413      	add	r3, r2
 80067c2:	3334      	adds	r3, #52	; 0x34
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	7afb      	ldrb	r3, [r7, #11]
 80067c8:	68f9      	ldr	r1, [r7, #12]
 80067ca:	2054      	movs	r0, #84	; 0x54
 80067cc:	fb00 f303 	mul.w	r3, r0, r3
 80067d0:	440b      	add	r3, r1
 80067d2:	3338      	adds	r3, #56	; 0x38
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	1ad2      	subs	r2, r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	601a      	str	r2, [r3, #0]
	return 0;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr

080067e8 <setSDOlineRestBytes>:
 ** @param nbBytes 待发送/接收 字节数
 **
 ** @return
 **/
UNS8 setSDOlineRestBytes (CO_Data* d, UNS8 line, UNS32 nbBytes)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af02      	add	r7, sp, #8
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	460b      	mov	r3, r1
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	72fb      	strb	r3, [r7, #11]
#ifndef SDO_DYNAMIC_BUFFER_ALLOCATION
	if (nbBytes > SDO_MAX_LENGTH_TRANSFER) {
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b20      	cmp	r3, #32
 80067fa:	d90d      	bls.n	8006818 <setSDOlineRestBytes+0x30>
		MSG_ERR(0x1A35,"SDO Size of data too large. Exceed SDO_MAX_LENGTH_TRANSFER", nbBytes);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	4b0c      	ldr	r3, [pc, #48]	; (8006834 <setSDOlineRestBytes+0x4c>)
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	f641 2335 	movw	r3, #6709	; 0x1a35
 8006808:	f44f 7220 	mov.w	r2, #640	; 0x280
 800680c:	490a      	ldr	r1, [pc, #40]	; (8006838 <setSDOlineRestBytes+0x50>)
 800680e:	480b      	ldr	r0, [pc, #44]	; (800683c <setSDOlineRestBytes+0x54>)
 8006810:	f005 fff8 	bl	800c804 <iprintf>
		return 0xFF;
 8006814:	23ff      	movs	r3, #255	; 0xff
 8006816:	e009      	b.n	800682c <setSDOlineRestBytes+0x44>
	}
#endif //SDO_DYNAMIC_BUFFER_ALLOCATION

	d->transfers[line].count = nbBytes;
 8006818:	7afb      	ldrb	r3, [r7, #11]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	2154      	movs	r1, #84	; 0x54
 800681e:	fb01 f303 	mul.w	r3, r1, r3
 8006822:	4413      	add	r3, r2
 8006824:	3334      	adds	r3, #52	; 0x34
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	601a      	str	r2, [r3, #0]
	return 0;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	0800df2c 	.word	0x0800df2c
 8006838:	0800dec8 	.word	0x0800dec8
 800683c:	0800deec 	.word	0x0800deec

08006840 <sendSDO>:
 ** @param CliServNbr Client or Server CAN-ID序列
 ** @param pData 发送数据内容指针
 ** @return canSend(bus_id,&m) or 0xFF if error.
 **/
UNS8 sendSDO (CO_Data* d, UNS8 whoami, UNS8 CliServNbr, UNS8 *pData)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08a      	sub	sp, #40	; 0x28
 8006844:	af02      	add	r7, sp, #8
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	607b      	str	r3, [r7, #4]
 800684a:	460b      	mov	r3, r1
 800684c:	72fb      	strb	r3, [r7, #11]
 800684e:	4613      	mov	r3, r2
 8006850:	72bb      	strb	r3, [r7, #10]
	UNS16 offset;
	UNS8 i;
	Message m;

	MSG_WAR(0x3A38, "sendSDO",0);
	if( !((d->nodeState == Operational) ||  (d->nodeState == Pre_operational ))) {
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006858:	2b05      	cmp	r3, #5
 800685a:	d006      	beq.n	800686a <sendSDO+0x2a>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006862:	2b7f      	cmp	r3, #127	; 0x7f
 8006864:	d001      	beq.n	800686a <sendSDO+0x2a>
		MSG_WAR(0x2A39, "unable to send the SDO (not in op or pre-op mode", d->nodeState);
		return 0xFF;
 8006866:	23ff      	movs	r3, #255	; 0xff
 8006868:	e078      	b.n	800695c <sendSDO+0x11c>
	}

	/*get the server->client cobid*/
	if ( whoami == SDO_SERVER )	{
 800686a:	7afb      	ldrb	r3, [r7, #11]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d12a      	bne.n	80068c6 <sendSDO+0x86>
		offset = d->firstIndex->SDO_SVR;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	83bb      	strh	r3, [r7, #28]
		if ((offset == 0) || ((offset+CliServNbr) > d->lastIndex->SDO_SVR)) {
 8006878:	8bbb      	ldrh	r3, [r7, #28]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d007      	beq.n	800688e <sendSDO+0x4e>
 800687e:	8bba      	ldrh	r2, [r7, #28]
 8006880:	7abb      	ldrb	r3, [r7, #10]
 8006882:	4413      	add	r3, r2
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	6992      	ldr	r2, [r2, #24]
 8006888:	8812      	ldrh	r2, [r2, #0]
 800688a:	4293      	cmp	r3, r2
 800688c:	dd0d      	ble.n	80068aa <sendSDO+0x6a>
			MSG_ERR(0x1A42, "SendSDO : SDO server not found", 0);
 800688e:	2300      	movs	r3, #0
 8006890:	9301      	str	r3, [sp, #4]
 8006892:	4b34      	ldr	r3, [pc, #208]	; (8006964 <sendSDO+0x124>)
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	f641 2342 	movw	r3, #6722	; 0x1a42
 800689a:	f240 22a2 	movw	r2, #674	; 0x2a2
 800689e:	4932      	ldr	r1, [pc, #200]	; (8006968 <sendSDO+0x128>)
 80068a0:	4832      	ldr	r0, [pc, #200]	; (800696c <sendSDO+0x12c>)
 80068a2:	f005 ffaf 	bl	800c804 <iprintf>
			return 0xFF;
 80068a6:	23ff      	movs	r3, #255	; 0xff
 80068a8:	e058      	b.n	800695c <sendSDO+0x11c>
		}
		m.cob_id = UNS16_LE( (UNS16) *((UNS32*) d->objdict[offset+CliServNbr].pSubindex[2].pObject) );
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	8bb9      	ldrh	r1, [r7, #28]
 80068b0:	7abb      	ldrb	r3, [r7, #10]
 80068b2:	440b      	add	r3, r1
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	4413      	add	r3, r2
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3320      	adds	r3, #32
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	823b      	strh	r3, [r7, #16]
 80068c4:	e029      	b.n	800691a <sendSDO+0xda>
		MSG_WAR(0x3A41, "I am server Tx cobId : ", m.cob_id);
	}
	else {			/*case client*/
		/* Get the client->server cobid.*/
		offset = d->firstIndex->SDO_CLT;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	885b      	ldrh	r3, [r3, #2]
 80068cc:	83bb      	strh	r3, [r7, #28]
		if ((offset == 0) || ((offset+CliServNbr) > d->lastIndex->SDO_CLT)) {
 80068ce:	8bbb      	ldrh	r3, [r7, #28]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d007      	beq.n	80068e4 <sendSDO+0xa4>
 80068d4:	8bba      	ldrh	r2, [r7, #28]
 80068d6:	7abb      	ldrb	r3, [r7, #10]
 80068d8:	4413      	add	r3, r2
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	6992      	ldr	r2, [r2, #24]
 80068de:	8852      	ldrh	r2, [r2, #2]
 80068e0:	4293      	cmp	r3, r2
 80068e2:	dd0d      	ble.n	8006900 <sendSDO+0xc0>
			MSG_ERR(0x1A42, "SendSDO : SDO client not found", 0);
 80068e4:	2300      	movs	r3, #0
 80068e6:	9301      	str	r3, [sp, #4]
 80068e8:	4b21      	ldr	r3, [pc, #132]	; (8006970 <sendSDO+0x130>)
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	f641 2342 	movw	r3, #6722	; 0x1a42
 80068f0:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 80068f4:	491c      	ldr	r1, [pc, #112]	; (8006968 <sendSDO+0x128>)
 80068f6:	481d      	ldr	r0, [pc, #116]	; (800696c <sendSDO+0x12c>)
 80068f8:	f005 ff84 	bl	800c804 <iprintf>
			return 0xFF;
 80068fc:	23ff      	movs	r3, #255	; 0xff
 80068fe:	e02d      	b.n	800695c <sendSDO+0x11c>
		}
		m.cob_id = UNS16_LE( (UNS16) *((UNS32*) d->objdict[offset+CliServNbr].pSubindex[1].pObject) );
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	8bb9      	ldrh	r1, [r7, #28]
 8006906:	7abb      	ldrb	r3, [r7, #10]
 8006908:	440b      	add	r3, r1
 800690a:	00db      	lsls	r3, r3, #3
 800690c:	4413      	add	r3, r2
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3310      	adds	r3, #16
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	b29b      	uxth	r3, r3
 8006918:	823b      	strh	r3, [r7, #16]
		MSG_WAR(0x3A41, "I am client Tx cobId : ", m.cob_id);
	}
	/* message copy for sending */
	m.rtr = NOT_A_REQUEST;
 800691a:	2300      	movs	r3, #0
 800691c:	74bb      	strb	r3, [r7, #18]
	/* the length of SDO must be 8 */
	m.len = 8;
 800691e:	2308      	movs	r3, #8
 8006920:	74fb      	strb	r3, [r7, #19]
	for (i = 0 ; i < 8 ; i++) {
 8006922:	2300      	movs	r3, #0
 8006924:	77fb      	strb	r3, [r7, #31]
 8006926:	e00c      	b.n	8006942 <sendSDO+0x102>
		m.data[i] =  pData[i];
 8006928:	7ffb      	ldrb	r3, [r7, #31]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	441a      	add	r2, r3
 800692e:	7ffb      	ldrb	r3, [r7, #31]
 8006930:	7812      	ldrb	r2, [r2, #0]
 8006932:	f107 0120 	add.w	r1, r7, #32
 8006936:	440b      	add	r3, r1
 8006938:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (i = 0 ; i < 8 ; i++) {
 800693c:	7ffb      	ldrb	r3, [r7, #31]
 800693e:	3301      	adds	r3, #1
 8006940:	77fb      	strb	r3, [r7, #31]
 8006942:	7ffb      	ldrb	r3, [r7, #31]
 8006944:	2b07      	cmp	r3, #7
 8006946:	d9ef      	bls.n	8006928 <sendSDO+0xe8>
	}
	return canSend(d->canHandle,&m);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 800694e:	f107 0210 	add.w	r2, r7, #16
 8006952:	4611      	mov	r1, r2
 8006954:	4618      	mov	r0, r3
 8006956:	f7fa fbdf 	bl	8001118 <canSend>
 800695a:	4603      	mov	r3, r0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3720      	adds	r7, #32
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	0800dfb8 	.word	0x0800dfb8
 8006968:	0800dec8 	.word	0x0800dec8
 800696c:	0800deec 	.word	0x0800deec
 8006970:	0800dfd8 	.word	0x0800dfd8

08006974 <sendSDOabort>:
 * @param subIndex
 * @param abortCode 错误代码
 * @return 0
 */
UNS8 sendSDOabort (CO_Data* d, UNS8 whoami, UNS8 CliServNbr, UNS16 index, UNS8 subIndex, UNS32 abortCode)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	4608      	mov	r0, r1
 800697e:	4611      	mov	r1, r2
 8006980:	461a      	mov	r2, r3
 8006982:	4603      	mov	r3, r0
 8006984:	70fb      	strb	r3, [r7, #3]
 8006986:	460b      	mov	r3, r1
 8006988:	70bb      	strb	r3, [r7, #2]
 800698a:	4613      	mov	r3, r2
 800698c:	803b      	strh	r3, [r7, #0]
	UNS8 data[8];
	UNS8 ret;

	MSG_WAR(0x2A50,"Sending SDO abort ", abortCode);
	data[0] = 0x80;
 800698e:	2380      	movs	r3, #128	; 0x80
 8006990:	733b      	strb	r3, [r7, #12]
	/* Index */
	data[1] = (UNS8)(index & 0xFF); /* LSB */
 8006992:	883b      	ldrh	r3, [r7, #0]
 8006994:	b2db      	uxtb	r3, r3
 8006996:	737b      	strb	r3, [r7, #13]
	data[2] = (UNS8)((index >> 8) & 0xFF); /* MSB */
 8006998:	883b      	ldrh	r3, [r7, #0]
 800699a:	0a1b      	lsrs	r3, r3, #8
 800699c:	b29b      	uxth	r3, r3
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	73bb      	strb	r3, [r7, #14]
	/* Subindex */
	data[3] = subIndex;
 80069a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80069a6:	73fb      	strb	r3, [r7, #15]
	/* Data */
	data[4] = (UNS8)(abortCode & 0xFF);
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	743b      	strb	r3, [r7, #16]
	data[5] = (UNS8)((abortCode >> 8) & 0xFF);
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	0a1b      	lsrs	r3, r3, #8
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	747b      	strb	r3, [r7, #17]
	data[6] = (UNS8)((abortCode >> 16) & 0xFF);
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	0c1b      	lsrs	r3, r3, #16
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	74bb      	strb	r3, [r7, #18]
	data[7] = (UNS8)((abortCode >> 24) & 0xFF);
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	0e1b      	lsrs	r3, r3, #24
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	74fb      	strb	r3, [r7, #19]
	ret = sendSDO(d, whoami, CliServNbr, data);
 80069c6:	f107 030c 	add.w	r3, r7, #12
 80069ca:	78ba      	ldrb	r2, [r7, #2]
 80069cc:	78f9      	ldrb	r1, [r7, #3]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff ff36 	bl	8006840 <sendSDO>
 80069d4:	4603      	mov	r3, r0
 80069d6:	75fb      	strb	r3, [r7, #23]

	return ret;
 80069d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <proceedSDO>:
 * 		   - 0xFF if error
 *         - 0x80 if transfer aborted by the server
 *         - 0x0  ok
 */
UNS8 proceedSDO (CO_Data* d, Message *m)
{
 80069e4:	b590      	push	{r4, r7, lr}
 80069e6:	b095      	sub	sp, #84	; 0x54
 80069e8:	af02      	add	r7, sp, #8
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
	UNS8 err;
	UNS8 cs;
	UNS8 line = 0;
 80069ee:	2300      	movs	r3, #0
 80069f0:	76fb      	strb	r3, [r7, #27]
	UNS32 nbBytes; 		/* received or to be transmited. */
	UNS8 nodeId = 0;  	/* The node Id of the server if client otherwise unused */
 80069f2:	2300      	movs	r3, #0
 80069f4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	UNS8 CliServNbr;
	UNS8 whoami = SDO_UNKNOWN;  /* SDO_SERVER or SDO_CLIENT.*/
 80069f8:	2303      	movs	r3, #3
 80069fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	UNS16 index;
	UNS8 subIndex;
	UNS32 abortCode;
	UNS32 i;
	UNS8	j;
	UNS32 *pCobId = NULL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	633b      	str	r3, [r7, #48]	; 0x30
    UNS8 SeqNo;         /* Sequence number in block transfer */
    UNS8 AckSeq;        /* Sequence number of last segment that was received successfully */
	UNS8 NbBytesNoData; /* Number of bytes that do not contain data in last segment of block transfer */ 

	MSG_WAR(0x3A60, "proceedSDO ", 0);
	whoami = SDO_UNKNOWN;
 8006a02:	2303      	movs	r3, #3
 8006a04:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	/* Looking for the cobId in the object dictionary. */
	/* Am-I a server ? */
	offset = d->firstIndex->SDO_SVR;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	873b      	strh	r3, [r7, #56]	; 0x38
	lastIndex = d->lastIndex->SDO_SVR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	85fb      	strh	r3, [r7, #46]	; 0x2e
	j = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	if(offset) while (offset <= lastIndex) {
 8006a1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d03d      	beq.n	8006aa0 <proceedSDO+0xbc>
 8006a24:	e038      	b.n	8006a98 <proceedSDO+0xb4>
		if (d->objdict[offset].bSubCount <= 1) {
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	4413      	add	r3, r2
 8006a30:	791b      	ldrb	r3, [r3, #4]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d811      	bhi.n	8006a5a <proceedSDO+0x76>
			MSG_ERR(0x1A61, "Subindex 1  not found at index ", 0x1200 + j);
 8006a36:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006a3a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8006a3e:	9301      	str	r3, [sp, #4]
 8006a40:	4ba3      	ldr	r3, [pc, #652]	; (8006cd0 <proceedSDO+0x2ec>)
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	f641 2361 	movw	r3, #6753	; 0x1a61
 8006a48:	f240 320e 	movw	r2, #782	; 0x30e
 8006a4c:	49a1      	ldr	r1, [pc, #644]	; (8006cd4 <proceedSDO+0x2f0>)
 8006a4e:	48a2      	ldr	r0, [pc, #648]	; (8006cd8 <proceedSDO+0x2f4>)
 8006a50:	f005 fed8 	bl	800c804 <iprintf>
			return 0xFF;
 8006a54:	23ff      	movs	r3, #255	; 0xff
 8006a56:	f003 b965 	b.w	8009d24 <proceedSDO+0x3340>
		}
		/* Looking for the cobid received. */
		pCobId = (UNS32*) d->objdict[offset].pSubindex[1].pObject;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	4413      	add	r3, r2
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3310      	adds	r3, #16
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	633b      	str	r3, [r7, #48]	; 0x30
		if ( *pCobId == UNS16_LE(m->cob_id) ) {
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	8812      	ldrh	r2, [r2, #0]
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d107      	bne.n	8006a88 <proceedSDO+0xa4>
			whoami = SDO_SERVER;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			MSG_WAR(0x3A62, "proceedSDO. I am server. index : ", 0x1200 + j);
			/* Defining Server number = index minus 0x1200 where the cobid received is defined. */
			CliServNbr = j;
 8006a7e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006a82:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			break;
 8006a86:	e00b      	b.n	8006aa0 <proceedSDO+0xbc>
		}
		j++;
 8006a88:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		offset++;
 8006a92:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006a94:	3301      	adds	r3, #1
 8006a96:	873b      	strh	r3, [r7, #56]	; 0x38
	if(offset) while (offset <= lastIndex) {
 8006a98:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8006a9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d9c2      	bls.n	8006a26 <proceedSDO+0x42>
	} /* end while */
	if (whoami == SDO_UNKNOWN) {
 8006aa0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006aa4:	2b03      	cmp	r3, #3
 8006aa6:	d156      	bne.n	8006b56 <proceedSDO+0x172>
		/* Am-I client ? */
		offset = d->firstIndex->SDO_CLT;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	885b      	ldrh	r3, [r3, #2]
 8006aae:	873b      	strh	r3, [r7, #56]	; 0x38
		lastIndex = d->lastIndex->SDO_CLT;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	885b      	ldrh	r3, [r3, #2]
 8006ab6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		j = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if(offset) while (offset <= lastIndex) {
 8006abe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d048      	beq.n	8006b56 <proceedSDO+0x172>
 8006ac4:	e043      	b.n	8006b4e <proceedSDO+0x16a>
			if (d->objdict[offset].bSubCount <= 3) {
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006acc:	00db      	lsls	r3, r3, #3
 8006ace:	4413      	add	r3, r2
 8006ad0:	791b      	ldrb	r3, [r3, #4]
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	d811      	bhi.n	8006afa <proceedSDO+0x116>
				MSG_ERR(0x1A63, "Subindex 3  not found at index ", 0x1280 + j);
 8006ad6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006ada:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	4b7e      	ldr	r3, [pc, #504]	; (8006cdc <proceedSDO+0x2f8>)
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	f641 2363 	movw	r3, #6755	; 0x1a63
 8006ae8:	f44f 7249 	mov.w	r2, #804	; 0x324
 8006aec:	4979      	ldr	r1, [pc, #484]	; (8006cd4 <proceedSDO+0x2f0>)
 8006aee:	487a      	ldr	r0, [pc, #488]	; (8006cd8 <proceedSDO+0x2f4>)
 8006af0:	f005 fe88 	bl	800c804 <iprintf>
				return 0xFF;
 8006af4:	23ff      	movs	r3, #255	; 0xff
 8006af6:	f003 b915 	b.w	8009d24 <proceedSDO+0x3340>
			}
			/* Looking for the cobid received. */
			pCobId = (UNS32*) d->objdict[offset].pSubindex[2].pObject;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	4413      	add	r3, r2
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3320      	adds	r3, #32
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	633b      	str	r3, [r7, #48]	; 0x30
			if (*pCobId == UNS16_LE(m->cob_id) ) {
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	8812      	ldrh	r2, [r2, #0]
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d112      	bne.n	8006b3e <proceedSDO+0x15a>
				whoami = SDO_CLIENT;
 8006b18:	2302      	movs	r3, #2
 8006b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				MSG_WAR(0x3A64, "proceedSDO. I am client index : ", 0x1280 + j);
				/* Defining Client number = index minus 0x1280 where the cobid received is defined. */
				CliServNbr = j;
 8006b1e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006b22:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
				/* Reading the server node ID, if client it is mandatory in the OD */
				nodeId = *((UNS8*) d->objdict[offset].pSubindex[3].pObject);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	4413      	add	r3, r2
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3330      	adds	r3, #48	; 0x30
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				break;
 8006b3c:	e00b      	b.n	8006b56 <proceedSDO+0x172>
			}
			j++;
 8006b3e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006b42:	3301      	adds	r3, #1
 8006b44:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			offset++;
 8006b48:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	873b      	strh	r3, [r7, #56]	; 0x38
		if(offset) while (offset <= lastIndex) {
 8006b4e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8006b50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d9b7      	bls.n	8006ac6 <proceedSDO+0xe2>
		} /* end while */
	}
	if (whoami == SDO_UNKNOWN) {
 8006b56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d102      	bne.n	8006b64 <proceedSDO+0x180>
		return 0xFF;/* This SDO was not for us ! */
 8006b5e:	23ff      	movs	r3, #255	; 0xff
 8006b60:	f003 b8e0 	b.w	8009d24 <proceedSDO+0x3340>
	}

	/* Test if the size of the SDO is ok */
	if ( (*m).len != 8) {
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	78db      	ldrb	r3, [r3, #3]
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d01b      	beq.n	8006ba4 <proceedSDO+0x1c0>
		MSG_ERR(0x1A67, "Error size SDO", 0);
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	9301      	str	r3, [sp, #4]
 8006b70:	4b5b      	ldr	r3, [pc, #364]	; (8006ce0 <proceedSDO+0x2fc>)
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	f641 2367 	movw	r3, #6759	; 0x1a67
 8006b78:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8006b7c:	4955      	ldr	r1, [pc, #340]	; (8006cd4 <proceedSDO+0x2f0>)
 8006b7e:	4856      	ldr	r0, [pc, #344]	; (8006cd8 <proceedSDO+0x2f4>)
 8006b80:	f005 fe40 	bl	800c804 <iprintf>
		failedSDO(d, CliServNbr, whoami, 0, 0, SDOABT_GENERAL_ERROR);
 8006b84:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8006b88:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8006b8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b90:	9301      	str	r3, [sp, #4]
 8006b92:	2300      	movs	r3, #0
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	2300      	movs	r3, #0
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7ff fbe1 	bl	8006360 <failedSDO>
		return 0xFF;
 8006b9e:	23ff      	movs	r3, #255	; 0xff
 8006ba0:	f003 b8c0 	b.w	8009d24 <proceedSDO+0x3340>
	else {
		MSG_WAR(0x3A69, "I am SERVER number ", CliServNbr);
	}

	/* Look for an SDO transfer already initiated. */
	err = getSDOlineOnUse( d, CliServNbr, whoami, &line );
 8006ba4:	f107 031b 	add.w	r3, r7, #27
 8006ba8:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8006bac:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff fda1 	bl	80066f8 <getSDOlineOnUse>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Let's find cs value, first it is set as "not valid" */
	cs = 0xFF; 
 8006bbc:	23ff      	movs	r3, #255	; 0xff
 8006bbe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	/* Special cases for block transfer : in frames with segment data cs is not spécified */
   	if (!err) {
 8006bc2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d128      	bne.n	8006c1c <proceedSDO+0x238>
		if (((whoami == SDO_SERVER) && (d->transfers[line].state == SDO_BLOCK_DOWNLOAD_IN_PROGRESS)) ||
 8006bca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d10a      	bne.n	8006be8 <proceedSDO+0x204>
 8006bd2:	7efb      	ldrb	r3, [r7, #27]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	2354      	movs	r3, #84	; 0x54
 8006bda:	fb03 f301 	mul.w	r3, r3, r1
 8006bde:	4413      	add	r3, r2
 8006be0:	332a      	adds	r3, #42	; 0x2a
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	d00e      	beq.n	8006c06 <proceedSDO+0x222>
 8006be8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d115      	bne.n	8006c1c <proceedSDO+0x238>
			((whoami == SDO_CLIENT) && (d->transfers[line].state == SDO_BLOCK_UPLOAD_IN_PROGRESS))) {		
 8006bf0:	7efb      	ldrb	r3, [r7, #27]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	2354      	movs	r3, #84	; 0x54
 8006bf8:	fb03 f301 	mul.w	r3, r3, r1
 8006bfc:	4413      	add	r3, r2
 8006bfe:	332a      	adds	r3, #42	; 0x2a
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	2b05      	cmp	r3, #5
 8006c04:	d10a      	bne.n	8006c1c <proceedSDO+0x238>
			if(m->data[0] == 0x80)	/* If first byte is 0x80 it is an abort frame (seqno = 0 not allowed) */
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	791b      	ldrb	r3, [r3, #4]
 8006c0a:	2b80      	cmp	r3, #128	; 0x80
 8006c0c:	d103      	bne.n	8006c16 <proceedSDO+0x232>
				cs = 4;
 8006c0e:	2304      	movs	r3, #4
 8006c10:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006c14:	e002      	b.n	8006c1c <proceedSDO+0x238>
			else
				cs = 6;
 8006c16:	2306      	movs	r3, #6
 8006c18:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		}
	}
	/* Other cases : cs is specified */
	if (cs == 0xFF)
 8006c1c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006c20:	2bff      	cmp	r3, #255	; 0xff
 8006c22:	d104      	bne.n	8006c2e <proceedSDO+0x24a>
		cs = getSDOcs(m->data[0]);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	791b      	ldrb	r3, [r3, #4]
 8006c28:	095b      	lsrs	r3, r3, #5
 8006c2a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	/* Testing the command specifier */
	/* Allowed : cs = 0, 1, 2, 3, 4, 5, 6 */
	/* cs = other : Not allowed -> abort. */
	switch (cs) {
 8006c2e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006c32:	2b06      	cmp	r3, #6
 8006c34:	f203 8030 	bhi.w	8009c98 <proceedSDO+0x32b4>
 8006c38:	a201      	add	r2, pc, #4	; (adr r2, 8006c40 <proceedSDO+0x25c>)
 8006c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3e:	bf00      	nop
 8006c40:	08006c5d 	.word	0x08006c5d
 8006c44:	0800721f 	.word	0x0800721f
 8006c48:	08007831 	.word	0x08007831
 8006c4c:	08007d25 	.word	0x08007d25
 8006c50:	080082f1 	.word	0x080082f1
 8006c54:	080083d9 	.word	0x080083d9
 8006c58:	0800901b 	.word	0x0800901b

		case 0:
			/* I am SERVER */
			if (whoami == SDO_SERVER) {
 8006c5c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	f040 8165 	bne.w	8006f30 <proceedSDO+0x54c>
				/* Receiving a download segment data : an SDO transfer should have been yet initiated. */
				if (!err)
 8006c66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10f      	bne.n	8006c8e <proceedSDO+0x2aa>
					err = (UNS8)(d->transfers[line].state != SDO_DOWNLOAD_IN_PROGRESS);
 8006c6e:	7efb      	ldrb	r3, [r7, #27]
 8006c70:	4619      	mov	r1, r3
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	2354      	movs	r3, #84	; 0x54
 8006c76:	fb03 f301 	mul.w	r3, r3, r1
 8006c7a:	4413      	add	r3, r2
 8006c7c:	332a      	adds	r3, #42	; 0x2a
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	bf14      	ite	ne
 8006c84:	2301      	movne	r3, #1
 8006c86:	2300      	moveq	r3, #0
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (err) {
 8006c8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d02a      	beq.n	8006cec <proceedSDO+0x308>
					MSG_ERR(0x1A70, "SDO error : Received download segment for unstarted trans. index 0x1200 + ",
 8006c96:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006c9a:	9301      	str	r3, [sp, #4]
 8006c9c:	4b11      	ldr	r3, [pc, #68]	; (8006ce4 <proceedSDO+0x300>)
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	f641 2370 	movw	r3, #6768	; 0x1a70
 8006ca4:	f44f 725a 	mov.w	r2, #872	; 0x368
 8006ca8:	490a      	ldr	r1, [pc, #40]	; (8006cd4 <proceedSDO+0x2f0>)
 8006caa:	480b      	ldr	r0, [pc, #44]	; (8006cd8 <proceedSDO+0x2f4>)
 8006cac:	f005 fdaa 	bl	800c804 <iprintf>
							CliServNbr);
					failedSDO(d, CliServNbr, whoami, 0, 0, SDOABT_LOCAL_CTRL_ERROR);
 8006cb0:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8006cb4:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8006cb8:	4b0b      	ldr	r3, [pc, #44]	; (8006ce8 <proceedSDO+0x304>)
 8006cba:	9301      	str	r3, [sp, #4]
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	9300      	str	r3, [sp, #0]
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff fb4c 	bl	8006360 <failedSDO>
					return 0xFF;
 8006cc8:	23ff      	movs	r3, #255	; 0xff
 8006cca:	f003 b82b 	b.w	8009d24 <proceedSDO+0x3340>
 8006cce:	bf00      	nop
 8006cd0:	0800dff8 	.word	0x0800dff8
 8006cd4:	0800dec8 	.word	0x0800dec8
 8006cd8:	0800deec 	.word	0x0800deec
 8006cdc:	0800e018 	.word	0x0800e018
 8006ce0:	0800e038 	.word	0x0800e038
 8006ce4:	0800e048 	.word	0x0800e048
 8006ce8:	08000021 	.word	0x08000021
				}
				/* Reset the wathdog */
				RestartSDO_TIMER(line)
 8006cec:	7efb      	ldrb	r3, [r7, #27]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	2354      	movs	r3, #84	; 0x54
 8006cf4:	fb03 f301 	mul.w	r3, r3, r1
 8006cf8:	4413      	add	r3, r2
 8006cfa:	3374      	adds	r3, #116	; 0x74
 8006cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d04:	d02d      	beq.n	8006d62 <proceedSDO+0x37e>
 8006d06:	7efb      	ldrb	r3, [r7, #27]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	2354      	movs	r3, #84	; 0x54
 8006d0e:	fb03 f301 	mul.w	r3, r3, r1
 8006d12:	4413      	add	r3, r2
 8006d14:	3374      	adds	r3, #116	; 0x74
 8006d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d1a:	7efa      	ldrb	r2, [r7, #27]
 8006d1c:	4614      	mov	r4, r2
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f003 fffc 	bl	800ad1c <DelAlarm>
 8006d24:	4603      	mov	r3, r0
 8006d26:	4619      	mov	r1, r3
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	2354      	movs	r3, #84	; 0x54
 8006d2c:	fb03 f304 	mul.w	r3, r3, r4
 8006d30:	4413      	add	r3, r2
 8006d32:	3374      	adds	r3, #116	; 0x74
 8006d34:	460a      	mov	r2, r1
 8006d36:	801a      	strh	r2, [r3, #0]
 8006d38:	7efb      	ldrb	r3, [r7, #27]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	7efb      	ldrb	r3, [r7, #27]
 8006d3e:	461c      	mov	r4, r3
 8006d40:	2300      	movs	r3, #0
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	4b94      	ldr	r3, [pc, #592]	; (8006f98 <proceedSDO+0x5b4>)
 8006d46:	4a95      	ldr	r2, [pc, #596]	; (8006f9c <proceedSDO+0x5b8>)
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f003 ff6b 	bl	800ac24 <SetAlarm>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	4619      	mov	r1, r3
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	2354      	movs	r3, #84	; 0x54
 8006d56:	fb03 f304 	mul.w	r3, r3, r4
 8006d5a:	4413      	add	r3, r2
 8006d5c:	3374      	adds	r3, #116	; 0x74
 8006d5e:	460a      	mov	r2, r1
 8006d60:	801a      	strh	r2, [r3, #0]
					MSG_WAR(0x3A71, "Received SDO download segment defined at index 0x1200 + ", CliServNbr);
				index = d->transfers[line].index;
 8006d62:	7efb      	ldrb	r3, [r7, #27]
 8006d64:	4619      	mov	r1, r3
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	2354      	movs	r3, #84	; 0x54
 8006d6a:	fb03 f301 	mul.w	r3, r3, r1
 8006d6e:	4413      	add	r3, r2
 8006d70:	3330      	adds	r3, #48	; 0x30
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	84bb      	strh	r3, [r7, #36]	; 0x24
				subIndex = d->transfers[line].subIndex;
 8006d76:	7efb      	ldrb	r3, [r7, #27]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	2354      	movs	r3, #84	; 0x54
 8006d7e:	fb03 f301 	mul.w	r3, r3, r1
 8006d82:	4413      	add	r3, r2
 8006d84:	3332      	adds	r3, #50	; 0x32
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				/* Toggle test. */
				if (d->transfers[line].toggle != getSDOt(m->data[0])) {
 8006d8c:	7efb      	ldrb	r3, [r7, #27]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	2354      	movs	r3, #84	; 0x54
 8006d94:	fb03 f301 	mul.w	r3, r3, r1
 8006d98:	4413      	add	r3, r2
 8006d9a:	332b      	adds	r3, #43	; 0x2b
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	791b      	ldrb	r3, [r3, #4]
 8006da4:	091b      	lsrs	r3, r3, #4
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d021      	beq.n	8006df4 <proceedSDO+0x410>
					MSG_ERR(0x1A72, "SDO error : Toggle error : ", getSDOt(m->data[0]));
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	791b      	ldrb	r3, [r3, #4]
 8006db4:	091b      	lsrs	r3, r3, #4
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	9301      	str	r3, [sp, #4]
 8006dbe:	4b78      	ldr	r3, [pc, #480]	; (8006fa0 <proceedSDO+0x5bc>)
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	f641 2372 	movw	r3, #6770	; 0x1a72
 8006dc6:	f240 3273 	movw	r2, #883	; 0x373
 8006dca:	4976      	ldr	r1, [pc, #472]	; (8006fa4 <proceedSDO+0x5c0>)
 8006dcc:	4876      	ldr	r0, [pc, #472]	; (8006fa8 <proceedSDO+0x5c4>)
 8006dce:	f005 fd19 	bl	800c804 <iprintf>
					failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_TOGGLE_NOT_ALTERNED);
 8006dd2:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8006dd4:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8006dd8:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8006ddc:	4b73      	ldr	r3, [pc, #460]	; (8006fac <proceedSDO+0x5c8>)
 8006dde:	9301      	str	r3, [sp, #4]
 8006de0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	4603      	mov	r3, r0
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7ff fab9 	bl	8006360 <failedSDO>
					return 0xFF;
 8006dee:	23ff      	movs	r3, #255	; 0xff
 8006df0:	f002 bf98 	b.w	8009d24 <proceedSDO+0x3340>
				}
				/* Nb of data to be downloaded */
				nbBytes = 7 - getSDOn3(m->data[0]);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	791b      	ldrb	r3, [r3, #4]
 8006df8:	085b      	lsrs	r3, r3, #1
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	43db      	mvns	r3, r3
 8006dfe:	f003 0307 	and.w	r3, r3, #7
 8006e02:	617b      	str	r3, [r7, #20]
				/* Store the data in the transfer structure. */
				err = SDOtoLine(d, line, nbBytes, (*m).data + 1);
 8006e04:	7ef9      	ldrb	r1, [r7, #27]
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7ff fa42 	bl	8006298 <SDOtoLine>
 8006e14:	4603      	mov	r3, r0
 8006e16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (err) {
 8006e1a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d011      	beq.n	8006e46 <proceedSDO+0x462>
					failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_GENERAL_ERROR);
 8006e22:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8006e24:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8006e28:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8006e2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e30:	9301      	str	r3, [sp, #4]
 8006e32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	4603      	mov	r3, r0
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7ff fa90 	bl	8006360 <failedSDO>
					return 0xFF;
 8006e40:	23ff      	movs	r3, #255	; 0xff
 8006e42:	f002 bf6f 	b.w	8009d24 <proceedSDO+0x3340>
				}
				/* Sending the SDO response, CS = 1 */
				data[0] = (UNS8)((1 << 5) | (d->transfers[line].toggle << 4));
 8006e46:	7efb      	ldrb	r3, [r7, #27]
 8006e48:	4619      	mov	r1, r3
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	2354      	movs	r3, #84	; 0x54
 8006e4e:	fb03 f301 	mul.w	r3, r3, r1
 8006e52:	4413      	add	r3, r2
 8006e54:	332b      	adds	r3, #43	; 0x2b
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	011b      	lsls	r3, r3, #4
 8006e5a:	b25b      	sxtb	r3, r3
 8006e5c:	f043 0320 	orr.w	r3, r3, #32
 8006e60:	b25b      	sxtb	r3, r3
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	733b      	strb	r3, [r7, #12]
				for (i = 1 ; i < 8 ; i++)
 8006e66:	2301      	movs	r3, #1
 8006e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e6a:	e008      	b.n	8006e7e <proceedSDO+0x49a>
					data[i] = 0;
 8006e6c:	f107 020c 	add.w	r2, r7, #12
 8006e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e72:	4413      	add	r3, r2
 8006e74:	2200      	movs	r2, #0
 8006e76:	701a      	strb	r2, [r3, #0]
				for (i = 1 ; i < 8 ; i++)
 8006e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e80:	2b07      	cmp	r3, #7
 8006e82:	d9f3      	bls.n	8006e6c <proceedSDO+0x488>
				MSG_WAR(0x3A73, "SDO. Send response to download request defined at index 0x1200 + ", CliServNbr);
				sendSDO(d, whoami, CliServNbr, data);
 8006e84:	f107 030c 	add.w	r3, r7, #12
 8006e88:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8006e8c:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7ff fcd5 	bl	8006840 <sendSDO>
				/* Inverting the toggle for the next segment. */
				d->transfers[line].toggle = (UNS8)(! d->transfers[line].toggle & 1);
 8006e96:	7efb      	ldrb	r3, [r7, #27]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	2354      	movs	r3, #84	; 0x54
 8006e9e:	fb03 f301 	mul.w	r3, r3, r1
 8006ea2:	4413      	add	r3, r2
 8006ea4:	332b      	adds	r3, #43	; 0x2b
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	bf0c      	ite	eq
 8006eac:	2301      	moveq	r3, #1
 8006eae:	2300      	movne	r3, #0
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	7efa      	ldrb	r2, [r7, #27]
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	2354      	movs	r3, #84	; 0x54
 8006ebc:	fb03 f301 	mul.w	r3, r3, r1
 8006ec0:	4413      	add	r3, r2
 8006ec2:	332b      	adds	r3, #43	; 0x2b
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	701a      	strb	r2, [r3, #0]
				/* If it was the last segment, */
				if (getSDOc(m->data[0])) {
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	791b      	ldrb	r3, [r3, #4]
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f002 871f 	beq.w	8009d14 <proceedSDO+0x3330>
					/* Transfering line data to object dictionary. */
					/* The code does not use the "d" of initiate frame. So it is safe if e=s=0 */
					errorCode = SDOlineToObjdict(d, line);
 8006ed6:	7efb      	ldrb	r3, [r7, #27]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7ff f8b0 	bl	8006040 <SDOlineToObjdict>
 8006ee0:	62b8      	str	r0, [r7, #40]	; 0x28
					if (errorCode) {
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d01c      	beq.n	8006f22 <proceedSDO+0x53e>
						MSG_ERR(0x1A54, "SDO error : Unable to copy the data in the object dictionary", 0);
 8006ee8:	2300      	movs	r3, #0
 8006eea:	9301      	str	r3, [sp, #4]
 8006eec:	4b30      	ldr	r3, [pc, #192]	; (8006fb0 <proceedSDO+0x5cc>)
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	f641 2354 	movw	r3, #6740	; 0x1a54
 8006ef4:	f240 328d 	movw	r2, #909	; 0x38d
 8006ef8:	492a      	ldr	r1, [pc, #168]	; (8006fa4 <proceedSDO+0x5c0>)
 8006efa:	482b      	ldr	r0, [pc, #172]	; (8006fa8 <proceedSDO+0x5c4>)
 8006efc:	f005 fc82 	bl	800c804 <iprintf>
						failedSDO(d, CliServNbr, whoami, index, subIndex, errorCode);
 8006f00:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8006f02:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8006f06:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8006f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	4603      	mov	r3, r0
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7ff fa22 	bl	8006360 <failedSDO>
						return 0xFF;
 8006f1c:	23ff      	movs	r3, #255	; 0xff
 8006f1e:	f002 bf01 	b.w	8009d24 <proceedSDO+0x3340>
					}
					/* Release of the line */
					resetSDOline(d, line);
 8006f22:	7efb      	ldrb	r3, [r7, #27]
 8006f24:	4619      	mov	r1, r3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7ff fa86 	bl	8006438 <resetSDOline>
						data[i] = 0;
					sendSDO(d, whoami, CliServNbr, data);
					MSG_WAR(0x3A78, "SDO send upload segment request to nodeId", nodeId);
				}
			} /* End if CLIENT */
			break;
 8006f2c:	f002 bef2 	b.w	8009d14 <proceedSDO+0x3330>
				if (!err)
 8006f30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10f      	bne.n	8006f58 <proceedSDO+0x574>
					err = (UNS8)(d->transfers[line].state != SDO_UPLOAD_IN_PROGRESS);
 8006f38:	7efb      	ldrb	r3, [r7, #27]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	2354      	movs	r3, #84	; 0x54
 8006f40:	fb03 f301 	mul.w	r3, r3, r1
 8006f44:	4413      	add	r3, r2
 8006f46:	332a      	adds	r3, #42	; 0x2a
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	bf14      	ite	ne
 8006f4e:	2301      	movne	r3, #1
 8006f50:	2300      	moveq	r3, #0
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (err) {
 8006f58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d02d      	beq.n	8006fbc <proceedSDO+0x5d8>
					MSG_ERR(0x1A75, "SDO error : Received segment response for unknown trans. from nodeId", nodeId);
 8006f60:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006f64:	9301      	str	r3, [sp, #4]
 8006f66:	4b13      	ldr	r3, [pc, #76]	; (8006fb4 <proceedSDO+0x5d0>)
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	f641 2375 	movw	r3, #6773	; 0x1a75
 8006f6e:	f44f 7267 	mov.w	r2, #924	; 0x39c
 8006f72:	490c      	ldr	r1, [pc, #48]	; (8006fa4 <proceedSDO+0x5c0>)
 8006f74:	480c      	ldr	r0, [pc, #48]	; (8006fa8 <proceedSDO+0x5c4>)
 8006f76:	f005 fc45 	bl	800c804 <iprintf>
					failedSDO(d, CliServNbr, whoami, 0, 0, SDOABT_LOCAL_CTRL_ERROR);
 8006f7a:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8006f7e:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8006f82:	4b0d      	ldr	r3, [pc, #52]	; (8006fb8 <proceedSDO+0x5d4>)
 8006f84:	9301      	str	r3, [sp, #4]
 8006f86:	2300      	movs	r3, #0
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff f9e7 	bl	8006360 <failedSDO>
					return 0xFF;
 8006f92:	23ff      	movs	r3, #255	; 0xff
 8006f94:	f002 bec6 	b.w	8009d24 <proceedSDO+0x3340>
 8006f98:	000493e0 	.word	0x000493e0
 8006f9c:	08005ead 	.word	0x08005ead
 8006fa0:	0800e094 	.word	0x0800e094
 8006fa4:	0800dec8 	.word	0x0800dec8
 8006fa8:	0800deec 	.word	0x0800deec
 8006fac:	05030000 	.word	0x05030000
 8006fb0:	0800e0b0 	.word	0x0800e0b0
 8006fb4:	0800e0f0 	.word	0x0800e0f0
 8006fb8:	08000021 	.word	0x08000021
				RestartSDO_TIMER(line)
 8006fbc:	7efb      	ldrb	r3, [r7, #27]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	2354      	movs	r3, #84	; 0x54
 8006fc4:	fb03 f301 	mul.w	r3, r3, r1
 8006fc8:	4413      	add	r3, r2
 8006fca:	3374      	adds	r3, #116	; 0x74
 8006fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fd4:	d02d      	beq.n	8007032 <proceedSDO+0x64e>
 8006fd6:	7efb      	ldrb	r3, [r7, #27]
 8006fd8:	4619      	mov	r1, r3
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	2354      	movs	r3, #84	; 0x54
 8006fde:	fb03 f301 	mul.w	r3, r3, r1
 8006fe2:	4413      	add	r3, r2
 8006fe4:	3374      	adds	r3, #116	; 0x74
 8006fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fea:	7efa      	ldrb	r2, [r7, #27]
 8006fec:	4614      	mov	r4, r2
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f003 fe94 	bl	800ad1c <DelAlarm>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	2354      	movs	r3, #84	; 0x54
 8006ffc:	fb03 f304 	mul.w	r3, r3, r4
 8007000:	4413      	add	r3, r2
 8007002:	3374      	adds	r3, #116	; 0x74
 8007004:	460a      	mov	r2, r1
 8007006:	801a      	strh	r2, [r3, #0]
 8007008:	7efb      	ldrb	r3, [r7, #27]
 800700a:	4619      	mov	r1, r3
 800700c:	7efb      	ldrb	r3, [r7, #27]
 800700e:	461c      	mov	r4, r3
 8007010:	2300      	movs	r3, #0
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	4bb2      	ldr	r3, [pc, #712]	; (80072e0 <proceedSDO+0x8fc>)
 8007016:	4ab3      	ldr	r2, [pc, #716]	; (80072e4 <proceedSDO+0x900>)
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f003 fe03 	bl	800ac24 <SetAlarm>
 800701e:	4603      	mov	r3, r0
 8007020:	4619      	mov	r1, r3
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	2354      	movs	r3, #84	; 0x54
 8007026:	fb03 f304 	mul.w	r3, r3, r4
 800702a:	4413      	add	r3, r2
 800702c:	3374      	adds	r3, #116	; 0x74
 800702e:	460a      	mov	r2, r1
 8007030:	801a      	strh	r2, [r3, #0]
					index = d->transfers[line].index;
 8007032:	7efb      	ldrb	r3, [r7, #27]
 8007034:	4619      	mov	r1, r3
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	2354      	movs	r3, #84	; 0x54
 800703a:	fb03 f301 	mul.w	r3, r3, r1
 800703e:	4413      	add	r3, r2
 8007040:	3330      	adds	r3, #48	; 0x30
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	84bb      	strh	r3, [r7, #36]	; 0x24
				subIndex = d->transfers[line].subIndex;
 8007046:	7efb      	ldrb	r3, [r7, #27]
 8007048:	4619      	mov	r1, r3
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	2354      	movs	r3, #84	; 0x54
 800704e:	fb03 f301 	mul.w	r3, r3, r1
 8007052:	4413      	add	r3, r2
 8007054:	3332      	adds	r3, #50	; 0x32
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				if (d->transfers[line].toggle != getSDOt(m->data[0])) {
 800705c:	7efb      	ldrb	r3, [r7, #27]
 800705e:	4619      	mov	r1, r3
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	2354      	movs	r3, #84	; 0x54
 8007064:	fb03 f301 	mul.w	r3, r3, r1
 8007068:	4413      	add	r3, r2
 800706a:	332b      	adds	r3, #43	; 0x2b
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	791b      	ldrb	r3, [r3, #4]
 8007074:	091b      	lsrs	r3, r3, #4
 8007076:	b2db      	uxtb	r3, r3
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	429a      	cmp	r2, r3
 800707e:	d01d      	beq.n	80070bc <proceedSDO+0x6d8>
					MSG_ERR(0x1A76, "SDO error : Received segment response Toggle error. from nodeId", nodeId);
 8007080:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007084:	9301      	str	r3, [sp, #4]
 8007086:	4b98      	ldr	r3, [pc, #608]	; (80072e8 <proceedSDO+0x904>)
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	f641 2376 	movw	r3, #6774	; 0x1a76
 800708e:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007092:	4996      	ldr	r1, [pc, #600]	; (80072ec <proceedSDO+0x908>)
 8007094:	4896      	ldr	r0, [pc, #600]	; (80072f0 <proceedSDO+0x90c>)
 8007096:	f005 fbb5 	bl	800c804 <iprintf>
					failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_TOGGLE_NOT_ALTERNED);
 800709a:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800709c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80070a0:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80070a4:	4b93      	ldr	r3, [pc, #588]	; (80072f4 <proceedSDO+0x910>)
 80070a6:	9301      	str	r3, [sp, #4]
 80070a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	4603      	mov	r3, r0
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7ff f955 	bl	8006360 <failedSDO>
					return 0xFF;
 80070b6:	23ff      	movs	r3, #255	; 0xff
 80070b8:	f002 be34 	b.w	8009d24 <proceedSDO+0x3340>
				nbBytes = 7 - getSDOn3(m->data[0]);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	791b      	ldrb	r3, [r3, #4]
 80070c0:	085b      	lsrs	r3, r3, #1
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	43db      	mvns	r3, r3
 80070c6:	f003 0307 	and.w	r3, r3, #7
 80070ca:	617b      	str	r3, [r7, #20]
				err = SDOtoLine(d, line, nbBytes, (*m).data + 1);
 80070cc:	7ef9      	ldrb	r1, [r7, #27]
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	3304      	adds	r3, #4
 80070d4:	3301      	adds	r3, #1
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7ff f8de 	bl	8006298 <SDOtoLine>
 80070dc:	4603      	mov	r3, r0
 80070de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (err) {
 80070e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d011      	beq.n	800710e <proceedSDO+0x72a>
					failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_GENERAL_ERROR);
 80070ea:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80070ec:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80070f0:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80070f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	4603      	mov	r3, r0
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7ff f92c 	bl	8006360 <failedSDO>
					return 0xFF;
 8007108:	23ff      	movs	r3, #255	; 0xff
 800710a:	f002 be0b 	b.w	8009d24 <proceedSDO+0x3340>
				d->transfers[line].toggle = (UNS8)(! d->transfers[line].toggle & 1);
 800710e:	7efb      	ldrb	r3, [r7, #27]
 8007110:	4619      	mov	r1, r3
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	2354      	movs	r3, #84	; 0x54
 8007116:	fb03 f301 	mul.w	r3, r3, r1
 800711a:	4413      	add	r3, r2
 800711c:	332b      	adds	r3, #43	; 0x2b
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	bf0c      	ite	eq
 8007124:	2301      	moveq	r3, #1
 8007126:	2300      	movne	r3, #0
 8007128:	b2db      	uxtb	r3, r3
 800712a:	7efa      	ldrb	r2, [r7, #27]
 800712c:	4611      	mov	r1, r2
 800712e:	4618      	mov	r0, r3
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	2354      	movs	r3, #84	; 0x54
 8007134:	fb03 f301 	mul.w	r3, r3, r1
 8007138:	4413      	add	r3, r2
 800713a:	332b      	adds	r3, #43	; 0x2b
 800713c:	4602      	mov	r2, r0
 800713e:	701a      	strb	r2, [r3, #0]
				if ( getSDOc(m->data[0])) {
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	791b      	ldrb	r3, [r3, #4]
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	d03e      	beq.n	80071ca <proceedSDO+0x7e6>
					StopSDO_TIMER(line)
 800714c:	7efb      	ldrb	r3, [r7, #27]
 800714e:	4619      	mov	r1, r3
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	2354      	movs	r3, #84	; 0x54
 8007154:	fb03 f301 	mul.w	r3, r3, r1
 8007158:	4413      	add	r3, r2
 800715a:	3374      	adds	r3, #116	; 0x74
 800715c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007160:	7efa      	ldrb	r2, [r7, #27]
 8007162:	4614      	mov	r4, r2
 8007164:	4618      	mov	r0, r3
 8007166:	f003 fdd9 	bl	800ad1c <DelAlarm>
 800716a:	4603      	mov	r3, r0
 800716c:	4619      	mov	r1, r3
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	2354      	movs	r3, #84	; 0x54
 8007172:	fb03 f304 	mul.w	r3, r3, r4
 8007176:	4413      	add	r3, r2
 8007178:	3374      	adds	r3, #116	; 0x74
 800717a:	460a      	mov	r2, r1
 800717c:	801a      	strh	r2, [r3, #0]
						d->transfers[line].state = SDO_FINISHED;
 800717e:	7efb      	ldrb	r3, [r7, #27]
 8007180:	4619      	mov	r1, r3
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	2354      	movs	r3, #84	; 0x54
 8007186:	fb03 f301 	mul.w	r3, r3, r1
 800718a:	4413      	add	r3, r2
 800718c:	332a      	adds	r3, #42	; 0x2a
 800718e:	2201      	movs	r2, #1
 8007190:	701a      	strb	r2, [r3, #0]
					if(d->transfers[line].Callback) (*d->transfers[line].Callback)(d,nodeId);
 8007192:	7efb      	ldrb	r3, [r7, #27]
 8007194:	4619      	mov	r1, r3
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	2354      	movs	r3, #84	; 0x54
 800719a:	fb03 f301 	mul.w	r3, r3, r1
 800719e:	4413      	add	r3, r2
 80071a0:	3378      	adds	r3, #120	; 0x78
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f002 85b5 	beq.w	8009d14 <proceedSDO+0x3330>
 80071aa:	7efb      	ldrb	r3, [r7, #27]
 80071ac:	4619      	mov	r1, r3
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	2354      	movs	r3, #84	; 0x54
 80071b2:	fb03 f301 	mul.w	r3, r3, r1
 80071b6:	4413      	add	r3, r2
 80071b8:	3378      	adds	r3, #120	; 0x78
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80071c0:	4611      	mov	r1, r2
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	4798      	blx	r3
			break;
 80071c6:	f002 bda5 	b.w	8009d14 <proceedSDO+0x3330>
					data[0] = (UNS8)((3 << 5) | (d->transfers[line].toggle << 4));
 80071ca:	7efb      	ldrb	r3, [r7, #27]
 80071cc:	4619      	mov	r1, r3
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	2354      	movs	r3, #84	; 0x54
 80071d2:	fb03 f301 	mul.w	r3, r3, r1
 80071d6:	4413      	add	r3, r2
 80071d8:	332b      	adds	r3, #43	; 0x2b
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	011b      	lsls	r3, r3, #4
 80071de:	b25b      	sxtb	r3, r3
 80071e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80071e4:	b25b      	sxtb	r3, r3
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	733b      	strb	r3, [r7, #12]
					for (i = 1 ; i < 8 ; i++)
 80071ea:	2301      	movs	r3, #1
 80071ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071ee:	e008      	b.n	8007202 <proceedSDO+0x81e>
						data[i] = 0;
 80071f0:	f107 020c 	add.w	r2, r7, #12
 80071f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f6:	4413      	add	r3, r2
 80071f8:	2200      	movs	r2, #0
 80071fa:	701a      	strb	r2, [r3, #0]
					for (i = 1 ; i < 8 ; i++)
 80071fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071fe:	3301      	adds	r3, #1
 8007200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007204:	2b07      	cmp	r3, #7
 8007206:	d9f3      	bls.n	80071f0 <proceedSDO+0x80c>
					sendSDO(d, whoami, CliServNbr, data);
 8007208:	f107 030c 	add.w	r3, r7, #12
 800720c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007210:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7ff fb13 	bl	8006840 <sendSDO>
			break;
 800721a:	f002 bd7b 	b.w	8009d14 <proceedSDO+0x3330>

		case 1:
			/* I am SERVER */
			/* Receive of an initiate download */
			if (whoami == SDO_SERVER) {
 800721e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007222:	2b01      	cmp	r3, #1
 8007224:	f040 813f 	bne.w	80074a6 <proceedSDO+0xac2>
				index = (UNS16)getSDOindex(m->data[1],m->data[2]);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	799b      	ldrb	r3, [r3, #6]
 800722c:	021b      	lsls	r3, r3, #8
 800722e:	b21a      	sxth	r2, r3
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	795b      	ldrb	r3, [r3, #5]
 8007234:	b21b      	sxth	r3, r3
 8007236:	4313      	orrs	r3, r2
 8007238:	b21b      	sxth	r3, r3
 800723a:	84bb      	strh	r3, [r7, #36]	; 0x24
				subIndex = getSDOsubIndex(m->data[3]);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	79db      	ldrb	r3, [r3, #7]
 8007240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						CliServNbr);
				MSG_WAR(0x3A80, "Writing at index : ", index);
				MSG_WAR(0x3A80, "Writing at subIndex : ", subIndex);

				/* Search if a SDO transfer have been yet initiated */
				if (! err) {
 8007244:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007248:	2b00      	cmp	r3, #0
 800724a:	d11c      	bne.n	8007286 <proceedSDO+0x8a2>
					MSG_ERR(0x1A81, "SDO error : Transmission yet started.", 0);
 800724c:	2300      	movs	r3, #0
 800724e:	9301      	str	r3, [sp, #4]
 8007250:	4b29      	ldr	r3, [pc, #164]	; (80072f8 <proceedSDO+0x914>)
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	f641 2381 	movw	r3, #6785	; 0x1a81
 8007258:	f240 32d6 	movw	r2, #982	; 0x3d6
 800725c:	4923      	ldr	r1, [pc, #140]	; (80072ec <proceedSDO+0x908>)
 800725e:	4824      	ldr	r0, [pc, #144]	; (80072f0 <proceedSDO+0x90c>)
 8007260:	f005 fad0 	bl	800c804 <iprintf>
					failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_LOCAL_CTRL_ERROR);
 8007264:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8007266:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800726a:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800726e:	4b23      	ldr	r3, [pc, #140]	; (80072fc <proceedSDO+0x918>)
 8007270:	9301      	str	r3, [sp, #4]
 8007272:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	4603      	mov	r3, r0
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7ff f870 	bl	8006360 <failedSDO>
					return 0xFF;
 8007280:	23ff      	movs	r3, #255	; 0xff
 8007282:	f002 bd4f 	b.w	8009d24 <proceedSDO+0x3340>
				}
				/* No line on use. Great ! */
				/* Try to open a new line. */
				err = getSDOfreeLine( d, whoami, &line );
 8007286:	f107 021b 	add.w	r2, r7, #27
 800728a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff f9f1 	bl	8006678 <getSDOfreeLine>
 8007296:	4603      	mov	r3, r0
 8007298:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (err) {
 800729c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d02f      	beq.n	8007304 <proceedSDO+0x920>
					MSG_ERR(0x1A82, "SDO error : No line free, too many SDO in progress. Aborted.", 0);
 80072a4:	2300      	movs	r3, #0
 80072a6:	9301      	str	r3, [sp, #4]
 80072a8:	4b15      	ldr	r3, [pc, #84]	; (8007300 <proceedSDO+0x91c>)
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	f641 2382 	movw	r3, #6786	; 0x1a82
 80072b0:	f240 32de 	movw	r2, #990	; 0x3de
 80072b4:	490d      	ldr	r1, [pc, #52]	; (80072ec <proceedSDO+0x908>)
 80072b6:	480e      	ldr	r0, [pc, #56]	; (80072f0 <proceedSDO+0x90c>)
 80072b8:	f005 faa4 	bl	800c804 <iprintf>
					failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_LOCAL_CTRL_ERROR);
 80072bc:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80072be:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80072c2:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80072c6:	4b0d      	ldr	r3, [pc, #52]	; (80072fc <proceedSDO+0x918>)
 80072c8:	9301      	str	r3, [sp, #4]
 80072ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	4603      	mov	r3, r0
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7ff f844 	bl	8006360 <failedSDO>
					return 0xFF;
 80072d8:	23ff      	movs	r3, #255	; 0xff
 80072da:	f002 bd23 	b.w	8009d24 <proceedSDO+0x3340>
 80072de:	bf00      	nop
 80072e0:	000493e0 	.word	0x000493e0
 80072e4:	08005ead 	.word	0x08005ead
 80072e8:	0800e138 	.word	0x0800e138
 80072ec:	0800dec8 	.word	0x0800dec8
 80072f0:	0800deec 	.word	0x0800deec
 80072f4:	05030000 	.word	0x05030000
 80072f8:	0800e178 	.word	0x0800e178
 80072fc:	08000021 	.word	0x08000021
 8007300:	0800e1a0 	.word	0x0800e1a0
				}
				initSDOline(d, line, CliServNbr, index, subIndex, SDO_DOWNLOAD_IN_PROGRESS);
 8007304:	7ef9      	ldrb	r1, [r7, #27]
 8007306:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8007308:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800730c:	2302      	movs	r3, #2
 800730e:	9301      	str	r3, [sp, #4]
 8007310:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	4603      	mov	r3, r0
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7ff f8c7 	bl	80064ac <initSDOline>

				if (getSDOe(m->data[0])) { /* If SDO expedited */
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	791b      	ldrb	r3, [r3, #4]
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	b2db      	uxtb	r3, r3
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b00      	cmp	r3, #0
 800732c:	d05f      	beq.n	80073ee <proceedSDO+0xa0a>
					/* nb of data to be downloaded */
					nbBytes = 4 - getSDOn2(m->data[0]);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	791b      	ldrb	r3, [r3, #4]
 8007332:	089b      	lsrs	r3, r3, #2
 8007334:	b2db      	uxtb	r3, r3
 8007336:	f003 0303 	and.w	r3, r3, #3
 800733a:	f1c3 0304 	rsb	r3, r3, #4
 800733e:	617b      	str	r3, [r7, #20]
					/* Storing the data in the line structure. */
					d->transfers[line].count = nbBytes;
 8007340:	7efb      	ldrb	r3, [r7, #27]
 8007342:	4618      	mov	r0, r3
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	2354      	movs	r3, #84	; 0x54
 800734a:	fb03 f300 	mul.w	r3, r3, r0
 800734e:	440b      	add	r3, r1
 8007350:	3334      	adds	r3, #52	; 0x34
 8007352:	601a      	str	r2, [r3, #0]
					err = SDOtoLine(d, line, nbBytes, (*m).data + 4);
 8007354:	7ef9      	ldrb	r1, [r7, #27]
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	3304      	adds	r3, #4
 800735c:	3304      	adds	r3, #4
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7fe ff9a 	bl	8006298 <SDOtoLine>
 8007364:	4603      	mov	r3, r0
 8007366:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

					if (err) {
 800736a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800736e:	2b00      	cmp	r3, #0
 8007370:	d011      	beq.n	8007396 <proceedSDO+0x9b2>
						failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_GENERAL_ERROR);
 8007372:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8007374:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8007378:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800737c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	4603      	mov	r3, r0
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fe ffe8 	bl	8006360 <failedSDO>
						return 0xFF;
 8007390:	23ff      	movs	r3, #255	; 0xff
 8007392:	f002 bcc7 	b.w	8009d24 <proceedSDO+0x3340>

					/* SDO expedited -> transfer finished. Data can be stored in the dictionary. */
					/*The line will be reseted when it is downloading in the dictionary. */
					MSG_WAR(0x3A83, "SDO Initiate Download is an expedited transfer. Finished. ", 0);
					/* Transfering line data to object dictionary. */
					errorCode = SDOlineToObjdict(d, line);
 8007396:	7efb      	ldrb	r3, [r7, #27]
 8007398:	4619      	mov	r1, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7fe fe50 	bl	8006040 <SDOlineToObjdict>
 80073a0:	62b8      	str	r0, [r7, #40]	; 0x28
					if (errorCode) {
 80073a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d01c      	beq.n	80073e2 <proceedSDO+0x9fe>
						MSG_ERR(0x1A84, "SDO error : Unable to copy the data in the object dictionary", 0);
 80073a8:	2300      	movs	r3, #0
 80073aa:	9301      	str	r3, [sp, #4]
 80073ac:	4bbc      	ldr	r3, [pc, #752]	; (80076a0 <proceedSDO+0xcbc>)
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	f641 2384 	movw	r3, #6788	; 0x1a84
 80073b4:	f240 32f6 	movw	r2, #1014	; 0x3f6
 80073b8:	49ba      	ldr	r1, [pc, #744]	; (80076a4 <proceedSDO+0xcc0>)
 80073ba:	48bb      	ldr	r0, [pc, #748]	; (80076a8 <proceedSDO+0xcc4>)
 80073bc:	f005 fa22 	bl	800c804 <iprintf>
						failedSDO(d, CliServNbr, whoami, index, subIndex, errorCode);
 80073c0:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80073c2:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80073c6:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80073ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073cc:	9301      	str	r3, [sp, #4]
 80073ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	4603      	mov	r3, r0
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7fe ffc2 	bl	8006360 <failedSDO>
						return 0xFF;
 80073dc:	23ff      	movs	r3, #255	; 0xff
 80073de:	f002 bca1 	b.w	8009d24 <proceedSDO+0x3340>
					}
					/* Release of the line. */
					resetSDOline(d, line);
 80073e2:	7efb      	ldrb	r3, [r7, #27]
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7ff f826 	bl	8006438 <resetSDOline>
 80073ec:	e034      	b.n	8007458 <proceedSDO+0xa74>
				}
				else {/* So, if it is not an expedited transfer */
					if (getSDOs(m->data[0])) {
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	791b      	ldrb	r3, [r3, #4]
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d02e      	beq.n	8007458 <proceedSDO+0xa74>
						nbBytes = (m->data[4]) + ((UNS32)(m->data[5])<<8) + ((UNS32)(m->data[6])<<16) + ((UNS32)(m->data[7])<<24);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	7a1b      	ldrb	r3, [r3, #8]
 80073fe:	461a      	mov	r2, r3
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	7a5b      	ldrb	r3, [r3, #9]
 8007404:	021b      	lsls	r3, r3, #8
 8007406:	441a      	add	r2, r3
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	7a9b      	ldrb	r3, [r3, #10]
 800740c:	041b      	lsls	r3, r3, #16
 800740e:	441a      	add	r2, r3
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	7adb      	ldrb	r3, [r3, #11]
 8007414:	061b      	lsls	r3, r3, #24
 8007416:	4413      	add	r3, r2
 8007418:	617b      	str	r3, [r7, #20]
						err = setSDOlineRestBytes(d, line, nbBytes);
 800741a:	7efb      	ldrb	r3, [r7, #27]
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff f9e1 	bl	80067e8 <setSDOlineRestBytes>
 8007426:	4603      	mov	r3, r0
 8007428:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						if (err) {
 800742c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007430:	2b00      	cmp	r3, #0
 8007432:	d011      	beq.n	8007458 <proceedSDO+0xa74>
							failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_GENERAL_ERROR);
 8007434:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8007436:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800743a:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800743e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007442:	9301      	str	r3, [sp, #4]
 8007444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	4603      	mov	r3, r0
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7fe ff87 	bl	8006360 <failedSDO>
							return 0xFF;
 8007452:	23ff      	movs	r3, #255	; 0xff
 8007454:	f002 bc66 	b.w	8009d24 <proceedSDO+0x3340>
						}
					}
				}
				/*Sending a SDO, cs=3*/
				data[0] = 3 << 5;
 8007458:	2360      	movs	r3, #96	; 0x60
 800745a:	733b      	strb	r3, [r7, #12]
				data[1] = (UNS8)(index & 0xFF);        /* LSB */
 800745c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800745e:	b2db      	uxtb	r3, r3
 8007460:	737b      	strb	r3, [r7, #13]
				data[2] = (UNS8)((index >> 8) & 0xFF); /* MSB */
 8007462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007464:	0a1b      	lsrs	r3, r3, #8
 8007466:	b29b      	uxth	r3, r3
 8007468:	b2db      	uxtb	r3, r3
 800746a:	73bb      	strb	r3, [r7, #14]
				data[3] = subIndex;
 800746c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007470:	73fb      	strb	r3, [r7, #15]
				for (i = 4 ; i < 8 ; i++)
 8007472:	2304      	movs	r3, #4
 8007474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007476:	e008      	b.n	800748a <proceedSDO+0xaa6>
					data[i] = 0;
 8007478:	f107 020c 	add.w	r2, r7, #12
 800747c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800747e:	4413      	add	r3, r2
 8007480:	2200      	movs	r2, #0
 8007482:	701a      	strb	r2, [r3, #0]
				for (i = 4 ; i < 8 ; i++)
 8007484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007486:	3301      	adds	r3, #1
 8007488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800748a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800748c:	2b07      	cmp	r3, #7
 800748e:	d9f3      	bls.n	8007478 <proceedSDO+0xa94>
				sendSDO(d, whoami, CliServNbr, data);
 8007490:	f107 030c 	add.w	r3, r7, #12
 8007494:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007498:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7ff f9cf 	bl	8006840 <sendSDO>
						data[i] = 0;
				}
				MSG_WAR(0x3A88, "SDO sending download segment to nodeId", nodeId);
				sendSDO(d, whoami, CliServNbr, data);
			} /* end if I am a CLIENT */
			break;
 80074a2:	f002 bc3e 	b.w	8009d22 <proceedSDO+0x333e>
				if (!err)
 80074a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10f      	bne.n	80074ce <proceedSDO+0xaea>
					err = (UNS8)(d->transfers[line].state != SDO_DOWNLOAD_IN_PROGRESS);
 80074ae:	7efb      	ldrb	r3, [r7, #27]
 80074b0:	4619      	mov	r1, r3
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	2354      	movs	r3, #84	; 0x54
 80074b6:	fb03 f301 	mul.w	r3, r3, r1
 80074ba:	4413      	add	r3, r2
 80074bc:	332a      	adds	r3, #42	; 0x2a
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	bf14      	ite	ne
 80074c4:	2301      	movne	r3, #1
 80074c6:	2300      	moveq	r3, #0
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (err) {
 80074ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d01b      	beq.n	800750e <proceedSDO+0xb2a>
					MSG_ERR(0x1A85, "SDO error : Received segment response for unknown trans. from nodeId", nodeId);
 80074d6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80074da:	9301      	str	r3, [sp, #4]
 80074dc:	4b73      	ldr	r3, [pc, #460]	; (80076ac <proceedSDO+0xcc8>)
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	f641 2385 	movw	r3, #6789	; 0x1a85
 80074e4:	f240 4216 	movw	r2, #1046	; 0x416
 80074e8:	496e      	ldr	r1, [pc, #440]	; (80076a4 <proceedSDO+0xcc0>)
 80074ea:	486f      	ldr	r0, [pc, #444]	; (80076a8 <proceedSDO+0xcc4>)
 80074ec:	f005 f98a 	bl	800c804 <iprintf>
					failedSDO(d, CliServNbr, whoami, 0, 0, SDOABT_LOCAL_CTRL_ERROR);
 80074f0:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80074f4:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80074f8:	4b6d      	ldr	r3, [pc, #436]	; (80076b0 <proceedSDO+0xccc>)
 80074fa:	9301      	str	r3, [sp, #4]
 80074fc:	2300      	movs	r3, #0
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	2300      	movs	r3, #0
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7fe ff2c 	bl	8006360 <failedSDO>
					return 0xFF;
 8007508:	23ff      	movs	r3, #255	; 0xff
 800750a:	f002 bc0b 	b.w	8009d24 <proceedSDO+0x3340>
				RestartSDO_TIMER(line)
 800750e:	7efb      	ldrb	r3, [r7, #27]
 8007510:	4619      	mov	r1, r3
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	2354      	movs	r3, #84	; 0x54
 8007516:	fb03 f301 	mul.w	r3, r3, r1
 800751a:	4413      	add	r3, r2
 800751c:	3374      	adds	r3, #116	; 0x74
 800751e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007526:	d02d      	beq.n	8007584 <proceedSDO+0xba0>
 8007528:	7efb      	ldrb	r3, [r7, #27]
 800752a:	4619      	mov	r1, r3
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	2354      	movs	r3, #84	; 0x54
 8007530:	fb03 f301 	mul.w	r3, r3, r1
 8007534:	4413      	add	r3, r2
 8007536:	3374      	adds	r3, #116	; 0x74
 8007538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800753c:	7efa      	ldrb	r2, [r7, #27]
 800753e:	4614      	mov	r4, r2
 8007540:	4618      	mov	r0, r3
 8007542:	f003 fbeb 	bl	800ad1c <DelAlarm>
 8007546:	4603      	mov	r3, r0
 8007548:	4619      	mov	r1, r3
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	2354      	movs	r3, #84	; 0x54
 800754e:	fb03 f304 	mul.w	r3, r3, r4
 8007552:	4413      	add	r3, r2
 8007554:	3374      	adds	r3, #116	; 0x74
 8007556:	460a      	mov	r2, r1
 8007558:	801a      	strh	r2, [r3, #0]
 800755a:	7efb      	ldrb	r3, [r7, #27]
 800755c:	4619      	mov	r1, r3
 800755e:	7efb      	ldrb	r3, [r7, #27]
 8007560:	461c      	mov	r4, r3
 8007562:	2300      	movs	r3, #0
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	4b53      	ldr	r3, [pc, #332]	; (80076b4 <proceedSDO+0xcd0>)
 8007568:	4a53      	ldr	r2, [pc, #332]	; (80076b8 <proceedSDO+0xcd4>)
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f003 fb5a 	bl	800ac24 <SetAlarm>
 8007570:	4603      	mov	r3, r0
 8007572:	4619      	mov	r1, r3
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	2354      	movs	r3, #84	; 0x54
 8007578:	fb03 f304 	mul.w	r3, r3, r4
 800757c:	4413      	add	r3, r2
 800757e:	3374      	adds	r3, #116	; 0x74
 8007580:	460a      	mov	r2, r1
 8007582:	801a      	strh	r2, [r3, #0]
				index = d->transfers[line].index;
 8007584:	7efb      	ldrb	r3, [r7, #27]
 8007586:	4619      	mov	r1, r3
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	2354      	movs	r3, #84	; 0x54
 800758c:	fb03 f301 	mul.w	r3, r3, r1
 8007590:	4413      	add	r3, r2
 8007592:	3330      	adds	r3, #48	; 0x30
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	84bb      	strh	r3, [r7, #36]	; 0x24
				subIndex = d->transfers[line].subIndex;
 8007598:	7efb      	ldrb	r3, [r7, #27]
 800759a:	4619      	mov	r1, r3
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	2354      	movs	r3, #84	; 0x54
 80075a0:	fb03 f301 	mul.w	r3, r3, r1
 80075a4:	4413      	add	r3, r2
 80075a6:	3332      	adds	r3, #50	; 0x32
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				if (d->transfers[line].toggle != getSDOt(m->data[0])) {
 80075ae:	7efb      	ldrb	r3, [r7, #27]
 80075b0:	4619      	mov	r1, r3
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	2354      	movs	r3, #84	; 0x54
 80075b6:	fb03 f301 	mul.w	r3, r3, r1
 80075ba:	4413      	add	r3, r2
 80075bc:	332b      	adds	r3, #43	; 0x2b
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	461a      	mov	r2, r3
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	791b      	ldrb	r3, [r3, #4]
 80075c6:	091b      	lsrs	r3, r3, #4
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d01d      	beq.n	800760e <proceedSDO+0xc2a>
					MSG_ERR(0x1A86, "SDO error : Received segment response Toggle error. from nodeId", nodeId);
 80075d2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80075d6:	9301      	str	r3, [sp, #4]
 80075d8:	4b38      	ldr	r3, [pc, #224]	; (80076bc <proceedSDO+0xcd8>)
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	f641 2386 	movw	r3, #6790	; 0x1a86
 80075e0:	f44f 6284 	mov.w	r2, #1056	; 0x420
 80075e4:	492f      	ldr	r1, [pc, #188]	; (80076a4 <proceedSDO+0xcc0>)
 80075e6:	4830      	ldr	r0, [pc, #192]	; (80076a8 <proceedSDO+0xcc4>)
 80075e8:	f005 f90c 	bl	800c804 <iprintf>
					failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_TOGGLE_NOT_ALTERNED);
 80075ec:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80075ee:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80075f2:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80075f6:	4b32      	ldr	r3, [pc, #200]	; (80076c0 <proceedSDO+0xcdc>)
 80075f8:	9301      	str	r3, [sp, #4]
 80075fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	4603      	mov	r3, r0
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7fe feac 	bl	8006360 <failedSDO>
					return 0xFF;
 8007608:	23ff      	movs	r3, #255	; 0xff
 800760a:	f002 bb8b 	b.w	8009d24 <proceedSDO+0x3340>
				getSDOlineRestBytes(d, line, &nbBytes);
 800760e:	7efb      	ldrb	r3, [r7, #27]
 8007610:	f107 0214 	add.w	r2, r7, #20
 8007614:	4619      	mov	r1, r3
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7ff f8b8 	bl	800678c <getSDOlineRestBytes>
				if (nbBytes == 0) {
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d150      	bne.n	80076c4 <proceedSDO+0xce0>
					StopSDO_TIMER(line)
 8007622:	7efb      	ldrb	r3, [r7, #27]
 8007624:	4619      	mov	r1, r3
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	2354      	movs	r3, #84	; 0x54
 800762a:	fb03 f301 	mul.w	r3, r3, r1
 800762e:	4413      	add	r3, r2
 8007630:	3374      	adds	r3, #116	; 0x74
 8007632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007636:	7efa      	ldrb	r2, [r7, #27]
 8007638:	4614      	mov	r4, r2
 800763a:	4618      	mov	r0, r3
 800763c:	f003 fb6e 	bl	800ad1c <DelAlarm>
 8007640:	4603      	mov	r3, r0
 8007642:	4619      	mov	r1, r3
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	2354      	movs	r3, #84	; 0x54
 8007648:	fb03 f304 	mul.w	r3, r3, r4
 800764c:	4413      	add	r3, r2
 800764e:	3374      	adds	r3, #116	; 0x74
 8007650:	460a      	mov	r2, r1
 8007652:	801a      	strh	r2, [r3, #0]
					d->transfers[line].state = SDO_FINISHED;
 8007654:	7efb      	ldrb	r3, [r7, #27]
 8007656:	4619      	mov	r1, r3
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	2354      	movs	r3, #84	; 0x54
 800765c:	fb03 f301 	mul.w	r3, r3, r1
 8007660:	4413      	add	r3, r2
 8007662:	332a      	adds	r3, #42	; 0x2a
 8007664:	2201      	movs	r2, #1
 8007666:	701a      	strb	r2, [r3, #0]
					if(d->transfers[line].Callback) (*d->transfers[line].Callback)(d,nodeId);
 8007668:	7efb      	ldrb	r3, [r7, #27]
 800766a:	4619      	mov	r1, r3
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	2354      	movs	r3, #84	; 0x54
 8007670:	fb03 f301 	mul.w	r3, r3, r1
 8007674:	4413      	add	r3, r2
 8007676:	3378      	adds	r3, #120	; 0x78
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00d      	beq.n	800769a <proceedSDO+0xcb6>
 800767e:	7efb      	ldrb	r3, [r7, #27]
 8007680:	4619      	mov	r1, r3
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	2354      	movs	r3, #84	; 0x54
 8007686:	fb03 f301 	mul.w	r3, r3, r1
 800768a:	4413      	add	r3, r2
 800768c:	3378      	adds	r3, #120	; 0x78
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007694:	4611      	mov	r1, r2
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4798      	blx	r3
					return 0x00;
 800769a:	2300      	movs	r3, #0
 800769c:	f002 bb42 	b.w	8009d24 <proceedSDO+0x3340>
 80076a0:	0800e0b0 	.word	0x0800e0b0
 80076a4:	0800dec8 	.word	0x0800dec8
 80076a8:	0800deec 	.word	0x0800deec
 80076ac:	0800e0f0 	.word	0x0800e0f0
 80076b0:	08000021 	.word	0x08000021
 80076b4:	000493e0 	.word	0x000493e0
 80076b8:	08005ead 	.word	0x08005ead
 80076bc:	0800e138 	.word	0x0800e138
 80076c0:	05030000 	.word	0x05030000
				if (nbBytes > 7) {
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	2b07      	cmp	r3, #7
 80076c8:	d945      	bls.n	8007756 <proceedSDO+0xd72>
					d->transfers[line].toggle = (UNS8)(! d->transfers[line].toggle & 1);
 80076ca:	7efb      	ldrb	r3, [r7, #27]
 80076cc:	4619      	mov	r1, r3
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	2354      	movs	r3, #84	; 0x54
 80076d2:	fb03 f301 	mul.w	r3, r3, r1
 80076d6:	4413      	add	r3, r2
 80076d8:	332b      	adds	r3, #43	; 0x2b
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	bf0c      	ite	eq
 80076e0:	2301      	moveq	r3, #1
 80076e2:	2300      	movne	r3, #0
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	7efa      	ldrb	r2, [r7, #27]
 80076e8:	4611      	mov	r1, r2
 80076ea:	4618      	mov	r0, r3
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	2354      	movs	r3, #84	; 0x54
 80076f0:	fb03 f301 	mul.w	r3, r3, r1
 80076f4:	4413      	add	r3, r2
 80076f6:	332b      	adds	r3, #43	; 0x2b
 80076f8:	4602      	mov	r2, r0
 80076fa:	701a      	strb	r2, [r3, #0]
					data[0] = (UNS8)(d->transfers[line].toggle << 4);
 80076fc:	7efb      	ldrb	r3, [r7, #27]
 80076fe:	4619      	mov	r1, r3
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	2354      	movs	r3, #84	; 0x54
 8007704:	fb03 f301 	mul.w	r3, r3, r1
 8007708:	4413      	add	r3, r2
 800770a:	332b      	adds	r3, #43	; 0x2b
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	011b      	lsls	r3, r3, #4
 8007710:	b2db      	uxtb	r3, r3
 8007712:	733b      	strb	r3, [r7, #12]
					err = lineToSDO(d, line, 7, data + 1);
 8007714:	7ef9      	ldrb	r1, [r7, #27]
 8007716:	f107 030c 	add.w	r3, r7, #12
 800771a:	3301      	adds	r3, #1
 800771c:	2207      	movs	r2, #7
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fe fd34 	bl	800618c <lineToSDO>
 8007724:	4603      	mov	r3, r0
 8007726:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					if (err) {
 800772a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800772e:	2b00      	cmp	r3, #0
 8007730:	d073      	beq.n	800781a <proceedSDO+0xe36>
						failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_GENERAL_ERROR);
 8007732:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8007734:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8007738:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800773c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007740:	9301      	str	r3, [sp, #4]
 8007742:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	4603      	mov	r3, r0
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7fe fe08 	bl	8006360 <failedSDO>
						return 0xFF;
 8007750:	23ff      	movs	r3, #255	; 0xff
 8007752:	f002 bae7 	b.w	8009d24 <proceedSDO+0x3340>
					d->transfers[line].toggle = (UNS8)(! d->transfers[line].toggle & 1);
 8007756:	7efb      	ldrb	r3, [r7, #27]
 8007758:	4619      	mov	r1, r3
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	2354      	movs	r3, #84	; 0x54
 800775e:	fb03 f301 	mul.w	r3, r3, r1
 8007762:	4413      	add	r3, r2
 8007764:	332b      	adds	r3, #43	; 0x2b
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	bf0c      	ite	eq
 800776c:	2301      	moveq	r3, #1
 800776e:	2300      	movne	r3, #0
 8007770:	b2db      	uxtb	r3, r3
 8007772:	7efa      	ldrb	r2, [r7, #27]
 8007774:	4611      	mov	r1, r2
 8007776:	4618      	mov	r0, r3
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	2354      	movs	r3, #84	; 0x54
 800777c:	fb03 f301 	mul.w	r3, r3, r1
 8007780:	4413      	add	r3, r2
 8007782:	332b      	adds	r3, #43	; 0x2b
 8007784:	4602      	mov	r2, r0
 8007786:	701a      	strb	r2, [r3, #0]
					data[0] = (UNS8)((d->transfers[line].toggle << 4) | ((7 - nbBytes) << 1) | 1);
 8007788:	7efb      	ldrb	r3, [r7, #27]
 800778a:	4619      	mov	r1, r3
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	2354      	movs	r3, #84	; 0x54
 8007790:	fb03 f301 	mul.w	r3, r3, r1
 8007794:	4413      	add	r3, r2
 8007796:	332b      	adds	r3, #43	; 0x2b
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	011b      	lsls	r3, r3, #4
 800779c:	b2da      	uxtb	r2, r3
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	f1c3 0307 	rsb	r3, r3, #7
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	005b      	lsls	r3, r3, #1
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	4313      	orrs	r3, r2
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	f043 0301 	orr.w	r3, r3, #1
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	733b      	strb	r3, [r7, #12]
					err = lineToSDO(d, line, nbBytes, data + 1);
 80077b8:	7ef9      	ldrb	r1, [r7, #27]
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	f107 030c 	add.w	r3, r7, #12
 80077c0:	3301      	adds	r3, #1
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7fe fce2 	bl	800618c <lineToSDO>
 80077c8:	4603      	mov	r3, r0
 80077ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					if (err) {
 80077ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d011      	beq.n	80077fa <proceedSDO+0xe16>
						failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_GENERAL_ERROR);
 80077d6:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80077d8:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80077dc:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80077e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077e4:	9301      	str	r3, [sp, #4]
 80077e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	4603      	mov	r3, r0
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7fe fdb6 	bl	8006360 <failedSDO>
						return 0xFF;
 80077f4:	23ff      	movs	r3, #255	; 0xff
 80077f6:	f002 ba95 	b.w	8009d24 <proceedSDO+0x3340>
					for (i = nbBytes + 1 ; i < 8 ; i++)
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	3301      	adds	r3, #1
 80077fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007800:	e008      	b.n	8007814 <proceedSDO+0xe30>
						data[i] = 0;
 8007802:	f107 020c 	add.w	r2, r7, #12
 8007806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007808:	4413      	add	r3, r2
 800780a:	2200      	movs	r2, #0
 800780c:	701a      	strb	r2, [r3, #0]
					for (i = nbBytes + 1 ; i < 8 ; i++)
 800780e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007810:	3301      	adds	r3, #1
 8007812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007816:	2b07      	cmp	r3, #7
 8007818:	d9f3      	bls.n	8007802 <proceedSDO+0xe1e>
				sendSDO(d, whoami, CliServNbr, data);
 800781a:	f107 030c 	add.w	r3, r7, #12
 800781e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007822:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff f80a 	bl	8006840 <sendSDO>
			break;
 800782c:	f002 ba79 	b.w	8009d22 <proceedSDO+0x333e>

		case 2:
			/* I am SERVER */
			/* Receive of an initiate upload.*/
			if (whoami == SDO_SERVER) {
 8007830:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007834:	2b01      	cmp	r3, #1
 8007836:	f040 8116 	bne.w	8007a66 <proceedSDO+0x1082>
				index = (UNS16)getSDOindex(m->data[1],m->data[2]);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	799b      	ldrb	r3, [r3, #6]
 800783e:	021b      	lsls	r3, r3, #8
 8007840:	b21a      	sxth	r2, r3
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	795b      	ldrb	r3, [r3, #5]
 8007846:	b21b      	sxth	r3, r3
 8007848:	4313      	orrs	r3, r2
 800784a:	b21b      	sxth	r3, r3
 800784c:	84bb      	strh	r3, [r7, #36]	; 0x24
				subIndex = getSDOsubIndex(m->data[3]);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	79db      	ldrb	r3, [r3, #7]
 8007852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				MSG_WAR(0x3A89, "Received SDO Initiate upload (to send data) defined at index 0x1200 + ",
						CliServNbr);
				MSG_WAR(0x3A90, "Reading at index : ", index);
				MSG_WAR(0x3A91, "Reading at subIndex : ", subIndex);
				/* Search if a SDO transfer have been yet initiated*/
				if (! err) {
 8007856:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800785a:	2b00      	cmp	r3, #0
 800785c:	d11c      	bne.n	8007898 <proceedSDO+0xeb4>
					MSG_ERR(0x1A92, "SDO error : Transmission yet started at line : ", line);
 800785e:	7efb      	ldrb	r3, [r7, #27]
 8007860:	9301      	str	r3, [sp, #4]
 8007862:	4b9b      	ldr	r3, [pc, #620]	; (8007ad0 <proceedSDO+0x10ec>)
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	f641 2392 	movw	r3, #6802	; 0x1a92
 800786a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800786e:	4999      	ldr	r1, [pc, #612]	; (8007ad4 <proceedSDO+0x10f0>)
 8007870:	4899      	ldr	r0, [pc, #612]	; (8007ad8 <proceedSDO+0x10f4>)
 8007872:	f004 ffc7 	bl	800c804 <iprintf>
					MSG_WAR(0x3A93, "Server Nbr = ", CliServNbr);
					failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_LOCAL_CTRL_ERROR);
 8007876:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8007878:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800787c:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8007880:	4b96      	ldr	r3, [pc, #600]	; (8007adc <proceedSDO+0x10f8>)
 8007882:	9301      	str	r3, [sp, #4]
 8007884:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	4603      	mov	r3, r0
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7fe fd67 	bl	8006360 <failedSDO>
					return 0xFF;
 8007892:	23ff      	movs	r3, #255	; 0xff
 8007894:	f002 ba46 	b.w	8009d24 <proceedSDO+0x3340>
				}
				/* No line on use. Great !*/
				/* Try to open a new line.*/
				err = getSDOfreeLine( d, whoami, &line );
 8007898:	f107 021b 	add.w	r2, r7, #27
 800789c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80078a0:	4619      	mov	r1, r3
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7fe fee8 	bl	8006678 <getSDOfreeLine>
 80078a8:	4603      	mov	r3, r0
 80078aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (err) {
 80078ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d01c      	beq.n	80078f0 <proceedSDO+0xf0c>
					MSG_ERR(0x1A71, "SDO error : No line free, too many SDO in progress. Aborted.", 0);
 80078b6:	2300      	movs	r3, #0
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	4b89      	ldr	r3, [pc, #548]	; (8007ae0 <proceedSDO+0x10fc>)
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	f641 2371 	movw	r3, #6769	; 0x1a71
 80078c2:	f240 4261 	movw	r2, #1121	; 0x461
 80078c6:	4983      	ldr	r1, [pc, #524]	; (8007ad4 <proceedSDO+0x10f0>)
 80078c8:	4883      	ldr	r0, [pc, #524]	; (8007ad8 <proceedSDO+0x10f4>)
 80078ca:	f004 ff9b 	bl	800c804 <iprintf>
					failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_LOCAL_CTRL_ERROR);
 80078ce:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80078d0:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80078d4:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80078d8:	4b80      	ldr	r3, [pc, #512]	; (8007adc <proceedSDO+0x10f8>)
 80078da:	9301      	str	r3, [sp, #4]
 80078dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	4603      	mov	r3, r0
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7fe fd3b 	bl	8006360 <failedSDO>
					return 0xFF;
 80078ea:	23ff      	movs	r3, #255	; 0xff
 80078ec:	f002 ba1a 	b.w	8009d24 <proceedSDO+0x3340>
				}
				initSDOline(d, line, CliServNbr, index, subIndex, SDO_UPLOAD_IN_PROGRESS);
 80078f0:	7ef9      	ldrb	r1, [r7, #27]
 80078f2:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80078f4:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80078f8:	2303      	movs	r3, #3
 80078fa:	9301      	str	r3, [sp, #4]
 80078fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	4603      	mov	r3, r0
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7fe fdd1 	bl	80064ac <initSDOline>
				/* Transfer data from dictionary to the line structure. */
				errorCode = objdictToSDOline(d, line);
 800790a:	7efb      	ldrb	r3, [r7, #27]
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7fe fbef 	bl	80060f2 <objdictToSDOline>
 8007914:	62b8      	str	r0, [r7, #40]	; 0x28

				if (errorCode) {
 8007916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007918:	2b00      	cmp	r3, #0
 800791a:	d01c      	beq.n	8007956 <proceedSDO+0xf72>
					MSG_ERR(0x1A94, "SDO error : Unable to copy the data from object dictionary. Err code : ",
 800791c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791e:	9301      	str	r3, [sp, #4]
 8007920:	4b70      	ldr	r3, [pc, #448]	; (8007ae4 <proceedSDO+0x1100>)
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	f641 2394 	movw	r3, #6804	; 0x1a94
 8007928:	f240 426b 	movw	r2, #1131	; 0x46b
 800792c:	4969      	ldr	r1, [pc, #420]	; (8007ad4 <proceedSDO+0x10f0>)
 800792e:	486a      	ldr	r0, [pc, #424]	; (8007ad8 <proceedSDO+0x10f4>)
 8007930:	f004 ff68 	bl	800c804 <iprintf>
							errorCode);
					failedSDO(d, CliServNbr, whoami, index, subIndex, errorCode);
 8007934:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8007936:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800793a:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007940:	9301      	str	r3, [sp, #4]
 8007942:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	4603      	mov	r3, r0
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7fe fd08 	bl	8006360 <failedSDO>
					return 0xFF;
 8007950:	23ff      	movs	r3, #255	; 0xff
 8007952:	f002 b9e7 	b.w	8009d24 <proceedSDO+0x3340>
				}
				/* Preparing the response.*/
				getSDOlineRestBytes(d, line, &nbBytes);	/* Nb bytes to transfer ? */
 8007956:	7efb      	ldrb	r3, [r7, #27]
 8007958:	f107 0214 	add.w	r2, r7, #20
 800795c:	4619      	mov	r1, r3
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7fe ff14 	bl	800678c <getSDOlineRestBytes>
				if (nbBytes > 4) {
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	2b04      	cmp	r3, #4
 8007968:	d926      	bls.n	80079b8 <proceedSDO+0xfd4>
					/* normal transfer. (segmented). */
					/* code to send the initiate upload response. (cs = 2) */
					data[0] = (UNS8)((2 << 5) | 1);
 800796a:	2341      	movs	r3, #65	; 0x41
 800796c:	733b      	strb	r3, [r7, #12]
					data[1] = (UNS8)(index & 0xFF);        /* LSB */
 800796e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007970:	b2db      	uxtb	r3, r3
 8007972:	737b      	strb	r3, [r7, #13]
					data[2] = (UNS8)((index >> 8) & 0xFF); /* MSB */
 8007974:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007976:	0a1b      	lsrs	r3, r3, #8
 8007978:	b29b      	uxth	r3, r3
 800797a:	b2db      	uxtb	r3, r3
 800797c:	73bb      	strb	r3, [r7, #14]
					data[3] = subIndex;
 800797e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007982:	73fb      	strb	r3, [r7, #15]
					data[4] = (UNS8) nbBytes;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	b2db      	uxtb	r3, r3
 8007988:	743b      	strb	r3, [r7, #16]
					data[5] = (UNS8) (nbBytes >> 8);
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	0a1b      	lsrs	r3, r3, #8
 800798e:	b2db      	uxtb	r3, r3
 8007990:	747b      	strb	r3, [r7, #17]
					data[6] = (UNS8) (nbBytes >> 16);
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	0c1b      	lsrs	r3, r3, #16
 8007996:	b2db      	uxtb	r3, r3
 8007998:	74bb      	strb	r3, [r7, #18]
					data[7] = (UNS8) (nbBytes >> 24);
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	0e1b      	lsrs	r3, r3, #24
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	74fb      	strb	r3, [r7, #19]
 					MSG_WAR(0x3A95, "SDO. Sending normal upload initiate response defined at index 0x1200 + ", nodeId);
					sendSDO(d, whoami, CliServNbr, data);
 80079a2:	f107 030c 	add.w	r3, r7, #12
 80079a6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80079aa:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7fe ff46 	bl	8006840 <sendSDO>
						data[i] = 0;
					MSG_WAR(0x3A99, "SDO. Sending upload segment request to node : ", nodeId);
					sendSDO(d, whoami, CliServNbr, data);
				}
			} /* End if CLIENT */
			break;
 80079b4:	f002 b9b5 	b.w	8009d22 <proceedSDO+0x333e>
					data[0] = (UNS8)((2 << 5) | ((4 - nbBytes) << 2) | 3);
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	f1c3 0304 	rsb	r3, r3, #4
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	f043 0343 	orr.w	r3, r3, #67	; 0x43
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	733b      	strb	r3, [r7, #12]
					data[1] = (UNS8)(index & 0xFF);        /* LSB */
 80079ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	737b      	strb	r3, [r7, #13]
					data[2] = (UNS8)((index >> 8) & 0xFF); /* MSB */
 80079d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079d6:	0a1b      	lsrs	r3, r3, #8
 80079d8:	b29b      	uxth	r3, r3
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	73bb      	strb	r3, [r7, #14]
					data[3] = subIndex;
 80079de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079e2:	73fb      	strb	r3, [r7, #15]
					err = lineToSDO(d, line, nbBytes, data + 4);
 80079e4:	7ef9      	ldrb	r1, [r7, #27]
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	f107 030c 	add.w	r3, r7, #12
 80079ec:	3304      	adds	r3, #4
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7fe fbcc 	bl	800618c <lineToSDO>
 80079f4:	4603      	mov	r3, r0
 80079f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					if (err) {
 80079fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d011      	beq.n	8007a26 <proceedSDO+0x1042>
						failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_GENERAL_ERROR);
 8007a02:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8007a04:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8007a08:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8007a0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a10:	9301      	str	r3, [sp, #4]
 8007a12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	4603      	mov	r3, r0
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7fe fca0 	bl	8006360 <failedSDO>
						return 0xFF;
 8007a20:	23ff      	movs	r3, #255	; 0xff
 8007a22:	f002 b97f 	b.w	8009d24 <proceedSDO+0x3340>
					for (i = 4 + nbBytes ; i < 8 ; i++)
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a2c:	e008      	b.n	8007a40 <proceedSDO+0x105c>
						data[i] = 0;
 8007a2e:	f107 020c 	add.w	r2, r7, #12
 8007a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a34:	4413      	add	r3, r2
 8007a36:	2200      	movs	r2, #0
 8007a38:	701a      	strb	r2, [r3, #0]
					for (i = 4 + nbBytes ; i < 8 ; i++)
 8007a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a42:	2b07      	cmp	r3, #7
 8007a44:	d9f3      	bls.n	8007a2e <proceedSDO+0x104a>
					sendSDO(d, whoami, CliServNbr, data);
 8007a46:	f107 030c 	add.w	r3, r7, #12
 8007a4a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007a4e:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7fe fef4 	bl	8006840 <sendSDO>
					resetSDOline(d, line);
 8007a58:	7efb      	ldrb	r3, [r7, #27]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f7fe fceb 	bl	8006438 <resetSDOline>
			break;
 8007a62:	f002 b95e 	b.w	8009d22 <proceedSDO+0x333e>
				if (!err)
 8007a66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10f      	bne.n	8007a8e <proceedSDO+0x10aa>
					err = (UNS8)(d->transfers[line].state != SDO_UPLOAD_IN_PROGRESS);
 8007a6e:	7efb      	ldrb	r3, [r7, #27]
 8007a70:	4619      	mov	r1, r3
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	2354      	movs	r3, #84	; 0x54
 8007a76:	fb03 f301 	mul.w	r3, r3, r1
 8007a7a:	4413      	add	r3, r2
 8007a7c:	332a      	adds	r3, #42	; 0x2a
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	2b03      	cmp	r3, #3
 8007a82:	bf14      	ite	ne
 8007a84:	2301      	movne	r3, #1
 8007a86:	2300      	moveq	r3, #0
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (err) {
 8007a8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d02a      	beq.n	8007aec <proceedSDO+0x1108>
					MSG_ERR(0x1A97, "SDO error : Received response for unknown upload request from nodeId", nodeId);
 8007a96:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007a9a:	9301      	str	r3, [sp, #4]
 8007a9c:	4b12      	ldr	r3, [pc, #72]	; (8007ae8 <proceedSDO+0x1104>)
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	f641 2397 	movw	r3, #6807	; 0x1a97
 8007aa4:	f240 429a 	movw	r2, #1178	; 0x49a
 8007aa8:	490a      	ldr	r1, [pc, #40]	; (8007ad4 <proceedSDO+0x10f0>)
 8007aaa:	480b      	ldr	r0, [pc, #44]	; (8007ad8 <proceedSDO+0x10f4>)
 8007aac:	f004 feaa 	bl	800c804 <iprintf>
					failedSDO(d, CliServNbr, whoami, 0, 0, SDOABT_LOCAL_CTRL_ERROR);
 8007ab0:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8007ab4:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8007ab8:	4b08      	ldr	r3, [pc, #32]	; (8007adc <proceedSDO+0x10f8>)
 8007aba:	9301      	str	r3, [sp, #4]
 8007abc:	2300      	movs	r3, #0
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7fe fc4c 	bl	8006360 <failedSDO>
					return 0xFF;
 8007ac8:	23ff      	movs	r3, #255	; 0xff
 8007aca:	f002 b92b 	b.w	8009d24 <proceedSDO+0x3340>
 8007ace:	bf00      	nop
 8007ad0:	0800e1e0 	.word	0x0800e1e0
 8007ad4:	0800dec8 	.word	0x0800dec8
 8007ad8:	0800deec 	.word	0x0800deec
 8007adc:	08000021 	.word	0x08000021
 8007ae0:	0800e1a0 	.word	0x0800e1a0
 8007ae4:	0800e210 	.word	0x0800e210
 8007ae8:	0800e258 	.word	0x0800e258
				RestartSDO_TIMER(line)
 8007aec:	7efb      	ldrb	r3, [r7, #27]
 8007aee:	4619      	mov	r1, r3
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	2354      	movs	r3, #84	; 0x54
 8007af4:	fb03 f301 	mul.w	r3, r3, r1
 8007af8:	4413      	add	r3, r2
 8007afa:	3374      	adds	r3, #116	; 0x74
 8007afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b04:	d02d      	beq.n	8007b62 <proceedSDO+0x117e>
 8007b06:	7efb      	ldrb	r3, [r7, #27]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	2354      	movs	r3, #84	; 0x54
 8007b0e:	fb03 f301 	mul.w	r3, r3, r1
 8007b12:	4413      	add	r3, r2
 8007b14:	3374      	adds	r3, #116	; 0x74
 8007b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b1a:	7efa      	ldrb	r2, [r7, #27]
 8007b1c:	4614      	mov	r4, r2
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f003 f8fc 	bl	800ad1c <DelAlarm>
 8007b24:	4603      	mov	r3, r0
 8007b26:	4619      	mov	r1, r3
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	2354      	movs	r3, #84	; 0x54
 8007b2c:	fb03 f304 	mul.w	r3, r3, r4
 8007b30:	4413      	add	r3, r2
 8007b32:	3374      	adds	r3, #116	; 0x74
 8007b34:	460a      	mov	r2, r1
 8007b36:	801a      	strh	r2, [r3, #0]
 8007b38:	7efb      	ldrb	r3, [r7, #27]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	7efb      	ldrb	r3, [r7, #27]
 8007b3e:	461c      	mov	r4, r3
 8007b40:	2300      	movs	r3, #0
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	4b94      	ldr	r3, [pc, #592]	; (8007d98 <proceedSDO+0x13b4>)
 8007b46:	4a95      	ldr	r2, [pc, #596]	; (8007d9c <proceedSDO+0x13b8>)
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f003 f86b 	bl	800ac24 <SetAlarm>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	4619      	mov	r1, r3
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	2354      	movs	r3, #84	; 0x54
 8007b56:	fb03 f304 	mul.w	r3, r3, r4
 8007b5a:	4413      	add	r3, r2
 8007b5c:	3374      	adds	r3, #116	; 0x74
 8007b5e:	460a      	mov	r2, r1
 8007b60:	801a      	strh	r2, [r3, #0]
				index = d->transfers[line].index;
 8007b62:	7efb      	ldrb	r3, [r7, #27]
 8007b64:	4619      	mov	r1, r3
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	2354      	movs	r3, #84	; 0x54
 8007b6a:	fb03 f301 	mul.w	r3, r3, r1
 8007b6e:	4413      	add	r3, r2
 8007b70:	3330      	adds	r3, #48	; 0x30
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	84bb      	strh	r3, [r7, #36]	; 0x24
				subIndex = d->transfers[line].subIndex;
 8007b76:	7efb      	ldrb	r3, [r7, #27]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	2354      	movs	r3, #84	; 0x54
 8007b7e:	fb03 f301 	mul.w	r3, r3, r1
 8007b82:	4413      	add	r3, r2
 8007b84:	3332      	adds	r3, #50	; 0x32
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				if (getSDOe(m->data[0])) { /* If SDO expedited */
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	791b      	ldrb	r3, [r3, #4]
 8007b90:	085b      	lsrs	r3, r3, #1
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d072      	beq.n	8007c82 <proceedSDO+0x129e>
					nbBytes = 4 - getSDOn2(m->data[0]);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	791b      	ldrb	r3, [r3, #4]
 8007ba0:	089b      	lsrs	r3, r3, #2
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	f003 0303 	and.w	r3, r3, #3
 8007ba8:	f1c3 0304 	rsb	r3, r3, #4
 8007bac:	617b      	str	r3, [r7, #20]
					err = SDOtoLine(d, line, nbBytes, (*m).data + 4);
 8007bae:	7ef9      	ldrb	r1, [r7, #27]
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7fe fb6d 	bl	8006298 <SDOtoLine>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					if (err) {
 8007bc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d011      	beq.n	8007bf0 <proceedSDO+0x120c>
						failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_GENERAL_ERROR);
 8007bcc:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8007bce:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8007bd2:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8007bd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bda:	9301      	str	r3, [sp, #4]
 8007bdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	4603      	mov	r3, r0
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7fe fbbb 	bl	8006360 <failedSDO>
						return 0xFF;
 8007bea:	23ff      	movs	r3, #255	; 0xff
 8007bec:	f002 b89a 	b.w	8009d24 <proceedSDO+0x3340>
					StopSDO_TIMER(line)
 8007bf0:	7efb      	ldrb	r3, [r7, #27]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	2354      	movs	r3, #84	; 0x54
 8007bf8:	fb03 f301 	mul.w	r3, r3, r1
 8007bfc:	4413      	add	r3, r2
 8007bfe:	3374      	adds	r3, #116	; 0x74
 8007c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c04:	7efa      	ldrb	r2, [r7, #27]
 8007c06:	4614      	mov	r4, r2
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f003 f887 	bl	800ad1c <DelAlarm>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	4619      	mov	r1, r3
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	2354      	movs	r3, #84	; 0x54
 8007c16:	fb03 f304 	mul.w	r3, r3, r4
 8007c1a:	4413      	add	r3, r2
 8007c1c:	3374      	adds	r3, #116	; 0x74
 8007c1e:	460a      	mov	r2, r1
 8007c20:	801a      	strh	r2, [r3, #0]
					d->transfers[line].count = nbBytes;
 8007c22:	7efb      	ldrb	r3, [r7, #27]
 8007c24:	4618      	mov	r0, r3
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	6879      	ldr	r1, [r7, #4]
 8007c2a:	2354      	movs	r3, #84	; 0x54
 8007c2c:	fb03 f300 	mul.w	r3, r3, r0
 8007c30:	440b      	add	r3, r1
 8007c32:	3334      	adds	r3, #52	; 0x34
 8007c34:	601a      	str	r2, [r3, #0]
					d->transfers[line].state = SDO_FINISHED;
 8007c36:	7efb      	ldrb	r3, [r7, #27]
 8007c38:	4619      	mov	r1, r3
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	2354      	movs	r3, #84	; 0x54
 8007c3e:	fb03 f301 	mul.w	r3, r3, r1
 8007c42:	4413      	add	r3, r2
 8007c44:	332a      	adds	r3, #42	; 0x2a
 8007c46:	2201      	movs	r2, #1
 8007c48:	701a      	strb	r2, [r3, #0]
					if(d->transfers[line].Callback) (*d->transfers[line].Callback)(d,nodeId);
 8007c4a:	7efb      	ldrb	r3, [r7, #27]
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	2354      	movs	r3, #84	; 0x54
 8007c52:	fb03 f301 	mul.w	r3, r3, r1
 8007c56:	4413      	add	r3, r2
 8007c58:	3378      	adds	r3, #120	; 0x78
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00d      	beq.n	8007c7c <proceedSDO+0x1298>
 8007c60:	7efb      	ldrb	r3, [r7, #27]
 8007c62:	4619      	mov	r1, r3
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	2354      	movs	r3, #84	; 0x54
 8007c68:	fb03 f301 	mul.w	r3, r3, r1
 8007c6c:	4413      	add	r3, r2
 8007c6e:	3378      	adds	r3, #120	; 0x78
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007c76:	4611      	mov	r1, r2
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	4798      	blx	r3
					return 0;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f002 b851 	b.w	8009d24 <proceedSDO+0x3340>
					if (getSDOs(m->data[0])) {
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	791b      	ldrb	r3, [r3, #4]
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d02e      	beq.n	8007cec <proceedSDO+0x1308>
						nbBytes = m->data[4] + ((UNS32)(m->data[5])<<8) + ((UNS32)(m->data[6])<<16) + ((UNS32)(m->data[7])<<24);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	7a1b      	ldrb	r3, [r3, #8]
 8007c92:	461a      	mov	r2, r3
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	7a5b      	ldrb	r3, [r3, #9]
 8007c98:	021b      	lsls	r3, r3, #8
 8007c9a:	441a      	add	r2, r3
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	7a9b      	ldrb	r3, [r3, #10]
 8007ca0:	041b      	lsls	r3, r3, #16
 8007ca2:	441a      	add	r2, r3
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	7adb      	ldrb	r3, [r3, #11]
 8007ca8:	061b      	lsls	r3, r3, #24
 8007caa:	4413      	add	r3, r2
 8007cac:	617b      	str	r3, [r7, #20]
						err = setSDOlineRestBytes(d, line, nbBytes);
 8007cae:	7efb      	ldrb	r3, [r7, #27]
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f7fe fd97 	bl	80067e8 <setSDOlineRestBytes>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						if (err) {
 8007cc0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d011      	beq.n	8007cec <proceedSDO+0x1308>
							failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_GENERAL_ERROR);
 8007cc8:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8007cca:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8007cce:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8007cd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cd6:	9301      	str	r3, [sp, #4]
 8007cd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	4603      	mov	r3, r0
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7fe fb3d 	bl	8006360 <failedSDO>
							return 0xFF;
 8007ce6:	23ff      	movs	r3, #255	; 0xff
 8007ce8:	f002 b81c 	b.w	8009d24 <proceedSDO+0x3340>
					data[0] = 3 << 5;
 8007cec:	2360      	movs	r3, #96	; 0x60
 8007cee:	733b      	strb	r3, [r7, #12]
					for (i = 1 ; i < 8 ; i++)
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cf4:	e008      	b.n	8007d08 <proceedSDO+0x1324>
						data[i] = 0;
 8007cf6:	f107 020c 	add.w	r2, r7, #12
 8007cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cfc:	4413      	add	r3, r2
 8007cfe:	2200      	movs	r2, #0
 8007d00:	701a      	strb	r2, [r3, #0]
					for (i = 1 ; i < 8 ; i++)
 8007d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d04:	3301      	adds	r3, #1
 8007d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d0a:	2b07      	cmp	r3, #7
 8007d0c:	d9f3      	bls.n	8007cf6 <proceedSDO+0x1312>
					sendSDO(d, whoami, CliServNbr, data);
 8007d0e:	f107 030c 	add.w	r3, r7, #12
 8007d12:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007d16:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7fe fd90 	bl	8006840 <sendSDO>
			break;
 8007d20:	f001 bfff 	b.w	8009d22 <proceedSDO+0x333e>

		case 3:
			/* I am SERVER */
			if (whoami == SDO_SERVER) {
 8007d24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	f040 8179 	bne.w	8008020 <proceedSDO+0x163c>
				/* Receiving a upload segment. */
				/* A SDO transfer should have been yet initiated. */
				if (!err)
 8007d2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10f      	bne.n	8007d56 <proceedSDO+0x1372>
					err = (UNS8)(d->transfers[line].state != SDO_UPLOAD_IN_PROGRESS);
 8007d36:	7efb      	ldrb	r3, [r7, #27]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	2354      	movs	r3, #84	; 0x54
 8007d3e:	fb03 f301 	mul.w	r3, r3, r1
 8007d42:	4413      	add	r3, r2
 8007d44:	332a      	adds	r3, #42	; 0x2a
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	2b03      	cmp	r3, #3
 8007d4a:	bf14      	ite	ne
 8007d4c:	2301      	movne	r3, #1
 8007d4e:	2300      	moveq	r3, #0
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (err) {
 8007d56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d028      	beq.n	8007db0 <proceedSDO+0x13cc>
					MSG_ERR(0x1AA0, "SDO error : Received upload segment for unstarted trans. index 0x1200 + ",
 8007d5e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007d62:	9301      	str	r3, [sp, #4]
 8007d64:	4b0e      	ldr	r3, [pc, #56]	; (8007da0 <proceedSDO+0x13bc>)
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	f44f 53d5 	mov.w	r3, #6816	; 0x1aa0
 8007d6c:	f240 42d1 	movw	r2, #1233	; 0x4d1
 8007d70:	490c      	ldr	r1, [pc, #48]	; (8007da4 <proceedSDO+0x13c0>)
 8007d72:	480d      	ldr	r0, [pc, #52]	; (8007da8 <proceedSDO+0x13c4>)
 8007d74:	f004 fd46 	bl	800c804 <iprintf>
							CliServNbr);
					failedSDO(d, CliServNbr, whoami, 0, 0, SDOABT_LOCAL_CTRL_ERROR);
 8007d78:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8007d7c:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8007d80:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <proceedSDO+0x13c8>)
 8007d82:	9301      	str	r3, [sp, #4]
 8007d84:	2300      	movs	r3, #0
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	2300      	movs	r3, #0
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7fe fae8 	bl	8006360 <failedSDO>
					return 0xFF;
 8007d90:	23ff      	movs	r3, #255	; 0xff
 8007d92:	f001 bfc7 	b.w	8009d24 <proceedSDO+0x3340>
 8007d96:	bf00      	nop
 8007d98:	000493e0 	.word	0x000493e0
 8007d9c:	08005ead 	.word	0x08005ead
 8007da0:	0800e2a0 	.word	0x0800e2a0
 8007da4:	0800dec8 	.word	0x0800dec8
 8007da8:	0800deec 	.word	0x0800deec
 8007dac:	08000021 	.word	0x08000021
				}
				/* Reset the wathdog */
				RestartSDO_TIMER(line)
 8007db0:	7efb      	ldrb	r3, [r7, #27]
 8007db2:	4619      	mov	r1, r3
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	2354      	movs	r3, #84	; 0x54
 8007db8:	fb03 f301 	mul.w	r3, r3, r1
 8007dbc:	4413      	add	r3, r2
 8007dbe:	3374      	adds	r3, #116	; 0x74
 8007dc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dc8:	d02d      	beq.n	8007e26 <proceedSDO+0x1442>
 8007dca:	7efb      	ldrb	r3, [r7, #27]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	2354      	movs	r3, #84	; 0x54
 8007dd2:	fb03 f301 	mul.w	r3, r3, r1
 8007dd6:	4413      	add	r3, r2
 8007dd8:	3374      	adds	r3, #116	; 0x74
 8007dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007dde:	7efa      	ldrb	r2, [r7, #27]
 8007de0:	4614      	mov	r4, r2
 8007de2:	4618      	mov	r0, r3
 8007de4:	f002 ff9a 	bl	800ad1c <DelAlarm>
 8007de8:	4603      	mov	r3, r0
 8007dea:	4619      	mov	r1, r3
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	2354      	movs	r3, #84	; 0x54
 8007df0:	fb03 f304 	mul.w	r3, r3, r4
 8007df4:	4413      	add	r3, r2
 8007df6:	3374      	adds	r3, #116	; 0x74
 8007df8:	460a      	mov	r2, r1
 8007dfa:	801a      	strh	r2, [r3, #0]
 8007dfc:	7efb      	ldrb	r3, [r7, #27]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	7efb      	ldrb	r3, [r7, #27]
 8007e02:	461c      	mov	r4, r3
 8007e04:	2300      	movs	r3, #0
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	4b9f      	ldr	r3, [pc, #636]	; (8008088 <proceedSDO+0x16a4>)
 8007e0a:	4aa0      	ldr	r2, [pc, #640]	; (800808c <proceedSDO+0x16a8>)
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f002 ff09 	bl	800ac24 <SetAlarm>
 8007e12:	4603      	mov	r3, r0
 8007e14:	4619      	mov	r1, r3
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	2354      	movs	r3, #84	; 0x54
 8007e1a:	fb03 f304 	mul.w	r3, r3, r4
 8007e1e:	4413      	add	r3, r2
 8007e20:	3374      	adds	r3, #116	; 0x74
 8007e22:	460a      	mov	r2, r1
 8007e24:	801a      	strh	r2, [r3, #0]
					MSG_WAR(0x3AA1, "Received SDO upload segment defined at index 0x1200 + ", CliServNbr);
				index = d->transfers[line].index;
 8007e26:	7efb      	ldrb	r3, [r7, #27]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	2354      	movs	r3, #84	; 0x54
 8007e2e:	fb03 f301 	mul.w	r3, r3, r1
 8007e32:	4413      	add	r3, r2
 8007e34:	3330      	adds	r3, #48	; 0x30
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	84bb      	strh	r3, [r7, #36]	; 0x24
				subIndex = d->transfers[line].subIndex;
 8007e3a:	7efb      	ldrb	r3, [r7, #27]
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	2354      	movs	r3, #84	; 0x54
 8007e42:	fb03 f301 	mul.w	r3, r3, r1
 8007e46:	4413      	add	r3, r2
 8007e48:	3332      	adds	r3, #50	; 0x32
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				/* Toggle test.*/
				if (d->transfers[line].toggle != getSDOt(m->data[0])) {
 8007e50:	7efb      	ldrb	r3, [r7, #27]
 8007e52:	4619      	mov	r1, r3
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	2354      	movs	r3, #84	; 0x54
 8007e58:	fb03 f301 	mul.w	r3, r3, r1
 8007e5c:	4413      	add	r3, r2
 8007e5e:	332b      	adds	r3, #43	; 0x2b
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	791b      	ldrb	r3, [r3, #4]
 8007e68:	091b      	lsrs	r3, r3, #4
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d021      	beq.n	8007eb8 <proceedSDO+0x14d4>
					MSG_ERR(0x1AA2, "SDO error : Toggle error : ", getSDOt(m->data[0]));
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	791b      	ldrb	r3, [r3, #4]
 8007e78:	091b      	lsrs	r3, r3, #4
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	9301      	str	r3, [sp, #4]
 8007e82:	4b83      	ldr	r3, [pc, #524]	; (8008090 <proceedSDO+0x16ac>)
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	f641 23a2 	movw	r3, #6818	; 0x1aa2
 8007e8a:	f240 42dc 	movw	r2, #1244	; 0x4dc
 8007e8e:	4981      	ldr	r1, [pc, #516]	; (8008094 <proceedSDO+0x16b0>)
 8007e90:	4881      	ldr	r0, [pc, #516]	; (8008098 <proceedSDO+0x16b4>)
 8007e92:	f004 fcb7 	bl	800c804 <iprintf>
					failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_TOGGLE_NOT_ALTERNED);
 8007e96:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8007e98:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8007e9c:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8007ea0:	4b7e      	ldr	r3, [pc, #504]	; (800809c <proceedSDO+0x16b8>)
 8007ea2:	9301      	str	r3, [sp, #4]
 8007ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	4603      	mov	r3, r0
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7fe fa57 	bl	8006360 <failedSDO>
					return 0xFF;
 8007eb2:	23ff      	movs	r3, #255	; 0xff
 8007eb4:	f001 bf36 	b.w	8009d24 <proceedSDO+0x3340>
				}
				/* Uploading next segment. We need to know if it will be the last one. */
				getSDOlineRestBytes(d, line, &nbBytes);
 8007eb8:	7efb      	ldrb	r3, [r7, #27]
 8007eba:	f107 0214 	add.w	r2, r7, #20
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7fe fc63 	bl	800678c <getSDOlineRestBytes>
				if (nbBytes > 7) {
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2b07      	cmp	r3, #7
 8007eca:	d950      	bls.n	8007f6e <proceedSDO+0x158a>
					/* The segment to transfer is not the last one.*/
					/* code to send the next segment. (cs = 0; c = 0) */
					data[0] = (UNS8)(d->transfers[line].toggle << 4);
 8007ecc:	7efb      	ldrb	r3, [r7, #27]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	2354      	movs	r3, #84	; 0x54
 8007ed4:	fb03 f301 	mul.w	r3, r3, r1
 8007ed8:	4413      	add	r3, r2
 8007eda:	332b      	adds	r3, #43	; 0x2b
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	011b      	lsls	r3, r3, #4
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	733b      	strb	r3, [r7, #12]
					err = lineToSDO(d, line, 7, data + 1);
 8007ee4:	7ef9      	ldrb	r1, [r7, #27]
 8007ee6:	f107 030c 	add.w	r3, r7, #12
 8007eea:	3301      	adds	r3, #1
 8007eec:	2207      	movs	r2, #7
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7fe f94c 	bl	800618c <lineToSDO>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					if (err) {
 8007efa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d011      	beq.n	8007f26 <proceedSDO+0x1542>
						failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_GENERAL_ERROR);
 8007f02:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8007f04:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8007f08:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8007f0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f10:	9301      	str	r3, [sp, #4]
 8007f12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	4603      	mov	r3, r0
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7fe fa20 	bl	8006360 <failedSDO>
						return 0xFF;
 8007f20:	23ff      	movs	r3, #255	; 0xff
 8007f22:	f001 beff 	b.w	8009d24 <proceedSDO+0x3340>
					}
					/* Inverting the toggle for the next tranfert. */
					d->transfers[line].toggle = (UNS8)(! d->transfers[line].toggle & 1);
 8007f26:	7efb      	ldrb	r3, [r7, #27]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	2354      	movs	r3, #84	; 0x54
 8007f2e:	fb03 f301 	mul.w	r3, r3, r1
 8007f32:	4413      	add	r3, r2
 8007f34:	332b      	adds	r3, #43	; 0x2b
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	bf0c      	ite	eq
 8007f3c:	2301      	moveq	r3, #1
 8007f3e:	2300      	movne	r3, #0
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	7efa      	ldrb	r2, [r7, #27]
 8007f44:	4611      	mov	r1, r2
 8007f46:	4618      	mov	r0, r3
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	2354      	movs	r3, #84	; 0x54
 8007f4c:	fb03 f301 	mul.w	r3, r3, r1
 8007f50:	4413      	add	r3, r2
 8007f52:	332b      	adds	r3, #43	; 0x2b
 8007f54:	4602      	mov	r2, r0
 8007f56:	701a      	strb	r2, [r3, #0]
					MSG_WAR(0x3AA3, "SDO. Sending upload segment defined at index 0x1200 + ", CliServNbr);
					sendSDO(d, whoami, CliServNbr, data);
 8007f58:	f107 030c 	add.w	r3, r7, #12
 8007f5c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007f60:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7fe fc6b 	bl	8006840 <sendSDO>
				}
				MSG_WAR(0x3AA7, "SDO sending download segment to nodeId", nodeId);
				sendSDO(d, whoami, CliServNbr, data);

			} /* end if I am a CLIENT		*/
			break;
 8007f6a:	f001 beda 	b.w	8009d22 <proceedSDO+0x333e>
					data[0] = (UNS8)((d->transfers[line].toggle << 4) | ((7 - nbBytes) << 1) | 1);
 8007f6e:	7efb      	ldrb	r3, [r7, #27]
 8007f70:	4619      	mov	r1, r3
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	2354      	movs	r3, #84	; 0x54
 8007f76:	fb03 f301 	mul.w	r3, r3, r1
 8007f7a:	4413      	add	r3, r2
 8007f7c:	332b      	adds	r3, #43	; 0x2b
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	011b      	lsls	r3, r3, #4
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	f1c3 0307 	rsb	r3, r3, #7
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	005b      	lsls	r3, r3, #1
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	4313      	orrs	r3, r2
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	f043 0301 	orr.w	r3, r3, #1
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	733b      	strb	r3, [r7, #12]
					err = lineToSDO(d, line, nbBytes, data + 1);
 8007f9e:	7ef9      	ldrb	r1, [r7, #27]
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	f107 030c 	add.w	r3, r7, #12
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7fe f8ef 	bl	800618c <lineToSDO>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					if (err) {
 8007fb4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d011      	beq.n	8007fe0 <proceedSDO+0x15fc>
						failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_GENERAL_ERROR);
 8007fbc:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8007fbe:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8007fc2:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8007fc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fca:	9301      	str	r3, [sp, #4]
 8007fcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7fe f9c3 	bl	8006360 <failedSDO>
						return 0xFF;
 8007fda:	23ff      	movs	r3, #255	; 0xff
 8007fdc:	f001 bea2 	b.w	8009d24 <proceedSDO+0x3340>
					for (i = nbBytes + 1 ; i < 8 ; i++)
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fe6:	e008      	b.n	8007ffa <proceedSDO+0x1616>
						data[i] = 0;
 8007fe8:	f107 020c 	add.w	r2, r7, #12
 8007fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fee:	4413      	add	r3, r2
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	701a      	strb	r2, [r3, #0]
					for (i = nbBytes + 1 ; i < 8 ; i++)
 8007ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ffc:	2b07      	cmp	r3, #7
 8007ffe:	d9f3      	bls.n	8007fe8 <proceedSDO+0x1604>
					sendSDO(d, whoami, CliServNbr, data);
 8008000:	f107 030c 	add.w	r3, r7, #12
 8008004:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8008008:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7fe fc17 	bl	8006840 <sendSDO>
					resetSDOline(d, line);
 8008012:	7efb      	ldrb	r3, [r7, #27]
 8008014:	4619      	mov	r1, r3
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7fe fa0e 	bl	8006438 <resetSDOline>
			break;
 800801c:	f001 be81 	b.w	8009d22 <proceedSDO+0x333e>
				if (!err)
 8008020:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10f      	bne.n	8008048 <proceedSDO+0x1664>
					err = (UNS8)(d->transfers[line].state != SDO_DOWNLOAD_IN_PROGRESS);
 8008028:	7efb      	ldrb	r3, [r7, #27]
 800802a:	4619      	mov	r1, r3
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	2354      	movs	r3, #84	; 0x54
 8008030:	fb03 f301 	mul.w	r3, r3, r1
 8008034:	4413      	add	r3, r2
 8008036:	332a      	adds	r3, #42	; 0x2a
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	2b02      	cmp	r3, #2
 800803c:	bf14      	ite	ne
 800803e:	2301      	movne	r3, #1
 8008040:	2300      	moveq	r3, #0
 8008042:	b2db      	uxtb	r3, r3
 8008044:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (err) {
 8008048:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800804c:	2b00      	cmp	r3, #0
 800804e:	d02b      	beq.n	80080a8 <proceedSDO+0x16c4>
					MSG_ERR(0x1AA5, "SDO error : Received response for unknown download request from nodeId", nodeId);
 8008050:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8008054:	9301      	str	r3, [sp, #4]
 8008056:	4b12      	ldr	r3, [pc, #72]	; (80080a0 <proceedSDO+0x16bc>)
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	f641 23a5 	movw	r3, #6821	; 0x1aa5
 800805e:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8008062:	490c      	ldr	r1, [pc, #48]	; (8008094 <proceedSDO+0x16b0>)
 8008064:	480c      	ldr	r0, [pc, #48]	; (8008098 <proceedSDO+0x16b4>)
 8008066:	f004 fbcd 	bl	800c804 <iprintf>
					failedSDO(d, CliServNbr, whoami, 0, 0, SDOABT_LOCAL_CTRL_ERROR);
 800806a:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800806e:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8008072:	4b0c      	ldr	r3, [pc, #48]	; (80080a4 <proceedSDO+0x16c0>)
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	2300      	movs	r3, #0
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	2300      	movs	r3, #0
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f7fe f96f 	bl	8006360 <failedSDO>
					return 0xFF;
 8008082:	23ff      	movs	r3, #255	; 0xff
 8008084:	f001 be4e 	b.w	8009d24 <proceedSDO+0x3340>
 8008088:	000493e0 	.word	0x000493e0
 800808c:	08005ead 	.word	0x08005ead
 8008090:	0800e094 	.word	0x0800e094
 8008094:	0800dec8 	.word	0x0800dec8
 8008098:	0800deec 	.word	0x0800deec
 800809c:	05030000 	.word	0x05030000
 80080a0:	0800e2ec 	.word	0x0800e2ec
 80080a4:	08000021 	.word	0x08000021
				RestartSDO_TIMER(line)
 80080a8:	7efb      	ldrb	r3, [r7, #27]
 80080aa:	4619      	mov	r1, r3
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	2354      	movs	r3, #84	; 0x54
 80080b0:	fb03 f301 	mul.w	r3, r3, r1
 80080b4:	4413      	add	r3, r2
 80080b6:	3374      	adds	r3, #116	; 0x74
 80080b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80080bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080c0:	d02d      	beq.n	800811e <proceedSDO+0x173a>
 80080c2:	7efb      	ldrb	r3, [r7, #27]
 80080c4:	4619      	mov	r1, r3
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	2354      	movs	r3, #84	; 0x54
 80080ca:	fb03 f301 	mul.w	r3, r3, r1
 80080ce:	4413      	add	r3, r2
 80080d0:	3374      	adds	r3, #116	; 0x74
 80080d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80080d6:	7efa      	ldrb	r2, [r7, #27]
 80080d8:	4614      	mov	r4, r2
 80080da:	4618      	mov	r0, r3
 80080dc:	f002 fe1e 	bl	800ad1c <DelAlarm>
 80080e0:	4603      	mov	r3, r0
 80080e2:	4619      	mov	r1, r3
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	2354      	movs	r3, #84	; 0x54
 80080e8:	fb03 f304 	mul.w	r3, r3, r4
 80080ec:	4413      	add	r3, r2
 80080ee:	3374      	adds	r3, #116	; 0x74
 80080f0:	460a      	mov	r2, r1
 80080f2:	801a      	strh	r2, [r3, #0]
 80080f4:	7efb      	ldrb	r3, [r7, #27]
 80080f6:	4619      	mov	r1, r3
 80080f8:	7efb      	ldrb	r3, [r7, #27]
 80080fa:	461c      	mov	r4, r3
 80080fc:	2300      	movs	r3, #0
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	4bb2      	ldr	r3, [pc, #712]	; (80083cc <proceedSDO+0x19e8>)
 8008102:	4ab3      	ldr	r2, [pc, #716]	; (80083d0 <proceedSDO+0x19ec>)
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f002 fd8d 	bl	800ac24 <SetAlarm>
 800810a:	4603      	mov	r3, r0
 800810c:	4619      	mov	r1, r3
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	2354      	movs	r3, #84	; 0x54
 8008112:	fb03 f304 	mul.w	r3, r3, r4
 8008116:	4413      	add	r3, r2
 8008118:	3374      	adds	r3, #116	; 0x74
 800811a:	460a      	mov	r2, r1
 800811c:	801a      	strh	r2, [r3, #0]
					index = d->transfers[line].index;
 800811e:	7efb      	ldrb	r3, [r7, #27]
 8008120:	4619      	mov	r1, r3
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	2354      	movs	r3, #84	; 0x54
 8008126:	fb03 f301 	mul.w	r3, r3, r1
 800812a:	4413      	add	r3, r2
 800812c:	3330      	adds	r3, #48	; 0x30
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	84bb      	strh	r3, [r7, #36]	; 0x24
				subIndex = d->transfers[line].subIndex;
 8008132:	7efb      	ldrb	r3, [r7, #27]
 8008134:	4619      	mov	r1, r3
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	2354      	movs	r3, #84	; 0x54
 800813a:	fb03 f301 	mul.w	r3, r3, r1
 800813e:	4413      	add	r3, r2
 8008140:	3332      	adds	r3, #50	; 0x32
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				getSDOlineRestBytes(d, line, &nbBytes);
 8008148:	7efb      	ldrb	r3, [r7, #27]
 800814a:	f107 0214 	add.w	r2, r7, #20
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7fe fb1b 	bl	800678c <getSDOlineRestBytes>
				if (nbBytes == 0) {
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d145      	bne.n	80081e8 <proceedSDO+0x1804>
					MSG("%x-%x",index,subIndex);
 800815c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800815e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008162:	4619      	mov	r1, r3
 8008164:	489b      	ldr	r0, [pc, #620]	; (80083d4 <proceedSDO+0x19f0>)
 8008166:	f004 fb4d 	bl	800c804 <iprintf>
					StopSDO_TIMER(line)
 800816a:	7efb      	ldrb	r3, [r7, #27]
 800816c:	4619      	mov	r1, r3
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	2354      	movs	r3, #84	; 0x54
 8008172:	fb03 f301 	mul.w	r3, r3, r1
 8008176:	4413      	add	r3, r2
 8008178:	3374      	adds	r3, #116	; 0x74
 800817a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800817e:	7efa      	ldrb	r2, [r7, #27]
 8008180:	4614      	mov	r4, r2
 8008182:	4618      	mov	r0, r3
 8008184:	f002 fdca 	bl	800ad1c <DelAlarm>
 8008188:	4603      	mov	r3, r0
 800818a:	4619      	mov	r1, r3
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	2354      	movs	r3, #84	; 0x54
 8008190:	fb03 f304 	mul.w	r3, r3, r4
 8008194:	4413      	add	r3, r2
 8008196:	3374      	adds	r3, #116	; 0x74
 8008198:	460a      	mov	r2, r1
 800819a:	801a      	strh	r2, [r3, #0]
						d->transfers[line].state = SDO_FINISHED;
 800819c:	7efb      	ldrb	r3, [r7, #27]
 800819e:	4619      	mov	r1, r3
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	2354      	movs	r3, #84	; 0x54
 80081a4:	fb03 f301 	mul.w	r3, r3, r1
 80081a8:	4413      	add	r3, r2
 80081aa:	332a      	adds	r3, #42	; 0x2a
 80081ac:	2201      	movs	r2, #1
 80081ae:	701a      	strb	r2, [r3, #0]
					if(d->transfers[line].Callback) (*d->transfers[line].Callback)(d,nodeId);
 80081b0:	7efb      	ldrb	r3, [r7, #27]
 80081b2:	4619      	mov	r1, r3
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	2354      	movs	r3, #84	; 0x54
 80081b8:	fb03 f301 	mul.w	r3, r3, r1
 80081bc:	4413      	add	r3, r2
 80081be:	3378      	adds	r3, #120	; 0x78
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00d      	beq.n	80081e2 <proceedSDO+0x17fe>
 80081c6:	7efb      	ldrb	r3, [r7, #27]
 80081c8:	4619      	mov	r1, r3
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	2354      	movs	r3, #84	; 0x54
 80081ce:	fb03 f301 	mul.w	r3, r3, r1
 80081d2:	4413      	add	r3, r2
 80081d4:	3378      	adds	r3, #120	; 0x78
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80081dc:	4611      	mov	r1, r2
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	4798      	blx	r3
					return 0x00;
 80081e2:	2300      	movs	r3, #0
 80081e4:	f001 bd9e 	b.w	8009d24 <proceedSDO+0x3340>
				if (nbBytes > 7) {
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	2b07      	cmp	r3, #7
 80081ec:	d92c      	bls.n	8008248 <proceedSDO+0x1864>
					data[0] = (UNS8)(d->transfers[line].toggle << 4);
 80081ee:	7efb      	ldrb	r3, [r7, #27]
 80081f0:	4619      	mov	r1, r3
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	2354      	movs	r3, #84	; 0x54
 80081f6:	fb03 f301 	mul.w	r3, r3, r1
 80081fa:	4413      	add	r3, r2
 80081fc:	332b      	adds	r3, #43	; 0x2b
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	011b      	lsls	r3, r3, #4
 8008202:	b2db      	uxtb	r3, r3
 8008204:	733b      	strb	r3, [r7, #12]
					err = lineToSDO(d, line, 7, data + 1);
 8008206:	7ef9      	ldrb	r1, [r7, #27]
 8008208:	f107 030c 	add.w	r3, r7, #12
 800820c:	3301      	adds	r3, #1
 800820e:	2207      	movs	r2, #7
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7fd ffbb 	bl	800618c <lineToSDO>
 8008216:	4603      	mov	r3, r0
 8008218:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					if (err) {
 800821c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008220:	2b00      	cmp	r3, #0
 8008222:	d05a      	beq.n	80082da <proceedSDO+0x18f6>
						failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_GENERAL_ERROR);
 8008224:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8008226:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800822a:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800822e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008232:	9301      	str	r3, [sp, #4]
 8008234:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	4603      	mov	r3, r0
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7fe f88f 	bl	8006360 <failedSDO>
						return 0xFF;
 8008242:	23ff      	movs	r3, #255	; 0xff
 8008244:	f001 bd6e 	b.w	8009d24 <proceedSDO+0x3340>
					data[0] = (UNS8)((d->transfers[line].toggle << 4) | ((7 - nbBytes) << 1) | 1);
 8008248:	7efb      	ldrb	r3, [r7, #27]
 800824a:	4619      	mov	r1, r3
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	2354      	movs	r3, #84	; 0x54
 8008250:	fb03 f301 	mul.w	r3, r3, r1
 8008254:	4413      	add	r3, r2
 8008256:	332b      	adds	r3, #43	; 0x2b
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	011b      	lsls	r3, r3, #4
 800825c:	b2da      	uxtb	r2, r3
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	b2db      	uxtb	r3, r3
 8008262:	f1c3 0307 	rsb	r3, r3, #7
 8008266:	b2db      	uxtb	r3, r3
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	b2db      	uxtb	r3, r3
 800826c:	4313      	orrs	r3, r2
 800826e:	b2db      	uxtb	r3, r3
 8008270:	f043 0301 	orr.w	r3, r3, #1
 8008274:	b2db      	uxtb	r3, r3
 8008276:	733b      	strb	r3, [r7, #12]
					err = lineToSDO(d, line, nbBytes, data + 1);
 8008278:	7ef9      	ldrb	r1, [r7, #27]
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	f107 030c 	add.w	r3, r7, #12
 8008280:	3301      	adds	r3, #1
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7fd ff82 	bl	800618c <lineToSDO>
 8008288:	4603      	mov	r3, r0
 800828a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					if (err) {
 800828e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008292:	2b00      	cmp	r3, #0
 8008294:	d011      	beq.n	80082ba <proceedSDO+0x18d6>
						failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_GENERAL_ERROR);
 8008296:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8008298:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800829c:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80082a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082a4:	9301      	str	r3, [sp, #4]
 80082a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	4603      	mov	r3, r0
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7fe f856 	bl	8006360 <failedSDO>
						return 0xFF;
 80082b4:	23ff      	movs	r3, #255	; 0xff
 80082b6:	f001 bd35 	b.w	8009d24 <proceedSDO+0x3340>
					for (i = nbBytes + 1 ; i < 8 ; i++)
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	3301      	adds	r3, #1
 80082be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082c0:	e008      	b.n	80082d4 <proceedSDO+0x18f0>
						data[i] = 0;
 80082c2:	f107 020c 	add.w	r2, r7, #12
 80082c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c8:	4413      	add	r3, r2
 80082ca:	2200      	movs	r2, #0
 80082cc:	701a      	strb	r2, [r3, #0]
					for (i = nbBytes + 1 ; i < 8 ; i++)
 80082ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d0:	3301      	adds	r3, #1
 80082d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d6:	2b07      	cmp	r3, #7
 80082d8:	d9f3      	bls.n	80082c2 <proceedSDO+0x18de>
				sendSDO(d, whoami, CliServNbr, data);
 80082da:	f107 030c 	add.w	r3, r7, #12
 80082de:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80082e2:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7fe faaa 	bl	8006840 <sendSDO>
			break;
 80082ec:	f001 bd19 	b.w	8009d22 <proceedSDO+0x333e>

		case 4:
			abortCode =
				(UNS32)m->data[4] |
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	7a1b      	ldrb	r3, [r3, #8]
 80082f4:	461a      	mov	r2, r3
				((UNS32)m->data[5] << 8) |
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	7a5b      	ldrb	r3, [r3, #9]
 80082fa:	021b      	lsls	r3, r3, #8
				(UNS32)m->data[4] |
 80082fc:	431a      	orrs	r2, r3
				((UNS32)m->data[6] << 16) |
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	7a9b      	ldrb	r3, [r3, #10]
 8008302:	041b      	lsls	r3, r3, #16
				((UNS32)m->data[5] << 8) |
 8008304:	431a      	orrs	r2, r3
				((UNS32)m->data[7] << 24);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	7adb      	ldrb	r3, [r3, #11]
 800830a:	061b      	lsls	r3, r3, #24
			abortCode =
 800830c:	4313      	orrs	r3, r2
 800830e:	61fb      	str	r3, [r7, #28]
			/* Received SDO abort. */
			if (whoami == SDO_SERVER) {
 8008310:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008314:	2b01      	cmp	r3, #1
 8008316:	d10b      	bne.n	8008330 <proceedSDO+0x194c>
				if (!err) {
 8008318:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800831c:	2b00      	cmp	r3, #0
 800831e:	f041 84fb 	bne.w	8009d18 <proceedSDO+0x3334>
					resetSDOline( d, line );
 8008322:	7efb      	ldrb	r3, [r7, #27]
 8008324:	4619      	mov	r1, r3
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7fe f886 	bl	8006438 <resetSDOline>
				}
				else {
					MSG_WAR(0x3AB1, "SD0. Received SDO abort. No line found. Code : ", abortCode);
				}
			}
			break;
 800832c:	f001 bcf4 	b.w	8009d18 <proceedSDO+0x3334>
				if (!err) {
 8008330:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008334:	2b00      	cmp	r3, #0
 8008336:	f041 84ef 	bne.w	8009d18 <proceedSDO+0x3334>
					StopSDO_TIMER(line)
 800833a:	7efb      	ldrb	r3, [r7, #27]
 800833c:	4619      	mov	r1, r3
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	2354      	movs	r3, #84	; 0x54
 8008342:	fb03 f301 	mul.w	r3, r3, r1
 8008346:	4413      	add	r3, r2
 8008348:	3374      	adds	r3, #116	; 0x74
 800834a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800834e:	7efa      	ldrb	r2, [r7, #27]
 8008350:	4614      	mov	r4, r2
 8008352:	4618      	mov	r0, r3
 8008354:	f002 fce2 	bl	800ad1c <DelAlarm>
 8008358:	4603      	mov	r3, r0
 800835a:	4619      	mov	r1, r3
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	2354      	movs	r3, #84	; 0x54
 8008360:	fb03 f304 	mul.w	r3, r3, r4
 8008364:	4413      	add	r3, r2
 8008366:	3374      	adds	r3, #116	; 0x74
 8008368:	460a      	mov	r2, r1
 800836a:	801a      	strh	r2, [r3, #0]
					d->transfers[line].state = SDO_ABORTED_RCV;
 800836c:	7efb      	ldrb	r3, [r7, #27]
 800836e:	4619      	mov	r1, r3
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	2354      	movs	r3, #84	; 0x54
 8008374:	fb03 f301 	mul.w	r3, r3, r1
 8008378:	4413      	add	r3, r2
 800837a:	332a      	adds	r3, #42	; 0x2a
 800837c:	2280      	movs	r2, #128	; 0x80
 800837e:	701a      	strb	r2, [r3, #0]
					d->transfers[line].abortCode = abortCode;
 8008380:	7efb      	ldrb	r3, [r7, #27]
 8008382:	4619      	mov	r1, r3
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	2354      	movs	r3, #84	; 0x54
 8008388:	fb03 f301 	mul.w	r3, r3, r1
 800838c:	4413      	add	r3, r2
 800838e:	332c      	adds	r3, #44	; 0x2c
 8008390:	69fa      	ldr	r2, [r7, #28]
 8008392:	601a      	str	r2, [r3, #0]
					if(d->transfers[line].Callback) (*d->transfers[line].Callback)(d,nodeId);
 8008394:	7efb      	ldrb	r3, [r7, #27]
 8008396:	4619      	mov	r1, r3
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	2354      	movs	r3, #84	; 0x54
 800839c:	fb03 f301 	mul.w	r3, r3, r1
 80083a0:	4413      	add	r3, r2
 80083a2:	3378      	adds	r3, #120	; 0x78
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f001 84b6 	beq.w	8009d18 <proceedSDO+0x3334>
 80083ac:	7efb      	ldrb	r3, [r7, #27]
 80083ae:	4619      	mov	r1, r3
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	2354      	movs	r3, #84	; 0x54
 80083b4:	fb03 f301 	mul.w	r3, r3, r1
 80083b8:	4413      	add	r3, r2
 80083ba:	3378      	adds	r3, #120	; 0x78
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80083c2:	4611      	mov	r1, r2
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	4798      	blx	r3
			break;
 80083c8:	f001 bca6 	b.w	8009d18 <proceedSDO+0x3334>
 80083cc:	000493e0 	.word	0x000493e0
 80083d0:	08005ead 	.word	0x08005ead
 80083d4:	0800e334 	.word	0x0800e334
		case 5: /* Command specifier for data transmission - the client or server is the data producer */
			SubCommand = getSDOblockSC(m->data[0]);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	791b      	ldrb	r3, [r3, #4]
 80083dc:	f003 0303 	and.w	r3, r3, #3
 80083e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (whoami == SDO_SERVER) { /* Server block upload */
 80083e4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	f040 8355 	bne.w	8008a98 <proceedSDO+0x20b4>
				if (SubCommand == SDO_BCS_INITIATE_UPLOAD_REQUEST) {
 80083ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f040 8105 	bne.w	8008602 <proceedSDO+0x1c1e>
				    index = (UNS16)getSDOindex(m->data[1],m->data[2]);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	799b      	ldrb	r3, [r3, #6]
 80083fc:	021b      	lsls	r3, r3, #8
 80083fe:	b21a      	sxth	r2, r3
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	795b      	ldrb	r3, [r3, #5]
 8008404:	b21b      	sxth	r3, r3
 8008406:	4313      	orrs	r3, r2
 8008408:	b21b      	sxth	r3, r3
 800840a:	84bb      	strh	r3, [r7, #36]	; 0x24
				    subIndex = getSDOsubIndex(m->data[3]);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	79db      	ldrb	r3, [r3, #7]
 8008410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				    MSG_WAR(0x3AB2, "Received SDO Initiate block upload defined at index 0x1200 + ",
						CliServNbr);
				    MSG_WAR(0x3AB3, "Reading at index : ", index);
				    MSG_WAR(0x3AB4, "Reading at subIndex : ", subIndex);
				    /* Search if a SDO transfer have been yet initiated */
				    if (! err) {
 8008414:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008418:	2b00      	cmp	r3, #0
 800841a:	d11c      	bne.n	8008456 <proceedSDO+0x1a72>
					    MSG_ERR(0x1A93, "SDO error : Transmission yet started at line : ", line);
 800841c:	7efb      	ldrb	r3, [r7, #27]
 800841e:	9301      	str	r3, [sp, #4]
 8008420:	4bb6      	ldr	r3, [pc, #728]	; (80086fc <proceedSDO+0x1d18>)
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	f641 2393 	movw	r3, #6803	; 0x1a93
 8008428:	f240 5262 	movw	r2, #1378	; 0x562
 800842c:	49b4      	ldr	r1, [pc, #720]	; (8008700 <proceedSDO+0x1d1c>)
 800842e:	48b5      	ldr	r0, [pc, #724]	; (8008704 <proceedSDO+0x1d20>)
 8008430:	f004 f9e8 	bl	800c804 <iprintf>
					    MSG_WAR(0x3AB5, "Server Nbr = ", CliServNbr);
					    failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_LOCAL_CTRL_ERROR);
 8008434:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8008436:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800843a:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800843e:	4bb2      	ldr	r3, [pc, #712]	; (8008708 <proceedSDO+0x1d24>)
 8008440:	9301      	str	r3, [sp, #4]
 8008442:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	4603      	mov	r3, r0
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7fd ff88 	bl	8006360 <failedSDO>
					    return 0xFF;
 8008450:	23ff      	movs	r3, #255	; 0xff
 8008452:	f001 bc67 	b.w	8009d24 <proceedSDO+0x3340>
				    }
					/* Check block size */
					if(m->data[4] > 127){
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	7a1b      	ldrb	r3, [r3, #8]
 800845a:	b25b      	sxtb	r3, r3
 800845c:	2b00      	cmp	r3, #0
 800845e:	da1c      	bge.n	800849a <proceedSDO+0x1ab6>
					    MSG_ERR(0x1A96, "SDO error : invalid block size", 0);
 8008460:	2300      	movs	r3, #0
 8008462:	9301      	str	r3, [sp, #4]
 8008464:	4ba9      	ldr	r3, [pc, #676]	; (800870c <proceedSDO+0x1d28>)
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	f641 2396 	movw	r3, #6806	; 0x1a96
 800846c:	f240 5269 	movw	r2, #1385	; 0x569
 8008470:	49a3      	ldr	r1, [pc, #652]	; (8008700 <proceedSDO+0x1d1c>)
 8008472:	48a4      	ldr	r0, [pc, #656]	; (8008704 <proceedSDO+0x1d20>)
 8008474:	f004 f9c6 	bl	800c804 <iprintf>
					    failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_INVALID_BLOCK_SIZE);
 8008478:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800847a:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800847e:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8008482:	4ba3      	ldr	r3, [pc, #652]	; (8008710 <proceedSDO+0x1d2c>)
 8008484:	9301      	str	r3, [sp, #4]
 8008486:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	4603      	mov	r3, r0
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7fd ff66 	bl	8006360 <failedSDO>
					    return 0xFF;
 8008494:	23ff      	movs	r3, #255	; 0xff
 8008496:	f001 bc45 	b.w	8009d24 <proceedSDO+0x3340>
					}
				    /* No line on use. Great !*/
				    /* Try to open a new line.*/
				    err = getSDOfreeLine( d, whoami, &line );
 800849a:	f107 021b 	add.w	r2, r7, #27
 800849e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f7fe f8e7 	bl	8006678 <getSDOfreeLine>
 80084aa:	4603      	mov	r3, r0
 80084ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				    if (err) {
 80084b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d01c      	beq.n	80084f2 <proceedSDO+0x1b0e>
					    MSG_ERR(0x1A73, "SDO error : No line free, too many SDO in progress. Aborted.", 0);
 80084b8:	2300      	movs	r3, #0
 80084ba:	9301      	str	r3, [sp, #4]
 80084bc:	4b95      	ldr	r3, [pc, #596]	; (8008714 <proceedSDO+0x1d30>)
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	f641 2373 	movw	r3, #6771	; 0x1a73
 80084c4:	f240 5271 	movw	r2, #1393	; 0x571
 80084c8:	498d      	ldr	r1, [pc, #564]	; (8008700 <proceedSDO+0x1d1c>)
 80084ca:	488e      	ldr	r0, [pc, #568]	; (8008704 <proceedSDO+0x1d20>)
 80084cc:	f004 f99a 	bl	800c804 <iprintf>
					    failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_LOCAL_CTRL_ERROR);
 80084d0:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80084d2:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80084d6:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80084da:	4b8b      	ldr	r3, [pc, #556]	; (8008708 <proceedSDO+0x1d24>)
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	4603      	mov	r3, r0
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7fd ff3a 	bl	8006360 <failedSDO>
					    return 0xFF;
 80084ec:	23ff      	movs	r3, #255	; 0xff
 80084ee:	f001 bc19 	b.w	8009d24 <proceedSDO+0x3340>
				    }
				    initSDOline(d, line, CliServNbr, index, subIndex, SDO_BLOCK_UPLOAD_IN_PROGRESS);
 80084f2:	7ef9      	ldrb	r1, [r7, #27]
 80084f4:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80084f6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80084fa:	2305      	movs	r3, #5
 80084fc:	9301      	str	r3, [sp, #4]
 80084fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	4603      	mov	r3, r0
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7fd ffd0 	bl	80064ac <initSDOline>
                    d->transfers[line].peerCRCsupport = (UNS8)(((m->data[0])>>2) & 1);
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	791b      	ldrb	r3, [r3, #4]
 8008510:	089b      	lsrs	r3, r3, #2
 8008512:	b2db      	uxtb	r3, r3
 8008514:	7efa      	ldrb	r2, [r7, #27]
 8008516:	4610      	mov	r0, r2
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	b2d9      	uxtb	r1, r3
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	2354      	movs	r3, #84	; 0x54
 8008522:	fb03 f300 	mul.w	r3, r3, r0
 8008526:	4413      	add	r3, r2
 8008528:	335c      	adds	r3, #92	; 0x5c
 800852a:	460a      	mov	r2, r1
 800852c:	701a      	strb	r2, [r3, #0]
                    d->transfers[line].blksize = m->data[4];
 800852e:	7efb      	ldrb	r3, [r7, #27]
 8008530:	4618      	mov	r0, r3
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	7a19      	ldrb	r1, [r3, #8]
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	2354      	movs	r3, #84	; 0x54
 800853a:	fb03 f300 	mul.w	r3, r3, r0
 800853e:	4413      	add	r3, r2
 8008540:	335d      	adds	r3, #93	; 0x5d
 8008542:	460a      	mov	r2, r1
 8008544:	701a      	strb	r2, [r3, #0]
				    /* Transfer data from dictionary to the line structure. */
				    errorCode = objdictToSDOline(d, line);
 8008546:	7efb      	ldrb	r3, [r7, #27]
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f7fd fdd1 	bl	80060f2 <objdictToSDOline>
 8008550:	62b8      	str	r0, [r7, #40]	; 0x28
				    if (errorCode) {
 8008552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008554:	2b00      	cmp	r3, #0
 8008556:	d01c      	beq.n	8008592 <proceedSDO+0x1bae>
					    MSG_ERR(0x1A95, "SDO error : Unable to copy the data from object dictionary. Err code : ",
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	9301      	str	r3, [sp, #4]
 800855c:	4b6e      	ldr	r3, [pc, #440]	; (8008718 <proceedSDO+0x1d34>)
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	f641 2395 	movw	r3, #6805	; 0x1a95
 8008564:	f240 527c 	movw	r2, #1404	; 0x57c
 8008568:	4965      	ldr	r1, [pc, #404]	; (8008700 <proceedSDO+0x1d1c>)
 800856a:	4866      	ldr	r0, [pc, #408]	; (8008704 <proceedSDO+0x1d20>)
 800856c:	f004 f94a 	bl	800c804 <iprintf>
							errorCode);
					    failedSDO(d, CliServNbr, whoami, index, subIndex, errorCode);
 8008570:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8008572:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8008576:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800857a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857c:	9301      	str	r3, [sp, #4]
 800857e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	4603      	mov	r3, r0
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7fd feea 	bl	8006360 <failedSDO>
					    return 0xFF;
 800858c:	23ff      	movs	r3, #255	; 0xff
 800858e:	f001 bbc9 	b.w	8009d24 <proceedSDO+0x3340>
				    }
 				    /* Preparing the response.*/
				    getSDOlineRestBytes(d, line, &nbBytes);	/* get Nb bytes to transfer */
 8008592:	7efb      	ldrb	r3, [r7, #27]
 8008594:	f107 0214 	add.w	r2, r7, #20
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7fe f8f6 	bl	800678c <getSDOlineRestBytes>
                    d->transfers[line].objsize = nbBytes;
 80085a0:	7efb      	ldrb	r3, [r7, #27]
 80085a2:	4618      	mov	r0, r3
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	6879      	ldr	r1, [r7, #4]
 80085a8:	2354      	movs	r3, #84	; 0x54
 80085aa:	fb03 f300 	mul.w	r3, r3, r0
 80085ae:	440b      	add	r3, r1
 80085b0:	3360      	adds	r3, #96	; 0x60
 80085b2:	601a      	str	r2, [r3, #0]
                    data[0] = (6 << 5) | (1 << 1) | SDO_BSS_INITIATE_UPLOAD_RESPONSE;
 80085b4:	23c2      	movs	r3, #194	; 0xc2
 80085b6:	733b      	strb	r3, [r7, #12]
					data[1] = (UNS8)(index & 0xFF);        /* LSB */
 80085b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	737b      	strb	r3, [r7, #13]
					data[2] = (UNS8)((index >> 8) & 0xFF); /* MSB */
 80085be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085c0:	0a1b      	lsrs	r3, r3, #8
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	73bb      	strb	r3, [r7, #14]
					data[3] = subIndex;
 80085c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085cc:	73fb      	strb	r3, [r7, #15]
					data[4] = (UNS8) nbBytes;
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	743b      	strb	r3, [r7, #16]
					data[5] = (UNS8) (nbBytes >> 8);
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	0a1b      	lsrs	r3, r3, #8
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	747b      	strb	r3, [r7, #17]
					data[6] = (UNS8) (nbBytes >> 16);
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	0c1b      	lsrs	r3, r3, #16
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	74bb      	strb	r3, [r7, #18]
					data[7] = (UNS8) (nbBytes >> 24);
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	0e1b      	lsrs	r3, r3, #24
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	74fb      	strb	r3, [r7, #19]
					MSG_WAR(0x3A9A, "SDO. Sending normal block upload initiate response defined at index 0x1200 + ", nodeId);
					sendSDO(d, whoami, CliServNbr, data);
 80085ec:	f107 030c 	add.w	r3, r7, #12
 80085f0:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80085f4:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7fe f921 	bl	8006840 <sendSDO>
			    	MSG_ERR(0x1AAB, "SDO error block download : Received wrong subcommand from nodeId", nodeId);
    				failedSDO(d, CliServNbr, whoami, 0, 0, SDOABT_LOCAL_CTRL_ERROR);
	    			return 0xFF;
				}
			}      /* end if CLIENT */
			break;
 80085fe:	f001 bb8d 	b.w	8009d1c <proceedSDO+0x3338>
				else if (SubCommand == SDO_BCS_END_UPLOAD_REQUEST) {
 8008602:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008606:	2b01      	cmp	r3, #1
 8008608:	d13a      	bne.n	8008680 <proceedSDO+0x1c9c>
				    if (!err)
 800860a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800860e:	2b00      	cmp	r3, #0
 8008610:	d10f      	bne.n	8008632 <proceedSDO+0x1c4e>
					    err = (UNS8)(d->transfers[line].state != SDO_BLOCK_UPLOAD_IN_PROGRESS);
 8008612:	7efb      	ldrb	r3, [r7, #27]
 8008614:	4619      	mov	r1, r3
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	2354      	movs	r3, #84	; 0x54
 800861a:	fb03 f301 	mul.w	r3, r3, r1
 800861e:	4413      	add	r3, r2
 8008620:	332a      	adds	r3, #42	; 0x2a
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	2b05      	cmp	r3, #5
 8008626:	bf14      	ite	ne
 8008628:	2301      	movne	r3, #1
 800862a:	2300      	moveq	r3, #0
 800862c:	b2db      	uxtb	r3, r3
 800862e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				    if (err) {
 8008632:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008636:	2b00      	cmp	r3, #0
 8008638:	d01b      	beq.n	8008672 <proceedSDO+0x1c8e>
					    MSG_ERR(0x1AA1, "SDO error : Received block upload request for unstarted trans. index 0x1200 + ",
 800863a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	4b36      	ldr	r3, [pc, #216]	; (800871c <proceedSDO+0x1d38>)
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	f641 23a1 	movw	r3, #6817	; 0x1aa1
 8008648:	f240 5295 	movw	r2, #1429	; 0x595
 800864c:	492c      	ldr	r1, [pc, #176]	; (8008700 <proceedSDO+0x1d1c>)
 800864e:	482d      	ldr	r0, [pc, #180]	; (8008704 <proceedSDO+0x1d20>)
 8008650:	f004 f8d8 	bl	800c804 <iprintf>
					    failedSDO(d, CliServNbr, whoami, 0, 0, SDOABT_LOCAL_CTRL_ERROR);
 8008654:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8008658:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800865c:	4b2a      	ldr	r3, [pc, #168]	; (8008708 <proceedSDO+0x1d24>)
 800865e:	9301      	str	r3, [sp, #4]
 8008660:	2300      	movs	r3, #0
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	2300      	movs	r3, #0
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7fd fe7a 	bl	8006360 <failedSDO>
					    return 0xFF;
 800866c:	23ff      	movs	r3, #255	; 0xff
 800866e:	f001 bb59 	b.w	8009d24 <proceedSDO+0x3340>
					resetSDOline(d, line);
 8008672:	7efb      	ldrb	r3, [r7, #27]
 8008674:	4619      	mov	r1, r3
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7fd fede 	bl	8006438 <resetSDOline>
			break;
 800867c:	f001 bb4e 	b.w	8009d1c <proceedSDO+0x3338>
				else if ((SubCommand == SDO_BCS_UPLOAD_RESPONSE) || (SubCommand == SDO_BCS_START_UPLOAD)) {
 8008680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008684:	2b02      	cmp	r3, #2
 8008686:	d004      	beq.n	8008692 <proceedSDO+0x1cae>
 8008688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800868c:	2b03      	cmp	r3, #3
 800868e:	f041 8345 	bne.w	8009d1c <proceedSDO+0x3338>
				    if (!err)
 8008692:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10f      	bne.n	80086ba <proceedSDO+0x1cd6>
					    err = (UNS8)(d->transfers[line].state != SDO_BLOCK_UPLOAD_IN_PROGRESS);
 800869a:	7efb      	ldrb	r3, [r7, #27]
 800869c:	4619      	mov	r1, r3
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	2354      	movs	r3, #84	; 0x54
 80086a2:	fb03 f301 	mul.w	r3, r3, r1
 80086a6:	4413      	add	r3, r2
 80086a8:	332a      	adds	r3, #42	; 0x2a
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	2b05      	cmp	r3, #5
 80086ae:	bf14      	ite	ne
 80086b0:	2301      	movne	r3, #1
 80086b2:	2300      	moveq	r3, #0
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				    if (err) {
 80086ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d030      	beq.n	8008724 <proceedSDO+0x1d40>
					    MSG_ERR(0x1AA1, "SDO error : Received block upload response for unstarted trans. index 0x1200 + ",
 80086c2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80086c6:	9301      	str	r3, [sp, #4]
 80086c8:	4b15      	ldr	r3, [pc, #84]	; (8008720 <proceedSDO+0x1d3c>)
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	f641 23a1 	movw	r3, #6817	; 0x1aa1
 80086d0:	f240 52a2 	movw	r2, #1442	; 0x5a2
 80086d4:	490a      	ldr	r1, [pc, #40]	; (8008700 <proceedSDO+0x1d1c>)
 80086d6:	480b      	ldr	r0, [pc, #44]	; (8008704 <proceedSDO+0x1d20>)
 80086d8:	f004 f894 	bl	800c804 <iprintf>
					    failedSDO(d, CliServNbr, whoami, 0, 0, SDOABT_LOCAL_CTRL_ERROR);
 80086dc:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80086e0:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80086e4:	4b08      	ldr	r3, [pc, #32]	; (8008708 <proceedSDO+0x1d24>)
 80086e6:	9301      	str	r3, [sp, #4]
 80086e8:	2300      	movs	r3, #0
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	2300      	movs	r3, #0
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7fd fe36 	bl	8006360 <failedSDO>
					    return 0xFF;
 80086f4:	23ff      	movs	r3, #255	; 0xff
 80086f6:	f001 bb15 	b.w	8009d24 <proceedSDO+0x3340>
 80086fa:	bf00      	nop
 80086fc:	0800e1e0 	.word	0x0800e1e0
 8008700:	0800dec8 	.word	0x0800dec8
 8008704:	0800deec 	.word	0x0800deec
 8008708:	08000021 	.word	0x08000021
 800870c:	0800e33c 	.word	0x0800e33c
 8008710:	05040002 	.word	0x05040002
 8008714:	0800e1a0 	.word	0x0800e1a0
 8008718:	0800e210 	.word	0x0800e210
 800871c:	0800e35c 	.word	0x0800e35c
 8008720:	0800e3ac 	.word	0x0800e3ac
				    RestartSDO_TIMER(line);
 8008724:	7efb      	ldrb	r3, [r7, #27]
 8008726:	4619      	mov	r1, r3
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	2354      	movs	r3, #84	; 0x54
 800872c:	fb03 f301 	mul.w	r3, r3, r1
 8008730:	4413      	add	r3, r2
 8008732:	3374      	adds	r3, #116	; 0x74
 8008734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800873c:	d02d      	beq.n	800879a <proceedSDO+0x1db6>
 800873e:	7efb      	ldrb	r3, [r7, #27]
 8008740:	4619      	mov	r1, r3
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	2354      	movs	r3, #84	; 0x54
 8008746:	fb03 f301 	mul.w	r3, r3, r1
 800874a:	4413      	add	r3, r2
 800874c:	3374      	adds	r3, #116	; 0x74
 800874e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008752:	7efa      	ldrb	r2, [r7, #27]
 8008754:	4614      	mov	r4, r2
 8008756:	4618      	mov	r0, r3
 8008758:	f002 fae0 	bl	800ad1c <DelAlarm>
 800875c:	4603      	mov	r3, r0
 800875e:	4619      	mov	r1, r3
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	2354      	movs	r3, #84	; 0x54
 8008764:	fb03 f304 	mul.w	r3, r3, r4
 8008768:	4413      	add	r3, r2
 800876a:	3374      	adds	r3, #116	; 0x74
 800876c:	460a      	mov	r2, r1
 800876e:	801a      	strh	r2, [r3, #0]
 8008770:	7efb      	ldrb	r3, [r7, #27]
 8008772:	4619      	mov	r1, r3
 8008774:	7efb      	ldrb	r3, [r7, #27]
 8008776:	461c      	mov	r4, r3
 8008778:	2300      	movs	r3, #0
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	4bc0      	ldr	r3, [pc, #768]	; (8008a80 <proceedSDO+0x209c>)
 800877e:	4ac1      	ldr	r2, [pc, #772]	; (8008a84 <proceedSDO+0x20a0>)
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f002 fa4f 	bl	800ac24 <SetAlarm>
 8008786:	4603      	mov	r3, r0
 8008788:	4619      	mov	r1, r3
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	2354      	movs	r3, #84	; 0x54
 800878e:	fb03 f304 	mul.w	r3, r3, r4
 8008792:	4413      	add	r3, r2
 8008794:	3374      	adds	r3, #116	; 0x74
 8008796:	460a      	mov	r2, r1
 8008798:	801a      	strh	r2, [r3, #0]
				    index = d->transfers[line].index;
 800879a:	7efb      	ldrb	r3, [r7, #27]
 800879c:	4619      	mov	r1, r3
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	2354      	movs	r3, #84	; 0x54
 80087a2:	fb03 f301 	mul.w	r3, r3, r1
 80087a6:	4413      	add	r3, r2
 80087a8:	3330      	adds	r3, #48	; 0x30
 80087aa:	881b      	ldrh	r3, [r3, #0]
 80087ac:	84bb      	strh	r3, [r7, #36]	; 0x24
				    subIndex = d->transfers[line].subIndex;
 80087ae:	7efb      	ldrb	r3, [r7, #27]
 80087b0:	4619      	mov	r1, r3
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	2354      	movs	r3, #84	; 0x54
 80087b6:	fb03 f301 	mul.w	r3, r3, r1
 80087ba:	4413      	add	r3, r2
 80087bc:	3332      	adds	r3, #50	; 0x32
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                    if (SubCommand == SDO_BCS_UPLOAD_RESPONSE) {
 80087c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	f040 809b 	bne.w	8008904 <proceedSDO+0x1f20>
                        d->transfers[line].blksize = m->data[2];
 80087ce:	7efb      	ldrb	r3, [r7, #27]
 80087d0:	4618      	mov	r0, r3
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	7999      	ldrb	r1, [r3, #6]
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	2354      	movs	r3, #84	; 0x54
 80087da:	fb03 f300 	mul.w	r3, r3, r0
 80087de:	4413      	add	r3, r2
 80087e0:	335d      	adds	r3, #93	; 0x5d
 80087e2:	460a      	mov	r2, r1
 80087e4:	701a      	strb	r2, [r3, #0]
                        AckSeq = (m->data[1]) & 0x7f;
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	795b      	ldrb	r3, [r3, #5]
 80087ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                        getSDOlineRestBytes(d, line, &nbBytes);
 80087f2:	7efb      	ldrb	r3, [r7, #27]
 80087f4:	f107 0214 	add.w	r2, r7, #20
 80087f8:	4619      	mov	r1, r3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7fd ffc6 	bl	800678c <getSDOlineRestBytes>
                        if((nbBytes == 0) && (AckSeq == d->transfers[line].seqno)){
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d136      	bne.n	8008874 <proceedSDO+0x1e90>
 8008806:	7efb      	ldrb	r3, [r7, #27]
 8008808:	4619      	mov	r1, r3
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	2354      	movs	r3, #84	; 0x54
 800880e:	fb03 f301 	mul.w	r3, r3, r1
 8008812:	4413      	add	r3, r2
 8008814:	3368      	adds	r3, #104	; 0x68
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800881c:	429a      	cmp	r2, r3
 800881e:	d129      	bne.n	8008874 <proceedSDO+0x1e90>
                            data[0] = (UNS8)((6 << 5) | ((d->transfers[line].endfield) << 2) | SDO_BSS_END_UPLOAD_RESPONSE);
 8008820:	7efb      	ldrb	r3, [r7, #27]
 8008822:	4619      	mov	r1, r3
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	2354      	movs	r3, #84	; 0x54
 8008828:	fb03 f301 	mul.w	r3, r3, r1
 800882c:	4413      	add	r3, r2
 800882e:	3369      	adds	r3, #105	; 0x69
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	b25b      	sxtb	r3, r3
 8008836:	f063 033e 	orn	r3, r3, #62	; 0x3e
 800883a:	b25b      	sxtb	r3, r3
 800883c:	b2db      	uxtb	r3, r3
 800883e:	733b      	strb	r3, [r7, #12]
                            for (i = 1 ; i < 8 ; i++)
 8008840:	2301      	movs	r3, #1
 8008842:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008844:	e008      	b.n	8008858 <proceedSDO+0x1e74>
						        data[i] = 0;
 8008846:	f107 020c 	add.w	r2, r7, #12
 800884a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800884c:	4413      	add	r3, r2
 800884e:	2200      	movs	r2, #0
 8008850:	701a      	strb	r2, [r3, #0]
                            for (i = 1 ; i < 8 ; i++)
 8008852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008854:	3301      	adds	r3, #1
 8008856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885a:	2b07      	cmp	r3, #7
 800885c:	d9f3      	bls.n	8008846 <proceedSDO+0x1e62>
					        sendSDO(d, whoami, CliServNbr, data);
 800885e:	f107 030c 	add.w	r3, r7, #12
 8008862:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8008866:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f7fd ffe8 	bl	8006840 <sendSDO>
                            break;
 8008870:	f001 ba57 	b.w	8009d22 <proceedSDO+0x333e>
                            d->transfers[line].offset = d->transfers[line].lastblockoffset + (7 * AckSeq);
 8008874:	7efb      	ldrb	r3, [r7, #27]
 8008876:	4619      	mov	r1, r3
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	2354      	movs	r3, #84	; 0x54
 800887c:	fb03 f301 	mul.w	r3, r3, r1
 8008880:	4413      	add	r3, r2
 8008882:	3364      	adds	r3, #100	; 0x64
 8008884:	6819      	ldr	r1, [r3, #0]
 8008886:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800888a:	4613      	mov	r3, r2
 800888c:	00db      	lsls	r3, r3, #3
 800888e:	1a9b      	subs	r3, r3, r2
 8008890:	7efa      	ldrb	r2, [r7, #27]
 8008892:	4610      	mov	r0, r2
 8008894:	18ca      	adds	r2, r1, r3
 8008896:	6879      	ldr	r1, [r7, #4]
 8008898:	2354      	movs	r3, #84	; 0x54
 800889a:	fb03 f300 	mul.w	r3, r3, r0
 800889e:	440b      	add	r3, r1
 80088a0:	3338      	adds	r3, #56	; 0x38
 80088a2:	601a      	str	r2, [r3, #0]
                        if(d->transfers[line].offset > d->transfers[line].count) { /* Bad AckSeq reveived (too high) */
 80088a4:	7efb      	ldrb	r3, [r7, #27]
 80088a6:	4619      	mov	r1, r3
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	2354      	movs	r3, #84	; 0x54
 80088ac:	fb03 f301 	mul.w	r3, r3, r1
 80088b0:	4413      	add	r3, r2
 80088b2:	3338      	adds	r3, #56	; 0x38
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	7efb      	ldrb	r3, [r7, #27]
 80088b8:	4618      	mov	r0, r3
 80088ba:	6879      	ldr	r1, [r7, #4]
 80088bc:	2354      	movs	r3, #84	; 0x54
 80088be:	fb03 f300 	mul.w	r3, r3, r0
 80088c2:	440b      	add	r3, r1
 80088c4:	3334      	adds	r3, #52	; 0x34
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d91b      	bls.n	8008904 <proceedSDO+0x1f20>
					        MSG_ERR(0x1AA1, "SDO error : Received upload response with bad ackseq index 0x1200 + ",
 80088cc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80088d0:	9301      	str	r3, [sp, #4]
 80088d2:	4b6d      	ldr	r3, [pc, #436]	; (8008a88 <proceedSDO+0x20a4>)
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	f641 23a1 	movw	r3, #6817	; 0x1aa1
 80088da:	f240 52bd 	movw	r2, #1469	; 0x5bd
 80088de:	496b      	ldr	r1, [pc, #428]	; (8008a8c <proceedSDO+0x20a8>)
 80088e0:	486b      	ldr	r0, [pc, #428]	; (8008a90 <proceedSDO+0x20ac>)
 80088e2:	f003 ff8f 	bl	800c804 <iprintf>
					        failedSDO(d, CliServNbr, whoami, 0, 0, SDOABT_LOCAL_CTRL_ERROR);
 80088e6:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80088ea:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80088ee:	4b69      	ldr	r3, [pc, #420]	; (8008a94 <proceedSDO+0x20b0>)
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	2300      	movs	r3, #0
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	2300      	movs	r3, #0
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7fd fd31 	bl	8006360 <failedSDO>
					        return 0xFF;
 80088fe:	23ff      	movs	r3, #255	; 0xff
 8008900:	f001 ba10 	b.w	8009d24 <proceedSDO+0x3340>
                    d->transfers[line].lastblockoffset = d->transfers[line].offset;
 8008904:	7efb      	ldrb	r3, [r7, #27]
 8008906:	4619      	mov	r1, r3
 8008908:	7efb      	ldrb	r3, [r7, #27]
 800890a:	4618      	mov	r0, r3
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	2354      	movs	r3, #84	; 0x54
 8008910:	fb03 f301 	mul.w	r3, r3, r1
 8008914:	4413      	add	r3, r2
 8008916:	3338      	adds	r3, #56	; 0x38
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	2354      	movs	r3, #84	; 0x54
 800891e:	fb03 f300 	mul.w	r3, r3, r0
 8008922:	440b      	add	r3, r1
 8008924:	3364      	adds	r3, #100	; 0x64
 8008926:	601a      	str	r2, [r3, #0]
                    for(SeqNo = 1 ; SeqNo <= d->transfers[line].blksize ; SeqNo++) {
 8008928:	2301      	movs	r3, #1
 800892a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800892e:	e097      	b.n	8008a60 <proceedSDO+0x207c>
                        d->transfers[line].seqno = SeqNo;
 8008930:	7efb      	ldrb	r3, [r7, #27]
 8008932:	4619      	mov	r1, r3
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	2354      	movs	r3, #84	; 0x54
 8008938:	fb03 f301 	mul.w	r3, r3, r1
 800893c:	4413      	add	r3, r2
 800893e:	3368      	adds	r3, #104	; 0x68
 8008940:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008944:	701a      	strb	r2, [r3, #0]
				        getSDOlineRestBytes(d, line, &nbBytes);
 8008946:	7efb      	ldrb	r3, [r7, #27]
 8008948:	f107 0214 	add.w	r2, r7, #20
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7fd ff1c 	bl	800678c <getSDOlineRestBytes>
                        if (nbBytes > 7) {
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	2b07      	cmp	r3, #7
 8008958:	d92d      	bls.n	80089b6 <proceedSDO+0x1fd2>
 					        data[0] = SeqNo;
 800895a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800895e:	733b      	strb	r3, [r7, #12]
					        err = lineToSDO(d, line, 7, data + 1);
 8008960:	7ef9      	ldrb	r1, [r7, #27]
 8008962:	f107 030c 	add.w	r3, r7, #12
 8008966:	3301      	adds	r3, #1
 8008968:	2207      	movs	r2, #7
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7fd fc0e 	bl	800618c <lineToSDO>
 8008970:	4603      	mov	r3, r0
 8008972:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					        if (err) {
 8008976:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800897a:	2b00      	cmp	r3, #0
 800897c:	d011      	beq.n	80089a2 <proceedSDO+0x1fbe>
						        failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_GENERAL_ERROR);
 800897e:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8008980:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8008984:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8008988:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800898c:	9301      	str	r3, [sp, #4]
 800898e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	4603      	mov	r3, r0
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7fd fce2 	bl	8006360 <failedSDO>
						        return 0xFF;
 800899c:	23ff      	movs	r3, #255	; 0xff
 800899e:	f001 b9c1 	b.w	8009d24 <proceedSDO+0x3340>
					        sendSDO(d, whoami, CliServNbr, data);
 80089a2:	f107 030c 	add.w	r3, r7, #12
 80089a6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80089aa:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7fd ff46 	bl	8006840 <sendSDO>
 80089b4:	e04f      	b.n	8008a56 <proceedSDO+0x2072>
					        data[0] = 0x80 | SeqNo;
 80089b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	733b      	strb	r3, [r7, #12]
					        err = lineToSDO(d, line, nbBytes, data + 1);
 80089c2:	7ef9      	ldrb	r1, [r7, #27]
 80089c4:	697a      	ldr	r2, [r7, #20]
 80089c6:	f107 030c 	add.w	r3, r7, #12
 80089ca:	3301      	adds	r3, #1
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7fd fbdd 	bl	800618c <lineToSDO>
 80089d2:	4603      	mov	r3, r0
 80089d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					        if (err) {
 80089d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d011      	beq.n	8008a04 <proceedSDO+0x2020>
						        failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_GENERAL_ERROR);
 80089e0:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80089e2:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80089e6:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80089ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80089ee:	9301      	str	r3, [sp, #4]
 80089f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	4603      	mov	r3, r0
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f7fd fcb1 	bl	8006360 <failedSDO>
						        return 0xFF;
 80089fe:	23ff      	movs	r3, #255	; 0xff
 8008a00:	f001 b990 	b.w	8009d24 <proceedSDO+0x3340>
					        for (i = nbBytes + 1 ; i < 8 ; i++)
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	3301      	adds	r3, #1
 8008a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a0a:	e008      	b.n	8008a1e <proceedSDO+0x203a>
						        data[i] = 0;
 8008a0c:	f107 020c 	add.w	r2, r7, #12
 8008a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a12:	4413      	add	r3, r2
 8008a14:	2200      	movs	r2, #0
 8008a16:	701a      	strb	r2, [r3, #0]
					        for (i = nbBytes + 1 ; i < 8 ; i++)
 8008a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a20:	2b07      	cmp	r3, #7
 8008a22:	d9f3      	bls.n	8008a0c <proceedSDO+0x2028>
					        sendSDO(d, whoami, CliServNbr, data);
 8008a24:	f107 030c 	add.w	r3, r7, #12
 8008a28:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8008a2c:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7fd ff05 	bl	8006840 <sendSDO>
                            d->transfers[line].endfield = (UNS8) (7 - nbBytes);
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	7efa      	ldrb	r2, [r7, #27]
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	f1c3 0307 	rsb	r3, r3, #7
 8008a42:	b2d9      	uxtb	r1, r3
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	2354      	movs	r3, #84	; 0x54
 8008a48:	fb03 f300 	mul.w	r3, r3, r0
 8008a4c:	4413      	add	r3, r2
 8008a4e:	3369      	adds	r3, #105	; 0x69
 8008a50:	460a      	mov	r2, r1
 8008a52:	701a      	strb	r2, [r3, #0]
                            break;
 8008a54:	e2df      	b.n	8009016 <proceedSDO+0x2632>
                    for(SeqNo = 1 ; SeqNo <= d->transfers[line].blksize ; SeqNo++) {
 8008a56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a60:	7efb      	ldrb	r3, [r7, #27]
 8008a62:	4619      	mov	r1, r3
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	2354      	movs	r3, #84	; 0x54
 8008a68:	fb03 f301 	mul.w	r3, r3, r1
 8008a6c:	4413      	add	r3, r2
 8008a6e:	335d      	adds	r3, #93	; 0x5d
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008a76:	429a      	cmp	r2, r3
 8008a78:	f67f af5a 	bls.w	8008930 <proceedSDO+0x1f4c>
			break;
 8008a7c:	f001 b94e 	b.w	8009d1c <proceedSDO+0x3338>
 8008a80:	000493e0 	.word	0x000493e0
 8008a84:	08005ead 	.word	0x08005ead
 8008a88:	0800e3fc 	.word	0x0800e3fc
 8008a8c:	0800dec8 	.word	0x0800dec8
 8008a90:	0800deec 	.word	0x0800deec
 8008a94:	08000021 	.word	0x08000021
                if ((SubCommand == SDO_BSS_INITIATE_DOWNLOAD_RESPONSE) || (SubCommand == SDO_BSS_DOWNLOAD_RESPONSE)) {
 8008a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d004      	beq.n	8008aaa <proceedSDO+0x20c6>
 8008aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	f040 8257 	bne.w	8008f58 <proceedSDO+0x2574>
                    if (!err)
 8008aaa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10f      	bne.n	8008ad2 <proceedSDO+0x20ee>
                        err = (UNS8)(d->transfers[line].state != SDO_BLOCK_DOWNLOAD_IN_PROGRESS);
 8008ab2:	7efb      	ldrb	r3, [r7, #27]
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	2354      	movs	r3, #84	; 0x54
 8008aba:	fb03 f301 	mul.w	r3, r3, r1
 8008abe:	4413      	add	r3, r2
 8008ac0:	332a      	adds	r3, #42	; 0x2a
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	2b04      	cmp	r3, #4
 8008ac6:	bf14      	ite	ne
 8008ac8:	2301      	movne	r3, #1
 8008aca:	2300      	moveq	r3, #0
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (err) {
 8008ad2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d01b      	beq.n	8008b12 <proceedSDO+0x212e>
                        MSG_ERR(0x1AAA, "SDO error : Received response for unknown block download request from node id", nodeId);
 8008ada:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8008ade:	9301      	str	r3, [sp, #4]
 8008ae0:	4bb5      	ldr	r3, [pc, #724]	; (8008db8 <proceedSDO+0x23d4>)
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	f641 23aa 	movw	r3, #6826	; 0x1aaa
 8008ae8:	f240 52ec 	movw	r2, #1516	; 0x5ec
 8008aec:	49b3      	ldr	r1, [pc, #716]	; (8008dbc <proceedSDO+0x23d8>)
 8008aee:	48b4      	ldr	r0, [pc, #720]	; (8008dc0 <proceedSDO+0x23dc>)
 8008af0:	f003 fe88 	bl	800c804 <iprintf>
                        failedSDO(d, CliServNbr, whoami, 0, 0, SDOABT_LOCAL_CTRL_ERROR);
 8008af4:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8008af8:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8008afc:	4bb1      	ldr	r3, [pc, #708]	; (8008dc4 <proceedSDO+0x23e0>)
 8008afe:	9301      	str	r3, [sp, #4]
 8008b00:	2300      	movs	r3, #0
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	2300      	movs	r3, #0
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f7fd fc2a 	bl	8006360 <failedSDO>
                        return 0xFF;
 8008b0c:	23ff      	movs	r3, #255	; 0xff
 8008b0e:	f001 b909 	b.w	8009d24 <proceedSDO+0x3340>
                    index = d->transfers[line].index;
 8008b12:	7efb      	ldrb	r3, [r7, #27]
 8008b14:	4619      	mov	r1, r3
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	2354      	movs	r3, #84	; 0x54
 8008b1a:	fb03 f301 	mul.w	r3, r3, r1
 8008b1e:	4413      	add	r3, r2
 8008b20:	3330      	adds	r3, #48	; 0x30
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	84bb      	strh	r3, [r7, #36]	; 0x24
                    subIndex = d->transfers[line].subIndex;
 8008b26:	7efb      	ldrb	r3, [r7, #27]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	2354      	movs	r3, #84	; 0x54
 8008b2e:	fb03 f301 	mul.w	r3, r3, r1
 8008b32:	4413      	add	r3, r2
 8008b34:	3332      	adds	r3, #50	; 0x32
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                    RestartSDO_TIMER(line)
 8008b3c:	7efb      	ldrb	r3, [r7, #27]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	2354      	movs	r3, #84	; 0x54
 8008b44:	fb03 f301 	mul.w	r3, r3, r1
 8008b48:	4413      	add	r3, r2
 8008b4a:	3374      	adds	r3, #116	; 0x74
 8008b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b54:	d02d      	beq.n	8008bb2 <proceedSDO+0x21ce>
 8008b56:	7efb      	ldrb	r3, [r7, #27]
 8008b58:	4619      	mov	r1, r3
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	2354      	movs	r3, #84	; 0x54
 8008b5e:	fb03 f301 	mul.w	r3, r3, r1
 8008b62:	4413      	add	r3, r2
 8008b64:	3374      	adds	r3, #116	; 0x74
 8008b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b6a:	7efa      	ldrb	r2, [r7, #27]
 8008b6c:	4614      	mov	r4, r2
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f002 f8d4 	bl	800ad1c <DelAlarm>
 8008b74:	4603      	mov	r3, r0
 8008b76:	4619      	mov	r1, r3
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	2354      	movs	r3, #84	; 0x54
 8008b7c:	fb03 f304 	mul.w	r3, r3, r4
 8008b80:	4413      	add	r3, r2
 8008b82:	3374      	adds	r3, #116	; 0x74
 8008b84:	460a      	mov	r2, r1
 8008b86:	801a      	strh	r2, [r3, #0]
 8008b88:	7efb      	ldrb	r3, [r7, #27]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	7efb      	ldrb	r3, [r7, #27]
 8008b8e:	461c      	mov	r4, r3
 8008b90:	2300      	movs	r3, #0
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	4b8c      	ldr	r3, [pc, #560]	; (8008dc8 <proceedSDO+0x23e4>)
 8008b96:	4a8d      	ldr	r2, [pc, #564]	; (8008dcc <proceedSDO+0x23e8>)
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f002 f843 	bl	800ac24 <SetAlarm>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	2354      	movs	r3, #84	; 0x54
 8008ba6:	fb03 f304 	mul.w	r3, r3, r4
 8008baa:	4413      	add	r3, r2
 8008bac:	3374      	adds	r3, #116	; 0x74
 8008bae:	460a      	mov	r2, r1
 8008bb0:	801a      	strh	r2, [r3, #0]
                    if (SubCommand == SDO_BSS_INITIATE_DOWNLOAD_RESPONSE) {
 8008bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d13f      	bne.n	8008c3a <proceedSDO+0x2256>
						if(m->data[4] > 127){
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	7a1b      	ldrb	r3, [r3, #8]
 8008bbe:	b25b      	sxtb	r3, r3
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	da1c      	bge.n	8008bfe <proceedSDO+0x221a>
							MSG_ERR(0x1A98, "SDO error : invalid block size", 0);
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	9301      	str	r3, [sp, #4]
 8008bc8:	4b81      	ldr	r3, [pc, #516]	; (8008dd0 <proceedSDO+0x23ec>)
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	f641 2398 	movw	r3, #6808	; 0x1a98
 8008bd0:	f240 52f6 	movw	r2, #1526	; 0x5f6
 8008bd4:	4979      	ldr	r1, [pc, #484]	; (8008dbc <proceedSDO+0x23d8>)
 8008bd6:	487a      	ldr	r0, [pc, #488]	; (8008dc0 <proceedSDO+0x23dc>)
 8008bd8:	f003 fe14 	bl	800c804 <iprintf>
					    	failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_INVALID_BLOCK_SIZE);
 8008bdc:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8008bde:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8008be2:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8008be6:	4b7b      	ldr	r3, [pc, #492]	; (8008dd4 <proceedSDO+0x23f0>)
 8008be8:	9301      	str	r3, [sp, #4]
 8008bea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7fd fbb4 	bl	8006360 <failedSDO>
					    	return 0xFF;
 8008bf8:	23ff      	movs	r3, #255	; 0xff
 8008bfa:	f001 b893 	b.w	8009d24 <proceedSDO+0x3340>
                        d->transfers[line].peerCRCsupport = ((m->data[0])>>2) & 1;
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	791b      	ldrb	r3, [r3, #4]
 8008c02:	089b      	lsrs	r3, r3, #2
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	7efa      	ldrb	r2, [r7, #27]
 8008c08:	4610      	mov	r0, r2
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	b2d9      	uxtb	r1, r3
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	2354      	movs	r3, #84	; 0x54
 8008c14:	fb03 f300 	mul.w	r3, r3, r0
 8008c18:	4413      	add	r3, r2
 8008c1a:	335c      	adds	r3, #92	; 0x5c
 8008c1c:	460a      	mov	r2, r1
 8008c1e:	701a      	strb	r2, [r3, #0]
                        d->transfers[line].blksize = m->data[4];
 8008c20:	7efb      	ldrb	r3, [r7, #27]
 8008c22:	4618      	mov	r0, r3
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	7a19      	ldrb	r1, [r3, #8]
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	2354      	movs	r3, #84	; 0x54
 8008c2c:	fb03 f300 	mul.w	r3, r3, r0
 8008c30:	4413      	add	r3, r2
 8008c32:	335d      	adds	r3, #93	; 0x5d
 8008c34:	460a      	mov	r2, r1
 8008c36:	701a      	strb	r2, [r3, #0]
 8008c38:	e0d0      	b.n	8008ddc <proceedSDO+0x23f8>
 						if(m->data[2] > 127){
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	799b      	ldrb	r3, [r3, #6]
 8008c3e:	b25b      	sxtb	r3, r3
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	da1c      	bge.n	8008c7e <proceedSDO+0x229a>
							MSG_ERR(0x1A99, "SDO error : invalid block size", 0);
 8008c44:	2300      	movs	r3, #0
 8008c46:	9301      	str	r3, [sp, #4]
 8008c48:	4b61      	ldr	r3, [pc, #388]	; (8008dd0 <proceedSDO+0x23ec>)
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	f641 2399 	movw	r3, #6809	; 0x1a99
 8008c50:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008c54:	4959      	ldr	r1, [pc, #356]	; (8008dbc <proceedSDO+0x23d8>)
 8008c56:	485a      	ldr	r0, [pc, #360]	; (8008dc0 <proceedSDO+0x23dc>)
 8008c58:	f003 fdd4 	bl	800c804 <iprintf>
					    	failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_INVALID_BLOCK_SIZE);
 8008c5c:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8008c5e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8008c62:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8008c66:	4b5b      	ldr	r3, [pc, #364]	; (8008dd4 <proceedSDO+0x23f0>)
 8008c68:	9301      	str	r3, [sp, #4]
 8008c6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	4603      	mov	r3, r0
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7fd fb74 	bl	8006360 <failedSDO>
					    	return 0xFF;
 8008c78:	23ff      	movs	r3, #255	; 0xff
 8008c7a:	f001 b853 	b.w	8009d24 <proceedSDO+0x3340>
                   		d->transfers[line].blksize = m->data[2];
 8008c7e:	7efb      	ldrb	r3, [r7, #27]
 8008c80:	4618      	mov	r0, r3
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	7999      	ldrb	r1, [r3, #6]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	2354      	movs	r3, #84	; 0x54
 8008c8a:	fb03 f300 	mul.w	r3, r3, r0
 8008c8e:	4413      	add	r3, r2
 8008c90:	335d      	adds	r3, #93	; 0x5d
 8008c92:	460a      	mov	r2, r1
 8008c94:	701a      	strb	r2, [r3, #0]
                        AckSeq = (m->data[1]) & 0x7f;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	795b      	ldrb	r3, [r3, #5]
 8008c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                        getSDOlineRestBytes(d, line, &nbBytes);
 8008ca2:	7efb      	ldrb	r3, [r7, #27]
 8008ca4:	f107 0214 	add.w	r2, r7, #20
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7fd fd6e 	bl	800678c <getSDOlineRestBytes>
                        if((nbBytes == 0) && (AckSeq == d->transfers[line].seqno)){
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d136      	bne.n	8008d24 <proceedSDO+0x2340>
 8008cb6:	7efb      	ldrb	r3, [r7, #27]
 8008cb8:	4619      	mov	r1, r3
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	2354      	movs	r3, #84	; 0x54
 8008cbe:	fb03 f301 	mul.w	r3, r3, r1
 8008cc2:	4413      	add	r3, r2
 8008cc4:	3368      	adds	r3, #104	; 0x68
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d129      	bne.n	8008d24 <proceedSDO+0x2340>
                            data[0] = (UNS8)((6 << 5) | ((d->transfers[line].endfield) << 2) | SDO_BCS_END_DOWNLOAD_REQUEST);
 8008cd0:	7efb      	ldrb	r3, [r7, #27]
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	2354      	movs	r3, #84	; 0x54
 8008cd8:	fb03 f301 	mul.w	r3, r3, r1
 8008cdc:	4413      	add	r3, r2
 8008cde:	3369      	adds	r3, #105	; 0x69
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	b25b      	sxtb	r3, r3
 8008ce6:	f063 033e 	orn	r3, r3, #62	; 0x3e
 8008cea:	b25b      	sxtb	r3, r3
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	733b      	strb	r3, [r7, #12]
                            for (i = 1 ; i < 8 ; i++)
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cf4:	e008      	b.n	8008d08 <proceedSDO+0x2324>
						        data[i] = 0;
 8008cf6:	f107 020c 	add.w	r2, r7, #12
 8008cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfc:	4413      	add	r3, r2
 8008cfe:	2200      	movs	r2, #0
 8008d00:	701a      	strb	r2, [r3, #0]
                            for (i = 1 ; i < 8 ; i++)
 8008d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d04:	3301      	adds	r3, #1
 8008d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d0a:	2b07      	cmp	r3, #7
 8008d0c:	d9f3      	bls.n	8008cf6 <proceedSDO+0x2312>
					        sendSDO(d, whoami, CliServNbr, data);
 8008d0e:	f107 030c 	add.w	r3, r7, #12
 8008d12:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8008d16:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7fd fd90 	bl	8006840 <sendSDO>
                            break;
 8008d20:	f000 bfff 	b.w	8009d22 <proceedSDO+0x333e>
                            d->transfers[line].offset = d->transfers[line].lastblockoffset + (7 * AckSeq);
 8008d24:	7efb      	ldrb	r3, [r7, #27]
 8008d26:	4619      	mov	r1, r3
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	2354      	movs	r3, #84	; 0x54
 8008d2c:	fb03 f301 	mul.w	r3, r3, r1
 8008d30:	4413      	add	r3, r2
 8008d32:	3364      	adds	r3, #100	; 0x64
 8008d34:	6819      	ldr	r1, [r3, #0]
 8008d36:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	00db      	lsls	r3, r3, #3
 8008d3e:	1a9b      	subs	r3, r3, r2
 8008d40:	7efa      	ldrb	r2, [r7, #27]
 8008d42:	4610      	mov	r0, r2
 8008d44:	18ca      	adds	r2, r1, r3
 8008d46:	6879      	ldr	r1, [r7, #4]
 8008d48:	2354      	movs	r3, #84	; 0x54
 8008d4a:	fb03 f300 	mul.w	r3, r3, r0
 8008d4e:	440b      	add	r3, r1
 8008d50:	3338      	adds	r3, #56	; 0x38
 8008d52:	601a      	str	r2, [r3, #0]
                        if(d->transfers[line].offset > d->transfers[line].count) { /* Bad AckSeq reveived (too high) */
 8008d54:	7efb      	ldrb	r3, [r7, #27]
 8008d56:	4619      	mov	r1, r3
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	2354      	movs	r3, #84	; 0x54
 8008d5c:	fb03 f301 	mul.w	r3, r3, r1
 8008d60:	4413      	add	r3, r2
 8008d62:	3338      	adds	r3, #56	; 0x38
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	7efb      	ldrb	r3, [r7, #27]
 8008d68:	4618      	mov	r0, r3
 8008d6a:	6879      	ldr	r1, [r7, #4]
 8008d6c:	2354      	movs	r3, #84	; 0x54
 8008d6e:	fb03 f300 	mul.w	r3, r3, r0
 8008d72:	440b      	add	r3, r1
 8008d74:	3334      	adds	r3, #52	; 0x34
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d92f      	bls.n	8008ddc <proceedSDO+0x23f8>
					        MSG_ERR(0x1AA1, "SDO error : Received upload segment with bad ackseq index 0x1200 + ",
 8008d7c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	4b15      	ldr	r3, [pc, #84]	; (8008dd8 <proceedSDO+0x23f4>)
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	f641 23a1 	movw	r3, #6817	; 0x1aa1
 8008d8a:	f240 6213 	movw	r2, #1555	; 0x613
 8008d8e:	490b      	ldr	r1, [pc, #44]	; (8008dbc <proceedSDO+0x23d8>)
 8008d90:	480b      	ldr	r0, [pc, #44]	; (8008dc0 <proceedSDO+0x23dc>)
 8008d92:	f003 fd37 	bl	800c804 <iprintf>
					        failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_LOCAL_CTRL_ERROR);
 8008d96:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8008d98:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8008d9c:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8008da0:	4b08      	ldr	r3, [pc, #32]	; (8008dc4 <proceedSDO+0x23e0>)
 8008da2:	9301      	str	r3, [sp, #4]
 8008da4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	4603      	mov	r3, r0
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7fd fad7 	bl	8006360 <failedSDO>
					        return 0xFF;
 8008db2:	23ff      	movs	r3, #255	; 0xff
 8008db4:	f000 bfb6 	b.w	8009d24 <proceedSDO+0x3340>
 8008db8:	0800e444 	.word	0x0800e444
 8008dbc:	0800dec8 	.word	0x0800dec8
 8008dc0:	0800deec 	.word	0x0800deec
 8008dc4:	08000021 	.word	0x08000021
 8008dc8:	000493e0 	.word	0x000493e0
 8008dcc:	08005ead 	.word	0x08005ead
 8008dd0:	0800e33c 	.word	0x0800e33c
 8008dd4:	05040002 	.word	0x05040002
 8008dd8:	0800e494 	.word	0x0800e494
                 	d->transfers[line].lastblockoffset = d->transfers[line].offset;
 8008ddc:	7efb      	ldrb	r3, [r7, #27]
 8008dde:	4619      	mov	r1, r3
 8008de0:	7efb      	ldrb	r3, [r7, #27]
 8008de2:	4618      	mov	r0, r3
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	2354      	movs	r3, #84	; 0x54
 8008de8:	fb03 f301 	mul.w	r3, r3, r1
 8008dec:	4413      	add	r3, r2
 8008dee:	3338      	adds	r3, #56	; 0x38
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	6879      	ldr	r1, [r7, #4]
 8008df4:	2354      	movs	r3, #84	; 0x54
 8008df6:	fb03 f300 	mul.w	r3, r3, r0
 8008dfa:	440b      	add	r3, r1
 8008dfc:	3364      	adds	r3, #100	; 0x64
 8008dfe:	601a      	str	r2, [r3, #0]
                	for(SeqNo = 1 ; SeqNo <= d->transfers[line].blksize ; SeqNo++) {
 8008e00:	2301      	movs	r3, #1
 8008e02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008e06:	e098      	b.n	8008f3a <proceedSDO+0x2556>
                        d->transfers[line].seqno = SeqNo;
 8008e08:	7efb      	ldrb	r3, [r7, #27]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	2354      	movs	r3, #84	; 0x54
 8008e10:	fb03 f301 	mul.w	r3, r3, r1
 8008e14:	4413      	add	r3, r2
 8008e16:	3368      	adds	r3, #104	; 0x68
 8008e18:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008e1c:	701a      	strb	r2, [r3, #0]
				        getSDOlineRestBytes(d, line, &nbBytes);
 8008e1e:	7efb      	ldrb	r3, [r7, #27]
 8008e20:	f107 0214 	add.w	r2, r7, #20
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7fd fcb0 	bl	800678c <getSDOlineRestBytes>
                        if (nbBytes > 7) {
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	2b07      	cmp	r3, #7
 8008e30:	d92d      	bls.n	8008e8e <proceedSDO+0x24aa>
 					        data[0] = SeqNo;
 8008e32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e36:	733b      	strb	r3, [r7, #12]
					        err = lineToSDO(d, line, 7, data + 1);
 8008e38:	7ef9      	ldrb	r1, [r7, #27]
 8008e3a:	f107 030c 	add.w	r3, r7, #12
 8008e3e:	3301      	adds	r3, #1
 8008e40:	2207      	movs	r2, #7
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7fd f9a2 	bl	800618c <lineToSDO>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					        if (err) {
 8008e4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d011      	beq.n	8008e7a <proceedSDO+0x2496>
						        failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_GENERAL_ERROR);
 8008e56:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8008e58:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8008e5c:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8008e60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e64:	9301      	str	r3, [sp, #4]
 8008e66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7fd fa76 	bl	8006360 <failedSDO>
						        return 0xFF;
 8008e74:	23ff      	movs	r3, #255	; 0xff
 8008e76:	f000 bf55 	b.w	8009d24 <proceedSDO+0x3340>
					        sendSDO(d, whoami, CliServNbr, data);
 8008e7a:	f107 030c 	add.w	r3, r7, #12
 8008e7e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8008e82:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7fd fcda 	bl	8006840 <sendSDO>
 8008e8c:	e050      	b.n	8008f30 <proceedSDO+0x254c>
					        data[0] = 0x80 | SeqNo;
 8008e8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	733b      	strb	r3, [r7, #12]
					        err = lineToSDO(d, line, nbBytes, data + 1);
 8008e9a:	7ef9      	ldrb	r1, [r7, #27]
 8008e9c:	697a      	ldr	r2, [r7, #20]
 8008e9e:	f107 030c 	add.w	r3, r7, #12
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f7fd f971 	bl	800618c <lineToSDO>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					        if (err) {
 8008eb0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d011      	beq.n	8008edc <proceedSDO+0x24f8>
						        failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_GENERAL_ERROR);
 8008eb8:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8008eba:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8008ebe:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8008ec2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ec6:	9301      	str	r3, [sp, #4]
 8008ec8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	4603      	mov	r3, r0
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f7fd fa45 	bl	8006360 <failedSDO>
						        return 0xFF;
 8008ed6:	23ff      	movs	r3, #255	; 0xff
 8008ed8:	f000 bf24 	b.w	8009d24 <proceedSDO+0x3340>
					        for (i = nbBytes + 1 ; i < 8 ; i++)
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ee2:	e008      	b.n	8008ef6 <proceedSDO+0x2512>
						        data[i] = 0;
 8008ee4:	f107 020c 	add.w	r2, r7, #12
 8008ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eea:	4413      	add	r3, r2
 8008eec:	2200      	movs	r2, #0
 8008eee:	701a      	strb	r2, [r3, #0]
					        for (i = nbBytes + 1 ; i < 8 ; i++)
 8008ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef8:	2b07      	cmp	r3, #7
 8008efa:	d9f3      	bls.n	8008ee4 <proceedSDO+0x2500>
					        sendSDO(d, whoami, CliServNbr, data);
 8008efc:	f107 030c 	add.w	r3, r7, #12
 8008f00:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8008f04:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7fd fc99 	bl	8006840 <sendSDO>
                            d->transfers[line].endfield = (UNS8) (7 - nbBytes);
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	7efa      	ldrb	r2, [r7, #27]
 8008f14:	4610      	mov	r0, r2
 8008f16:	f1c3 0307 	rsb	r3, r3, #7
 8008f1a:	b2d9      	uxtb	r1, r3
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	2354      	movs	r3, #84	; 0x54
 8008f20:	fb03 f300 	mul.w	r3, r3, r0
 8008f24:	4413      	add	r3, r2
 8008f26:	3369      	adds	r3, #105	; 0x69
 8008f28:	460a      	mov	r2, r1
 8008f2a:	701a      	strb	r2, [r3, #0]
                            break;
 8008f2c:	bf00      	nop
                if ((SubCommand == SDO_BSS_INITIATE_DOWNLOAD_RESPONSE) || (SubCommand == SDO_BSS_DOWNLOAD_RESPONSE)) {
 8008f2e:	e072      	b.n	8009016 <proceedSDO+0x2632>
                	for(SeqNo = 1 ; SeqNo <= d->transfers[line].blksize ; SeqNo++) {
 8008f30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f34:	3301      	adds	r3, #1
 8008f36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008f3a:	7efb      	ldrb	r3, [r7, #27]
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	2354      	movs	r3, #84	; 0x54
 8008f42:	fb03 f301 	mul.w	r3, r3, r1
 8008f46:	4413      	add	r3, r2
 8008f48:	335d      	adds	r3, #93	; 0x5d
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008f50:	429a      	cmp	r2, r3
 8008f52:	f67f af59 	bls.w	8008e08 <proceedSDO+0x2424>
                if ((SubCommand == SDO_BSS_INITIATE_DOWNLOAD_RESPONSE) || (SubCommand == SDO_BSS_DOWNLOAD_RESPONSE)) {
 8008f56:	e05e      	b.n	8009016 <proceedSDO+0x2632>
				else if (SubCommand == SDO_BSS_END_DOWNLOAD_RESPONSE) {
 8008f58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d13e      	bne.n	8008fde <proceedSDO+0x25fa>
					StopSDO_TIMER(line)
 8008f60:	7efb      	ldrb	r3, [r7, #27]
 8008f62:	4619      	mov	r1, r3
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	2354      	movs	r3, #84	; 0x54
 8008f68:	fb03 f301 	mul.w	r3, r3, r1
 8008f6c:	4413      	add	r3, r2
 8008f6e:	3374      	adds	r3, #116	; 0x74
 8008f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f74:	7efa      	ldrb	r2, [r7, #27]
 8008f76:	4614      	mov	r4, r2
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f001 fecf 	bl	800ad1c <DelAlarm>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	4619      	mov	r1, r3
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	2354      	movs	r3, #84	; 0x54
 8008f86:	fb03 f304 	mul.w	r3, r3, r4
 8008f8a:	4413      	add	r3, r2
 8008f8c:	3374      	adds	r3, #116	; 0x74
 8008f8e:	460a      	mov	r2, r1
 8008f90:	801a      	strh	r2, [r3, #0]
					d->transfers[line].state = SDO_FINISHED;
 8008f92:	7efb      	ldrb	r3, [r7, #27]
 8008f94:	4619      	mov	r1, r3
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	2354      	movs	r3, #84	; 0x54
 8008f9a:	fb03 f301 	mul.w	r3, r3, r1
 8008f9e:	4413      	add	r3, r2
 8008fa0:	332a      	adds	r3, #42	; 0x2a
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	701a      	strb	r2, [r3, #0]
					if(d->transfers[line].Callback) (*d->transfers[line].Callback)(d,nodeId);
 8008fa6:	7efb      	ldrb	r3, [r7, #27]
 8008fa8:	4619      	mov	r1, r3
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	2354      	movs	r3, #84	; 0x54
 8008fae:	fb03 f301 	mul.w	r3, r3, r1
 8008fb2:	4413      	add	r3, r2
 8008fb4:	3378      	adds	r3, #120	; 0x78
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00d      	beq.n	8008fd8 <proceedSDO+0x25f4>
 8008fbc:	7efb      	ldrb	r3, [r7, #27]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	2354      	movs	r3, #84	; 0x54
 8008fc4:	fb03 f301 	mul.w	r3, r3, r1
 8008fc8:	4413      	add	r3, r2
 8008fca:	3378      	adds	r3, #120	; 0x78
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	4798      	blx	r3
					return 0x00;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	f000 bea3 	b.w	8009d24 <proceedSDO+0x3340>
			    	MSG_ERR(0x1AAB, "SDO error block download : Received wrong subcommand from nodeId", nodeId);
 8008fde:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8008fe2:	9301      	str	r3, [sp, #4]
 8008fe4:	4b75      	ldr	r3, [pc, #468]	; (80091bc <proceedSDO+0x27d8>)
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	f641 23ab 	movw	r3, #6827	; 0x1aab
 8008fec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008ff0:	4973      	ldr	r1, [pc, #460]	; (80091c0 <proceedSDO+0x27dc>)
 8008ff2:	4874      	ldr	r0, [pc, #464]	; (80091c4 <proceedSDO+0x27e0>)
 8008ff4:	f003 fc06 	bl	800c804 <iprintf>
    				failedSDO(d, CliServNbr, whoami, 0, 0, SDOABT_LOCAL_CTRL_ERROR);
 8008ff8:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8008ffc:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8009000:	4b71      	ldr	r3, [pc, #452]	; (80091c8 <proceedSDO+0x27e4>)
 8009002:	9301      	str	r3, [sp, #4]
 8009004:	2300      	movs	r3, #0
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	2300      	movs	r3, #0
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7fd f9a8 	bl	8006360 <failedSDO>
	    			return 0xFF;
 8009010:	23ff      	movs	r3, #255	; 0xff
 8009012:	f000 be87 	b.w	8009d24 <proceedSDO+0x3340>
			break;
 8009016:	f000 be81 	b.w	8009d1c <proceedSDO+0x3338>
		case 6: /* Command specifier for data reception - the client or server is the data consumer */
			if (whoami == SDO_SERVER) { /* Server block download */
 800901a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800901e:	2b01      	cmp	r3, #1
 8009020:	f040 8360 	bne.w	80096e4 <proceedSDO+0x2d00>
				if (err) {
 8009024:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 80d3 	beq.w	80091d4 <proceedSDO+0x27f0>
					/* Nothing already started */
					SubCommand = (m->data[0]) & 1;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	791b      	ldrb	r3, [r3, #4]
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					if (SubCommand != SDO_BCS_INITIATE_DOWNLOAD_REQUEST) {
 800903a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800903e:	2b00      	cmp	r3, #0
 8009040:	d01b      	beq.n	800907a <proceedSDO+0x2696>
			    	    MSG_ERR(0x1AAC, "SDO error block download : Received wrong subcommand from node id", nodeId);
 8009042:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009046:	9301      	str	r3, [sp, #4]
 8009048:	4b60      	ldr	r3, [pc, #384]	; (80091cc <proceedSDO+0x27e8>)
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	f641 23ac 	movw	r3, #6828	; 0x1aac
 8009050:	f240 624c 	movw	r2, #1612	; 0x64c
 8009054:	495a      	ldr	r1, [pc, #360]	; (80091c0 <proceedSDO+0x27dc>)
 8009056:	485b      	ldr	r0, [pc, #364]	; (80091c4 <proceedSDO+0x27e0>)
 8009058:	f003 fbd4 	bl	800c804 <iprintf>
    				    failedSDO(d, CliServNbr, whoami, 0, 0, SDOABT_LOCAL_CTRL_ERROR);
 800905c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009060:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8009064:	4b58      	ldr	r3, [pc, #352]	; (80091c8 <proceedSDO+0x27e4>)
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	2300      	movs	r3, #0
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	2300      	movs	r3, #0
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7fd f976 	bl	8006360 <failedSDO>
	    			    return 0xFF;
 8009074:	23ff      	movs	r3, #255	; 0xff
 8009076:	f000 be55 	b.w	8009d24 <proceedSDO+0x3340>
				    }
					index = getSDOindex(m->data[1],m->data[2]);
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	799b      	ldrb	r3, [r3, #6]
 800907e:	021b      	lsls	r3, r3, #8
 8009080:	b21a      	sxth	r2, r3
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	795b      	ldrb	r3, [r3, #5]
 8009086:	b21b      	sxth	r3, r3
 8009088:	4313      	orrs	r3, r2
 800908a:	b21b      	sxth	r3, r3
 800908c:	84bb      	strh	r3, [r7, #36]	; 0x24
					subIndex = getSDOsubIndex(m->data[3]);
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	79db      	ldrb	r3, [r3, #7]
 8009092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					MSG_WAR(0x3A9B, "Received SDO block download initiate defined at index 0x1200 + ",
						CliServNbr);
					MSG_WAR(0x3A9B, "Writing at index : ", index);
					MSG_WAR(0x3A9B, "Writing at subIndex : ", subIndex);
					/* Try to open a new line. */
					err = getSDOfreeLine( d, whoami, &line );
 8009096:	f107 021b 	add.w	r2, r7, #27
 800909a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800909e:	4619      	mov	r1, r3
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7fd fae9 	bl	8006678 <getSDOfreeLine>
 80090a6:	4603      	mov	r3, r0
 80090a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					if (err) {
 80090ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d01c      	beq.n	80090ee <proceedSDO+0x270a>
						MSG_ERR(0x1A89, "SDO error : No line free, too many SDO in progress. Aborted.", 0);
 80090b4:	2300      	movs	r3, #0
 80090b6:	9301      	str	r3, [sp, #4]
 80090b8:	4b45      	ldr	r3, [pc, #276]	; (80091d0 <proceedSDO+0x27ec>)
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	f641 2389 	movw	r3, #6793	; 0x1a89
 80090c0:	f240 6259 	movw	r2, #1625	; 0x659
 80090c4:	493e      	ldr	r1, [pc, #248]	; (80091c0 <proceedSDO+0x27dc>)
 80090c6:	483f      	ldr	r0, [pc, #252]	; (80091c4 <proceedSDO+0x27e0>)
 80090c8:	f003 fb9c 	bl	800c804 <iprintf>
						failedSDO(d, CliServNbr, whoami, index, subIndex, SDOABT_LOCAL_CTRL_ERROR);
 80090cc:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80090ce:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80090d2:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80090d6:	4b3c      	ldr	r3, [pc, #240]	; (80091c8 <proceedSDO+0x27e4>)
 80090d8:	9301      	str	r3, [sp, #4]
 80090da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	4603      	mov	r3, r0
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7fd f93c 	bl	8006360 <failedSDO>
						return 0xFF;
 80090e8:	23ff      	movs	r3, #255	; 0xff
 80090ea:	f000 be1b 	b.w	8009d24 <proceedSDO+0x3340>
					}
					initSDOline(d, line, CliServNbr, index, subIndex, SDO_BLOCK_DOWNLOAD_IN_PROGRESS);
 80090ee:	7ef9      	ldrb	r1, [r7, #27]
 80090f0:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80090f2:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80090f6:	2304      	movs	r3, #4
 80090f8:	9301      	str	r3, [sp, #4]
 80090fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	4603      	mov	r3, r0
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7fd f9d2 	bl	80064ac <initSDOline>
                    d->transfers[line].rxstep = RXSTEP_STARTED;
 8009108:	7efb      	ldrb	r3, [r7, #27]
 800910a:	4619      	mov	r1, r3
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	2354      	movs	r3, #84	; 0x54
 8009110:	fb03 f301 	mul.w	r3, r3, r1
 8009114:	4413      	add	r3, r2
 8009116:	336a      	adds	r3, #106	; 0x6a
 8009118:	2201      	movs	r2, #1
 800911a:	701a      	strb	r2, [r3, #0]
                    d->transfers[line].peerCRCsupport = (UNS8)(((m->data[0])>>2) & 1);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	791b      	ldrb	r3, [r3, #4]
 8009120:	089b      	lsrs	r3, r3, #2
 8009122:	b2db      	uxtb	r3, r3
 8009124:	7efa      	ldrb	r2, [r7, #27]
 8009126:	4610      	mov	r0, r2
 8009128:	f003 0301 	and.w	r3, r3, #1
 800912c:	b2d9      	uxtb	r1, r3
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	2354      	movs	r3, #84	; 0x54
 8009132:	fb03 f300 	mul.w	r3, r3, r0
 8009136:	4413      	add	r3, r2
 8009138:	335c      	adds	r3, #92	; 0x5c
 800913a:	460a      	mov	r2, r1
 800913c:	701a      	strb	r2, [r3, #0]
					if ((m->data[0]) & 2)	/* if data set size is indicated */
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	791b      	ldrb	r3, [r3, #4]
 8009142:	f003 0302 	and.w	r3, r3, #2
 8009146:	2b00      	cmp	r3, #0
 8009148:	d018      	beq.n	800917c <proceedSDO+0x2798>
                    	d->transfers[line].objsize = (UNS32)m->data[4] + (UNS32)m->data[5]*256 + (UNS32)m->data[6]*256*256 + (UNS32)m->data[7]*256*256*256;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	7a1b      	ldrb	r3, [r3, #8]
 800914e:	4619      	mov	r1, r3
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	7a9b      	ldrb	r3, [r3, #10]
 8009154:	461a      	mov	r2, r3
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	7adb      	ldrb	r3, [r3, #11]
 800915a:	021b      	lsls	r3, r3, #8
 800915c:	4413      	add	r3, r2
 800915e:	021b      	lsls	r3, r3, #8
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	7a52      	ldrb	r2, [r2, #9]
 8009164:	4413      	add	r3, r2
 8009166:	021b      	lsls	r3, r3, #8
 8009168:	7efa      	ldrb	r2, [r7, #27]
 800916a:	4610      	mov	r0, r2
 800916c:	18ca      	adds	r2, r1, r3
 800916e:	6879      	ldr	r1, [r7, #4]
 8009170:	2354      	movs	r3, #84	; 0x54
 8009172:	fb03 f300 	mul.w	r3, r3, r0
 8009176:	440b      	add	r3, r1
 8009178:	3360      	adds	r3, #96	; 0x60
 800917a:	601a      	str	r2, [r3, #0]
                    data[0] = (5 << 5) | SDO_BSS_INITIATE_DOWNLOAD_RESPONSE;
 800917c:	23a0      	movs	r3, #160	; 0xa0
 800917e:	733b      	strb	r3, [r7, #12]
					data[1] = (UNS8) index;        /* LSB */
 8009180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009182:	b2db      	uxtb	r3, r3
 8009184:	737b      	strb	r3, [r7, #13]
					data[2] = (UNS8) (index >> 8); /* MSB */
 8009186:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009188:	0a1b      	lsrs	r3, r3, #8
 800918a:	b29b      	uxth	r3, r3
 800918c:	b2db      	uxtb	r3, r3
 800918e:	73bb      	strb	r3, [r7, #14]
					data[3] = subIndex;
 8009190:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009194:	73fb      	strb	r3, [r7, #15]
					data[4] = SDO_BLOCK_SIZE;
 8009196:	2310      	movs	r3, #16
 8009198:	743b      	strb	r3, [r7, #16]
					data[5] = data[6] = data[7] = 0;
 800919a:	2300      	movs	r3, #0
 800919c:	74fb      	strb	r3, [r7, #19]
 800919e:	7cfb      	ldrb	r3, [r7, #19]
 80091a0:	74bb      	strb	r3, [r7, #18]
 80091a2:	7cbb      	ldrb	r3, [r7, #18]
 80091a4:	747b      	strb	r3, [r7, #17]
					MSG_WAR(0x3AAD, "SDO. Sending block download initiate response - index 0x1200 + ", CliServNbr);
					sendSDO(d, whoami, CliServNbr, data);
 80091a6:	f107 030c 	add.w	r3, r7, #12
 80091aa:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80091ae:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f7fd fb44 	bl	8006840 <sendSDO>
                    StopSDO_TIMER(line)
					d->transfers[line].state = SDO_FINISHED;
				    if(d->transfers[line].Callback) (*d->transfers[line].Callback)(d,nodeId);
				}
			}      /* end if CLIENT */
			break;
 80091b8:	f000 bdb2 	b.w	8009d20 <proceedSDO+0x333c>
 80091bc:	0800e4d8 	.word	0x0800e4d8
 80091c0:	0800dec8 	.word	0x0800dec8
 80091c4:	0800deec 	.word	0x0800deec
 80091c8:	08000021 	.word	0x08000021
 80091cc:	0800e51c 	.word	0x0800e51c
 80091d0:	0800e1a0 	.word	0x0800e1a0
				else if (d->transfers[line].rxstep == RXSTEP_STARTED) {
 80091d4:	7efb      	ldrb	r3, [r7, #27]
 80091d6:	4619      	mov	r1, r3
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	2354      	movs	r3, #84	; 0x54
 80091dc:	fb03 f301 	mul.w	r3, r3, r1
 80091e0:	4413      	add	r3, r2
 80091e2:	336a      	adds	r3, #106	; 0x6a
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	f040 8121 	bne.w	800942e <proceedSDO+0x2a4a>
    		    	RestartSDO_TIMER(line)
 80091ec:	7efb      	ldrb	r3, [r7, #27]
 80091ee:	4619      	mov	r1, r3
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	2354      	movs	r3, #84	; 0x54
 80091f4:	fb03 f301 	mul.w	r3, r3, r1
 80091f8:	4413      	add	r3, r2
 80091fa:	3374      	adds	r3, #116	; 0x74
 80091fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009204:	d02d      	beq.n	8009262 <proceedSDO+0x287e>
 8009206:	7efb      	ldrb	r3, [r7, #27]
 8009208:	4619      	mov	r1, r3
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	2354      	movs	r3, #84	; 0x54
 800920e:	fb03 f301 	mul.w	r3, r3, r1
 8009212:	4413      	add	r3, r2
 8009214:	3374      	adds	r3, #116	; 0x74
 8009216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800921a:	7efa      	ldrb	r2, [r7, #27]
 800921c:	4614      	mov	r4, r2
 800921e:	4618      	mov	r0, r3
 8009220:	f001 fd7c 	bl	800ad1c <DelAlarm>
 8009224:	4603      	mov	r3, r0
 8009226:	4619      	mov	r1, r3
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	2354      	movs	r3, #84	; 0x54
 800922c:	fb03 f304 	mul.w	r3, r3, r4
 8009230:	4413      	add	r3, r2
 8009232:	3374      	adds	r3, #116	; 0x74
 8009234:	460a      	mov	r2, r1
 8009236:	801a      	strh	r2, [r3, #0]
 8009238:	7efb      	ldrb	r3, [r7, #27]
 800923a:	4619      	mov	r1, r3
 800923c:	7efb      	ldrb	r3, [r7, #27]
 800923e:	461c      	mov	r4, r3
 8009240:	2300      	movs	r3, #0
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	4b91      	ldr	r3, [pc, #580]	; (800948c <proceedSDO+0x2aa8>)
 8009246:	4a92      	ldr	r2, [pc, #584]	; (8009490 <proceedSDO+0x2aac>)
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f001 fceb 	bl	800ac24 <SetAlarm>
 800924e:	4603      	mov	r3, r0
 8009250:	4619      	mov	r1, r3
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	2354      	movs	r3, #84	; 0x54
 8009256:	fb03 f304 	mul.w	r3, r3, r4
 800925a:	4413      	add	r3, r2
 800925c:	3374      	adds	r3, #116	; 0x74
 800925e:	460a      	mov	r2, r1
 8009260:	801a      	strh	r2, [r3, #0]
					SeqNo = m->data[0] & 0x7F;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	791b      	ldrb	r3, [r3, #4]
 8009266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800926a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					if (m->data[0] & 0x80) {	/* Last segment ? */
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	791b      	ldrb	r3, [r3, #4]
 8009272:	b25b      	sxtb	r3, r3
 8009274:	2b00      	cmp	r3, #0
 8009276:	da5e      	bge.n	8009336 <proceedSDO+0x2952>
					    if(SeqNo == (d->transfers[line].seqno + 1)) {
 8009278:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800927c:	7efb      	ldrb	r3, [r7, #27]
 800927e:	4618      	mov	r0, r3
 8009280:	6879      	ldr	r1, [r7, #4]
 8009282:	2354      	movs	r3, #84	; 0x54
 8009284:	fb03 f300 	mul.w	r3, r3, r0
 8009288:	440b      	add	r3, r1
 800928a:	3368      	adds	r3, #104	; 0x68
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	3301      	adds	r3, #1
 8009290:	429a      	cmp	r2, r3
 8009292:	d123      	bne.n	80092dc <proceedSDO+0x28f8>
							d->transfers[line].rxstep = RXSTEP_END;
 8009294:	7efb      	ldrb	r3, [r7, #27]
 8009296:	4619      	mov	r1, r3
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	2354      	movs	r3, #84	; 0x54
 800929c:	fb03 f301 	mul.w	r3, r3, r1
 80092a0:	4413      	add	r3, r2
 80092a2:	336a      	adds	r3, #106	; 0x6a
 80092a4:	2202      	movs	r2, #2
 80092a6:	701a      	strb	r2, [r3, #0]
							d->transfers[line].seqno = SeqNo;
 80092a8:	7efb      	ldrb	r3, [r7, #27]
 80092aa:	4619      	mov	r1, r3
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	2354      	movs	r3, #84	; 0x54
 80092b0:	fb03 f301 	mul.w	r3, r3, r1
 80092b4:	4413      	add	r3, r2
 80092b6:	3368      	adds	r3, #104	; 0x68
 80092b8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80092bc:	701a      	strb	r2, [r3, #0]
							memcpy(d->transfers[line].tmpData, m->data, 8);
 80092be:	7efb      	ldrb	r3, [r7, #27]
 80092c0:	461a      	mov	r2, r3
 80092c2:	2354      	movs	r3, #84	; 0x54
 80092c4:	fb03 f302 	mul.w	r3, r3, r2
 80092c8:	3368      	adds	r3, #104	; 0x68
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	4413      	add	r3, r2
 80092ce:	1cd8      	adds	r0, r3, #3
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	3304      	adds	r3, #4
 80092d4:	2208      	movs	r2, #8
 80092d6:	4619      	mov	r1, r3
 80092d8:	f003 fa81 	bl	800c7de <memcpy>
						data[0] = (5 << 5) | SDO_BSS_DOWNLOAD_RESPONSE;
 80092dc:	23a2      	movs	r3, #162	; 0xa2
 80092de:	733b      	strb	r3, [r7, #12]
						data[1] = d->transfers[line].seqno;
 80092e0:	7efb      	ldrb	r3, [r7, #27]
 80092e2:	4619      	mov	r1, r3
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	2354      	movs	r3, #84	; 0x54
 80092e8:	fb03 f301 	mul.w	r3, r3, r1
 80092ec:	4413      	add	r3, r2
 80092ee:	3368      	adds	r3, #104	; 0x68
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	737b      	strb	r3, [r7, #13]
						data[2] = SDO_BLOCK_SIZE;
 80092f4:	2310      	movs	r3, #16
 80092f6:	73bb      	strb	r3, [r7, #14]
						data[3] = data[4] = data[5] = data[6] = data[7] = 0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	74fb      	strb	r3, [r7, #19]
 80092fc:	7cfb      	ldrb	r3, [r7, #19]
 80092fe:	74bb      	strb	r3, [r7, #18]
 8009300:	7cbb      	ldrb	r3, [r7, #18]
 8009302:	747b      	strb	r3, [r7, #17]
 8009304:	7c7b      	ldrb	r3, [r7, #17]
 8009306:	743b      	strb	r3, [r7, #16]
 8009308:	7c3b      	ldrb	r3, [r7, #16]
 800930a:	73fb      	strb	r3, [r7, #15]
						sendSDO(d, whoami, CliServNbr, data);
 800930c:	f107 030c 	add.w	r3, r7, #12
 8009310:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8009314:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f7fd fa91 	bl	8006840 <sendSDO>
                        d->transfers[line].seqno = 0;
 800931e:	7efb      	ldrb	r3, [r7, #27]
 8009320:	4619      	mov	r1, r3
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	2354      	movs	r3, #84	; 0x54
 8009326:	fb03 f301 	mul.w	r3, r3, r1
 800932a:	4413      	add	r3, r2
 800932c:	3368      	adds	r3, #104	; 0x68
 800932e:	2200      	movs	r2, #0
 8009330:	701a      	strb	r2, [r3, #0]
			break;
 8009332:	f000 bcf5 	b.w	8009d20 <proceedSDO+0x333c>
					   	if (SeqNo == (d->transfers[line].seqno + 1)) {	
 8009336:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800933a:	7efb      	ldrb	r3, [r7, #27]
 800933c:	4618      	mov	r0, r3
 800933e:	6879      	ldr	r1, [r7, #4]
 8009340:	2354      	movs	r3, #84	; 0x54
 8009342:	fb03 f300 	mul.w	r3, r3, r0
 8009346:	440b      	add	r3, r1
 8009348:	3368      	adds	r3, #104	; 0x68
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	3301      	adds	r3, #1
 800934e:	429a      	cmp	r2, r3
 8009350:	d13b      	bne.n	80093ca <proceedSDO+0x29e6>
							d->transfers[line].seqno = SeqNo;
 8009352:	7efb      	ldrb	r3, [r7, #27]
 8009354:	4619      	mov	r1, r3
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	2354      	movs	r3, #84	; 0x54
 800935a:	fb03 f301 	mul.w	r3, r3, r1
 800935e:	4413      	add	r3, r2
 8009360:	3368      	adds	r3, #104	; 0x68
 8009362:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009366:	701a      	strb	r2, [r3, #0]
							err = SDOtoLine(d, line, 7, (*m).data + 1);
 8009368:	7ef9      	ldrb	r1, [r7, #27]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	3304      	adds	r3, #4
 800936e:	3301      	adds	r3, #1
 8009370:	2207      	movs	r2, #7
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7fc ff90 	bl	8006298 <SDOtoLine>
 8009378:	4603      	mov	r3, r0
 800937a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (err) {
 800937e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009382:	2b00      	cmp	r3, #0
 8009384:	d021      	beq.n	80093ca <proceedSDO+0x29e6>
								failedSDO(d, CliServNbr, whoami, d->transfers[line].index,  d->transfers[line].subIndex, SDOABT_GENERAL_ERROR);
 8009386:	7efb      	ldrb	r3, [r7, #27]
 8009388:	4619      	mov	r1, r3
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	2354      	movs	r3, #84	; 0x54
 800938e:	fb03 f301 	mul.w	r3, r3, r1
 8009392:	4413      	add	r3, r2
 8009394:	3330      	adds	r3, #48	; 0x30
 8009396:	881c      	ldrh	r4, [r3, #0]
 8009398:	7efb      	ldrb	r3, [r7, #27]
 800939a:	4619      	mov	r1, r3
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	2354      	movs	r3, #84	; 0x54
 80093a0:	fb03 f301 	mul.w	r3, r3, r1
 80093a4:	4413      	add	r3, r2
 80093a6:	3332      	adds	r3, #50	; 0x32
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	f897 0043 	ldrb.w	r0, [r7, #67]	; 0x43
 80093ae:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80093b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80093b6:	9201      	str	r2, [sp, #4]
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	4623      	mov	r3, r4
 80093bc:	4602      	mov	r2, r0
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f7fc ffce 	bl	8006360 <failedSDO>
								return 0xFF;
 80093c4:	23ff      	movs	r3, #255	; 0xff
 80093c6:	f000 bcad 	b.w	8009d24 <proceedSDO+0x3340>
						if (SeqNo == SDO_BLOCK_SIZE) {
 80093ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093ce:	2b10      	cmp	r3, #16
 80093d0:	f040 84a6 	bne.w	8009d20 <proceedSDO+0x333c>
							data[0] = (5 << 5) | SDO_BSS_DOWNLOAD_RESPONSE;
 80093d4:	23a2      	movs	r3, #162	; 0xa2
 80093d6:	733b      	strb	r3, [r7, #12]
							data[1] = d->transfers[line].seqno;
 80093d8:	7efb      	ldrb	r3, [r7, #27]
 80093da:	4619      	mov	r1, r3
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	2354      	movs	r3, #84	; 0x54
 80093e0:	fb03 f301 	mul.w	r3, r3, r1
 80093e4:	4413      	add	r3, r2
 80093e6:	3368      	adds	r3, #104	; 0x68
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	737b      	strb	r3, [r7, #13]
							data[2] = SDO_BLOCK_SIZE;
 80093ec:	2310      	movs	r3, #16
 80093ee:	73bb      	strb	r3, [r7, #14]
							data[3] = data[4] = data[5] = data[6] = data[7] = 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	74fb      	strb	r3, [r7, #19]
 80093f4:	7cfb      	ldrb	r3, [r7, #19]
 80093f6:	74bb      	strb	r3, [r7, #18]
 80093f8:	7cbb      	ldrb	r3, [r7, #18]
 80093fa:	747b      	strb	r3, [r7, #17]
 80093fc:	7c7b      	ldrb	r3, [r7, #17]
 80093fe:	743b      	strb	r3, [r7, #16]
 8009400:	7c3b      	ldrb	r3, [r7, #16]
 8009402:	73fb      	strb	r3, [r7, #15]
							sendSDO(d, whoami, CliServNbr, data);
 8009404:	f107 030c 	add.w	r3, r7, #12
 8009408:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800940c:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f7fd fa15 	bl	8006840 <sendSDO>
                            d->transfers[line].seqno = 0;
 8009416:	7efb      	ldrb	r3, [r7, #27]
 8009418:	4619      	mov	r1, r3
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	2354      	movs	r3, #84	; 0x54
 800941e:	fb03 f301 	mul.w	r3, r3, r1
 8009422:	4413      	add	r3, r2
 8009424:	3368      	adds	r3, #104	; 0x68
 8009426:	2200      	movs	r2, #0
 8009428:	701a      	strb	r2, [r3, #0]
			break;
 800942a:	f000 bc79 	b.w	8009d20 <proceedSDO+0x333c>
				else if (d->transfers[line].rxstep == RXSTEP_END) { /* endphase */
 800942e:	7efb      	ldrb	r3, [r7, #27]
 8009430:	4619      	mov	r1, r3
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	2354      	movs	r3, #84	; 0x54
 8009436:	fb03 f301 	mul.w	r3, r3, r1
 800943a:	4413      	add	r3, r2
 800943c:	336a      	adds	r3, #106	; 0x6a
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	2b02      	cmp	r3, #2
 8009442:	f040 846d 	bne.w	8009d20 <proceedSDO+0x333c>
					if ((m->data[0] & 1) != SDO_BCS_END_DOWNLOAD_REQUEST) {
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	791b      	ldrb	r3, [r3, #4]
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	2b00      	cmp	r3, #0
 8009450:	d128      	bne.n	80094a4 <proceedSDO+0x2ac0>
		    			MSG_ERR(0x1AAD, "SDO error block download : Received wrong subcommand - index 0x1200 + ", CliServNbr);
 8009452:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009456:	9301      	str	r3, [sp, #4]
 8009458:	4b0e      	ldr	r3, [pc, #56]	; (8009494 <proceedSDO+0x2ab0>)
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	f641 23ad 	movw	r3, #6829	; 0x1aad
 8009460:	f240 6297 	movw	r2, #1687	; 0x697
 8009464:	490c      	ldr	r1, [pc, #48]	; (8009498 <proceedSDO+0x2ab4>)
 8009466:	480d      	ldr	r0, [pc, #52]	; (800949c <proceedSDO+0x2ab8>)
 8009468:	f003 f9cc 	bl	800c804 <iprintf>
    					failedSDO(d, CliServNbr, whoami, 0, 0, SDOABT_LOCAL_CTRL_ERROR);
 800946c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009470:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8009474:	4b0a      	ldr	r3, [pc, #40]	; (80094a0 <proceedSDO+0x2abc>)
 8009476:	9301      	str	r3, [sp, #4]
 8009478:	2300      	movs	r3, #0
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	2300      	movs	r3, #0
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f7fc ff6e 	bl	8006360 <failedSDO>
	    				return 0xFF;
 8009484:	23ff      	movs	r3, #255	; 0xff
 8009486:	f000 bc4d 	b.w	8009d24 <proceedSDO+0x3340>
 800948a:	bf00      	nop
 800948c:	000493e0 	.word	0x000493e0
 8009490:	08005ead 	.word	0x08005ead
 8009494:	0800e560 	.word	0x0800e560
 8009498:	0800dec8 	.word	0x0800dec8
 800949c:	0800deec 	.word	0x0800deec
 80094a0:	08000021 	.word	0x08000021
    		    	RestartSDO_TIMER(line)
 80094a4:	7efb      	ldrb	r3, [r7, #27]
 80094a6:	4619      	mov	r1, r3
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	2354      	movs	r3, #84	; 0x54
 80094ac:	fb03 f301 	mul.w	r3, r3, r1
 80094b0:	4413      	add	r3, r2
 80094b2:	3374      	adds	r3, #116	; 0x74
 80094b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094bc:	d02d      	beq.n	800951a <proceedSDO+0x2b36>
 80094be:	7efb      	ldrb	r3, [r7, #27]
 80094c0:	4619      	mov	r1, r3
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	2354      	movs	r3, #84	; 0x54
 80094c6:	fb03 f301 	mul.w	r3, r3, r1
 80094ca:	4413      	add	r3, r2
 80094cc:	3374      	adds	r3, #116	; 0x74
 80094ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094d2:	7efa      	ldrb	r2, [r7, #27]
 80094d4:	4614      	mov	r4, r2
 80094d6:	4618      	mov	r0, r3
 80094d8:	f001 fc20 	bl	800ad1c <DelAlarm>
 80094dc:	4603      	mov	r3, r0
 80094de:	4619      	mov	r1, r3
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	2354      	movs	r3, #84	; 0x54
 80094e4:	fb03 f304 	mul.w	r3, r3, r4
 80094e8:	4413      	add	r3, r2
 80094ea:	3374      	adds	r3, #116	; 0x74
 80094ec:	460a      	mov	r2, r1
 80094ee:	801a      	strh	r2, [r3, #0]
 80094f0:	7efb      	ldrb	r3, [r7, #27]
 80094f2:	4619      	mov	r1, r3
 80094f4:	7efb      	ldrb	r3, [r7, #27]
 80094f6:	461c      	mov	r4, r3
 80094f8:	2300      	movs	r3, #0
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	4b89      	ldr	r3, [pc, #548]	; (8009724 <proceedSDO+0x2d40>)
 80094fe:	4a8a      	ldr	r2, [pc, #552]	; (8009728 <proceedSDO+0x2d44>)
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f001 fb8f 	bl	800ac24 <SetAlarm>
 8009506:	4603      	mov	r3, r0
 8009508:	4619      	mov	r1, r3
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	2354      	movs	r3, #84	; 0x54
 800950e:	fb03 f304 	mul.w	r3, r3, r4
 8009512:	4413      	add	r3, r2
 8009514:	3374      	adds	r3, #116	; 0x74
 8009516:	460a      	mov	r2, r1
 8009518:	801a      	strh	r2, [r3, #0]
					NbBytesNoData = (UNS8)((m->data[0]>>2) & 0x07);
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	791b      	ldrb	r3, [r3, #4]
 800951e:	089b      	lsrs	r3, r3, #2
 8009520:	b2db      	uxtb	r3, r3
 8009522:	f003 0307 	and.w	r3, r3, #7
 8009526:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					err = SDOtoLine(d, line, 7-NbBytesNoData, d->transfers[line].tmpData + 1);
 800952a:	7ef9      	ldrb	r1, [r7, #27]
 800952c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009530:	f1c3 0307 	rsb	r3, r3, #7
 8009534:	4618      	mov	r0, r3
 8009536:	7efb      	ldrb	r3, [r7, #27]
 8009538:	461a      	mov	r2, r3
 800953a:	2354      	movs	r3, #84	; 0x54
 800953c:	fb03 f302 	mul.w	r3, r3, r2
 8009540:	3368      	adds	r3, #104	; 0x68
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	4413      	add	r3, r2
 8009546:	3303      	adds	r3, #3
 8009548:	3301      	adds	r3, #1
 800954a:	4602      	mov	r2, r0
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f7fc fea3 	bl	8006298 <SDOtoLine>
 8009552:	4603      	mov	r3, r0
 8009554:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					if (err) {
 8009558:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800955c:	2b00      	cmp	r3, #0
 800955e:	d020      	beq.n	80095a2 <proceedSDO+0x2bbe>
						failedSDO(d, CliServNbr, whoami, d->transfers[line].index,  d->transfers[line].subIndex, SDOABT_GENERAL_ERROR);
 8009560:	7efb      	ldrb	r3, [r7, #27]
 8009562:	4619      	mov	r1, r3
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	2354      	movs	r3, #84	; 0x54
 8009568:	fb03 f301 	mul.w	r3, r3, r1
 800956c:	4413      	add	r3, r2
 800956e:	3330      	adds	r3, #48	; 0x30
 8009570:	881c      	ldrh	r4, [r3, #0]
 8009572:	7efb      	ldrb	r3, [r7, #27]
 8009574:	4619      	mov	r1, r3
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	2354      	movs	r3, #84	; 0x54
 800957a:	fb03 f301 	mul.w	r3, r3, r1
 800957e:	4413      	add	r3, r2
 8009580:	3332      	adds	r3, #50	; 0x32
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	f897 0043 	ldrb.w	r0, [r7, #67]	; 0x43
 8009588:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800958c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009590:	9201      	str	r2, [sp, #4]
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	4623      	mov	r3, r4
 8009596:	4602      	mov	r2, r0
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7fc fee1 	bl	8006360 <failedSDO>
						return 0xFF;
 800959e:	23ff      	movs	r3, #255	; 0xff
 80095a0:	e3c0      	b.n	8009d24 <proceedSDO+0x3340>
					if(d->transfers[line].objsize){ /* If size was indicated in the initiate request */
 80095a2:	7efb      	ldrb	r3, [r7, #27]
 80095a4:	4619      	mov	r1, r3
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	2354      	movs	r3, #84	; 0x54
 80095aa:	fb03 f301 	mul.w	r3, r3, r1
 80095ae:	4413      	add	r3, r2
 80095b0:	3360      	adds	r3, #96	; 0x60
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d040      	beq.n	800963a <proceedSDO+0x2c56>
						if (d->transfers[line].objsize != d->transfers[line].offset){
 80095b8:	7efb      	ldrb	r3, [r7, #27]
 80095ba:	4619      	mov	r1, r3
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	2354      	movs	r3, #84	; 0x54
 80095c0:	fb03 f301 	mul.w	r3, r3, r1
 80095c4:	4413      	add	r3, r2
 80095c6:	3360      	adds	r3, #96	; 0x60
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	7efb      	ldrb	r3, [r7, #27]
 80095cc:	4618      	mov	r0, r3
 80095ce:	6879      	ldr	r1, [r7, #4]
 80095d0:	2354      	movs	r3, #84	; 0x54
 80095d2:	fb03 f300 	mul.w	r3, r3, r0
 80095d6:	440b      	add	r3, r1
 80095d8:	3338      	adds	r3, #56	; 0x38
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d02c      	beq.n	800963a <proceedSDO+0x2c56>
		    					MSG_ERR(0x1AAE, "SDO error block download : sizes do not match - index 0x1200 + ", CliServNbr);
 80095e0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80095e4:	9301      	str	r3, [sp, #4]
 80095e6:	4b51      	ldr	r3, [pc, #324]	; (800972c <proceedSDO+0x2d48>)
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	f641 23ae 	movw	r3, #6830	; 0x1aae
 80095ee:	f240 62a5 	movw	r2, #1701	; 0x6a5
 80095f2:	494f      	ldr	r1, [pc, #316]	; (8009730 <proceedSDO+0x2d4c>)
 80095f4:	484f      	ldr	r0, [pc, #316]	; (8009734 <proceedSDO+0x2d50>)
 80095f6:	f003 f905 	bl	800c804 <iprintf>
    							failedSDO(d, CliServNbr, whoami, d->transfers[line].index, d->transfers[line].subIndex, SDOABT_LOCAL_CTRL_ERROR);
 80095fa:	7efb      	ldrb	r3, [r7, #27]
 80095fc:	4619      	mov	r1, r3
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	2354      	movs	r3, #84	; 0x54
 8009602:	fb03 f301 	mul.w	r3, r3, r1
 8009606:	4413      	add	r3, r2
 8009608:	3330      	adds	r3, #48	; 0x30
 800960a:	881c      	ldrh	r4, [r3, #0]
 800960c:	7efb      	ldrb	r3, [r7, #27]
 800960e:	4619      	mov	r1, r3
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	2354      	movs	r3, #84	; 0x54
 8009614:	fb03 f301 	mul.w	r3, r3, r1
 8009618:	4413      	add	r3, r2
 800961a:	3332      	adds	r3, #50	; 0x32
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	f897 0043 	ldrb.w	r0, [r7, #67]	; 0x43
 8009622:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8009626:	4a44      	ldr	r2, [pc, #272]	; (8009738 <proceedSDO+0x2d54>)
 8009628:	9201      	str	r2, [sp, #4]
 800962a:	9300      	str	r3, [sp, #0]
 800962c:	4623      	mov	r3, r4
 800962e:	4602      	mov	r2, r0
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7fc fe95 	bl	8006360 <failedSDO>
	    						return 0xFF;
 8009636:	23ff      	movs	r3, #255	; 0xff
 8009638:	e374      	b.n	8009d24 <proceedSDO+0x3340>
					data[0] = (5 << 5) | SDO_BSS_END_DOWNLOAD_RESPONSE;
 800963a:	23a1      	movs	r3, #161	; 0xa1
 800963c:	733b      	strb	r3, [r7, #12]
					for (i = 1 ; i < 8 ; i++)
 800963e:	2301      	movs	r3, #1
 8009640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009642:	e008      	b.n	8009656 <proceedSDO+0x2c72>
						data[i] = 0;
 8009644:	f107 020c 	add.w	r2, r7, #12
 8009648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800964a:	4413      	add	r3, r2
 800964c:	2200      	movs	r2, #0
 800964e:	701a      	strb	r2, [r3, #0]
					for (i = 1 ; i < 8 ; i++)
 8009650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009652:	3301      	adds	r3, #1
 8009654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009658:	2b07      	cmp	r3, #7
 800965a:	d9f3      	bls.n	8009644 <proceedSDO+0x2c60>
					sendSDO(d, whoami, CliServNbr, data);
 800965c:	f107 030c 	add.w	r3, r7, #12
 8009660:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8009664:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7fd f8e9 	bl	8006840 <sendSDO>
					errorCode = SDOlineToObjdict(d, line);
 800966e:	7efb      	ldrb	r3, [r7, #27]
 8009670:	4619      	mov	r1, r3
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f7fc fce4 	bl	8006040 <SDOlineToObjdict>
 8009678:	62b8      	str	r0, [r7, #40]	; 0x28
					if (errorCode) {
 800967a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967c:	2b00      	cmp	r3, #0
 800967e:	d02b      	beq.n	80096d8 <proceedSDO+0x2cf4>
						MSG_ERR(0x1AAF, "SDO error : Unable to copy the data in the object dictionary", 0);
 8009680:	2300      	movs	r3, #0
 8009682:	9301      	str	r3, [sp, #4]
 8009684:	4b2d      	ldr	r3, [pc, #180]	; (800973c <proceedSDO+0x2d58>)
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	f641 23af 	movw	r3, #6831	; 0x1aaf
 800968c:	f240 62b2 	movw	r2, #1714	; 0x6b2
 8009690:	4927      	ldr	r1, [pc, #156]	; (8009730 <proceedSDO+0x2d4c>)
 8009692:	4828      	ldr	r0, [pc, #160]	; (8009734 <proceedSDO+0x2d50>)
 8009694:	f003 f8b6 	bl	800c804 <iprintf>
						failedSDO(d, CliServNbr, whoami, d->transfers[line].index, d->transfers[line].subIndex, errorCode);
 8009698:	7efb      	ldrb	r3, [r7, #27]
 800969a:	4619      	mov	r1, r3
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	2354      	movs	r3, #84	; 0x54
 80096a0:	fb03 f301 	mul.w	r3, r3, r1
 80096a4:	4413      	add	r3, r2
 80096a6:	3330      	adds	r3, #48	; 0x30
 80096a8:	881c      	ldrh	r4, [r3, #0]
 80096aa:	7efb      	ldrb	r3, [r7, #27]
 80096ac:	4619      	mov	r1, r3
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	2354      	movs	r3, #84	; 0x54
 80096b2:	fb03 f301 	mul.w	r3, r3, r1
 80096b6:	4413      	add	r3, r2
 80096b8:	3332      	adds	r3, #50	; 0x32
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	f897 0043 	ldrb.w	r0, [r7, #67]	; 0x43
 80096c0:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80096c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096c6:	9201      	str	r2, [sp, #4]
 80096c8:	9300      	str	r3, [sp, #0]
 80096ca:	4623      	mov	r3, r4
 80096cc:	4602      	mov	r2, r0
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7fc fe46 	bl	8006360 <failedSDO>
						return 0xFF;
 80096d4:	23ff      	movs	r3, #255	; 0xff
 80096d6:	e325      	b.n	8009d24 <proceedSDO+0x3340>
					resetSDOline(d, line);
 80096d8:	7efb      	ldrb	r3, [r7, #27]
 80096da:	4619      	mov	r1, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f7fc feab 	bl	8006438 <resetSDOline>
			break;
 80096e2:	e31d      	b.n	8009d20 <proceedSDO+0x333c>
				if (err) {
 80096e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d02b      	beq.n	8009744 <proceedSDO+0x2d60>
			    	MSG_ERR(0x1AAD, "SDO error block upload : no transmission started", nodeId);
 80096ec:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80096f0:	9301      	str	r3, [sp, #4]
 80096f2:	4b13      	ldr	r3, [pc, #76]	; (8009740 <proceedSDO+0x2d5c>)
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	f641 23ad 	movw	r3, #6829	; 0x1aad
 80096fa:	f240 62be 	movw	r2, #1726	; 0x6be
 80096fe:	490c      	ldr	r1, [pc, #48]	; (8009730 <proceedSDO+0x2d4c>)
 8009700:	480c      	ldr	r0, [pc, #48]	; (8009734 <proceedSDO+0x2d50>)
 8009702:	f003 f87f 	bl	800c804 <iprintf>
    				failedSDO(d, CliServNbr, whoami, 0, 0, SDOABT_LOCAL_CTRL_ERROR);
 8009706:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800970a:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800970e:	4b0a      	ldr	r3, [pc, #40]	; (8009738 <proceedSDO+0x2d54>)
 8009710:	9301      	str	r3, [sp, #4]
 8009712:	2300      	movs	r3, #0
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	2300      	movs	r3, #0
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7fc fe21 	bl	8006360 <failedSDO>
	    			return 0xFF;
 800971e:	23ff      	movs	r3, #255	; 0xff
 8009720:	e300      	b.n	8009d24 <proceedSDO+0x3340>
 8009722:	bf00      	nop
 8009724:	000493e0 	.word	0x000493e0
 8009728:	08005ead 	.word	0x08005ead
 800972c:	0800e5a8 	.word	0x0800e5a8
 8009730:	0800dec8 	.word	0x0800dec8
 8009734:	0800deec 	.word	0x0800deec
 8009738:	08000021 	.word	0x08000021
 800973c:	0800e0b0 	.word	0x0800e0b0
 8009740:	0800e5e8 	.word	0x0800e5e8
    			RestartSDO_TIMER(line)
 8009744:	7efb      	ldrb	r3, [r7, #27]
 8009746:	4619      	mov	r1, r3
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	2354      	movs	r3, #84	; 0x54
 800974c:	fb03 f301 	mul.w	r3, r3, r1
 8009750:	4413      	add	r3, r2
 8009752:	3374      	adds	r3, #116	; 0x74
 8009754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800975c:	d02d      	beq.n	80097ba <proceedSDO+0x2dd6>
 800975e:	7efb      	ldrb	r3, [r7, #27]
 8009760:	4619      	mov	r1, r3
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	2354      	movs	r3, #84	; 0x54
 8009766:	fb03 f301 	mul.w	r3, r3, r1
 800976a:	4413      	add	r3, r2
 800976c:	3374      	adds	r3, #116	; 0x74
 800976e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009772:	7efa      	ldrb	r2, [r7, #27]
 8009774:	4614      	mov	r4, r2
 8009776:	4618      	mov	r0, r3
 8009778:	f001 fad0 	bl	800ad1c <DelAlarm>
 800977c:	4603      	mov	r3, r0
 800977e:	4619      	mov	r1, r3
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	2354      	movs	r3, #84	; 0x54
 8009784:	fb03 f304 	mul.w	r3, r3, r4
 8009788:	4413      	add	r3, r2
 800978a:	3374      	adds	r3, #116	; 0x74
 800978c:	460a      	mov	r2, r1
 800978e:	801a      	strh	r2, [r3, #0]
 8009790:	7efb      	ldrb	r3, [r7, #27]
 8009792:	4619      	mov	r1, r3
 8009794:	7efb      	ldrb	r3, [r7, #27]
 8009796:	461c      	mov	r4, r3
 8009798:	2300      	movs	r3, #0
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	4bb2      	ldr	r3, [pc, #712]	; (8009a68 <proceedSDO+0x3084>)
 800979e:	4ab3      	ldr	r2, [pc, #716]	; (8009a6c <proceedSDO+0x3088>)
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f001 fa3f 	bl	800ac24 <SetAlarm>
 80097a6:	4603      	mov	r3, r0
 80097a8:	4619      	mov	r1, r3
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	2354      	movs	r3, #84	; 0x54
 80097ae:	fb03 f304 	mul.w	r3, r3, r4
 80097b2:	4413      	add	r3, r2
 80097b4:	3374      	adds	r3, #116	; 0x74
 80097b6:	460a      	mov	r2, r1
 80097b8:	801a      	strh	r2, [r3, #0]
				if (d->transfers[line].rxstep == RXSTEP_INIT) {
 80097ba:	7efb      	ldrb	r3, [r7, #27]
 80097bc:	4619      	mov	r1, r3
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	2354      	movs	r3, #84	; 0x54
 80097c2:	fb03 f301 	mul.w	r3, r3, r1
 80097c6:	4413      	add	r3, r2
 80097c8:	336a      	adds	r3, #106	; 0x6a
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d15b      	bne.n	8009888 <proceedSDO+0x2ea4>
				    if ((m->data[0] & 1) == SDO_BSS_INITIATE_UPLOAD_RESPONSE) {
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	791b      	ldrb	r3, [r3, #4]
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f040 82a1 	bne.w	8009d20 <proceedSDO+0x333c>
						d->transfers[line].rxstep = RXSTEP_STARTED;
 80097de:	7efb      	ldrb	r3, [r7, #27]
 80097e0:	4619      	mov	r1, r3
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	2354      	movs	r3, #84	; 0x54
 80097e6:	fb03 f301 	mul.w	r3, r3, r1
 80097ea:	4413      	add	r3, r2
 80097ec:	336a      	adds	r3, #106	; 0x6a
 80097ee:	2201      	movs	r2, #1
 80097f0:	701a      	strb	r2, [r3, #0]
                        d->transfers[line].peerCRCsupport = (UNS8)(((m->data[0])>>2) & 1);
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	791b      	ldrb	r3, [r3, #4]
 80097f6:	089b      	lsrs	r3, r3, #2
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	7efa      	ldrb	r2, [r7, #27]
 80097fc:	4610      	mov	r0, r2
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	b2d9      	uxtb	r1, r3
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	2354      	movs	r3, #84	; 0x54
 8009808:	fb03 f300 	mul.w	r3, r3, r0
 800980c:	4413      	add	r3, r2
 800980e:	335c      	adds	r3, #92	; 0x5c
 8009810:	460a      	mov	r2, r1
 8009812:	701a      	strb	r2, [r3, #0]
					    if ((m->data[0]) & 2)	/* if data set size is indicated */
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	791b      	ldrb	r3, [r3, #4]
 8009818:	f003 0302 	and.w	r3, r3, #2
 800981c:	2b00      	cmp	r3, #0
 800981e:	d018      	beq.n	8009852 <proceedSDO+0x2e6e>
                    	    d->transfers[line].objsize = (UNS32)m->data[4] + (UNS32)m->data[5]*256 + (UNS32)m->data[6]*256*256 + (UNS32)m->data[7]*256*256*256;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	7a1b      	ldrb	r3, [r3, #8]
 8009824:	4619      	mov	r1, r3
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	7a9b      	ldrb	r3, [r3, #10]
 800982a:	461a      	mov	r2, r3
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	7adb      	ldrb	r3, [r3, #11]
 8009830:	021b      	lsls	r3, r3, #8
 8009832:	4413      	add	r3, r2
 8009834:	021b      	lsls	r3, r3, #8
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	7a52      	ldrb	r2, [r2, #9]
 800983a:	4413      	add	r3, r2
 800983c:	021b      	lsls	r3, r3, #8
 800983e:	7efa      	ldrb	r2, [r7, #27]
 8009840:	4610      	mov	r0, r2
 8009842:	18ca      	adds	r2, r1, r3
 8009844:	6879      	ldr	r1, [r7, #4]
 8009846:	2354      	movs	r3, #84	; 0x54
 8009848:	fb03 f300 	mul.w	r3, r3, r0
 800984c:	440b      	add	r3, r1
 800984e:	3360      	adds	r3, #96	; 0x60
 8009850:	601a      	str	r2, [r3, #0]
                        data[0] = (5 << 5) | SDO_BCS_START_UPLOAD;
 8009852:	23a3      	movs	r3, #163	; 0xa3
 8009854:	733b      	strb	r3, [r7, #12]
					    for (i = 1 ; i < 8 ; i++)
 8009856:	2301      	movs	r3, #1
 8009858:	63fb      	str	r3, [r7, #60]	; 0x3c
 800985a:	e008      	b.n	800986e <proceedSDO+0x2e8a>
						    data[i] = 0;
 800985c:	f107 020c 	add.w	r2, r7, #12
 8009860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009862:	4413      	add	r3, r2
 8009864:	2200      	movs	r2, #0
 8009866:	701a      	strb	r2, [r3, #0]
					    for (i = 1 ; i < 8 ; i++)
 8009868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800986a:	3301      	adds	r3, #1
 800986c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800986e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009870:	2b07      	cmp	r3, #7
 8009872:	d9f3      	bls.n	800985c <proceedSDO+0x2e78>
					    sendSDO(d, whoami, CliServNbr, data);
 8009874:	f107 030c 	add.w	r3, r7, #12
 8009878:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800987c:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f7fc ffdd 	bl	8006840 <sendSDO>
			break;
 8009886:	e24b      	b.n	8009d20 <proceedSDO+0x333c>
				else if (d->transfers[line].rxstep == RXSTEP_STARTED) {
 8009888:	7efb      	ldrb	r3, [r7, #27]
 800988a:	4619      	mov	r1, r3
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	2354      	movs	r3, #84	; 0x54
 8009890:	fb03 f301 	mul.w	r3, r3, r1
 8009894:	4413      	add	r3, r2
 8009896:	336a      	adds	r3, #106	; 0x6a
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	2b01      	cmp	r3, #1
 800989c:	f040 80e8 	bne.w	8009a70 <proceedSDO+0x308c>
					SeqNo = m->data[0] & 0x7F;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	791b      	ldrb	r3, [r3, #4]
 80098a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					if (m->data[0] & 0x80) {	/* Last segment ? */
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	791b      	ldrb	r3, [r3, #4]
 80098b0:	b25b      	sxtb	r3, r3
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	da5d      	bge.n	8009972 <proceedSDO+0x2f8e>
					    if(SeqNo == (d->transfers[line].seqno + 1)) {
 80098b6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80098ba:	7efb      	ldrb	r3, [r7, #27]
 80098bc:	4618      	mov	r0, r3
 80098be:	6879      	ldr	r1, [r7, #4]
 80098c0:	2354      	movs	r3, #84	; 0x54
 80098c2:	fb03 f300 	mul.w	r3, r3, r0
 80098c6:	440b      	add	r3, r1
 80098c8:	3368      	adds	r3, #104	; 0x68
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	3301      	adds	r3, #1
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d123      	bne.n	800991a <proceedSDO+0x2f36>
							d->transfers[line].rxstep = RXSTEP_END;
 80098d2:	7efb      	ldrb	r3, [r7, #27]
 80098d4:	4619      	mov	r1, r3
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	2354      	movs	r3, #84	; 0x54
 80098da:	fb03 f301 	mul.w	r3, r3, r1
 80098de:	4413      	add	r3, r2
 80098e0:	336a      	adds	r3, #106	; 0x6a
 80098e2:	2202      	movs	r2, #2
 80098e4:	701a      	strb	r2, [r3, #0]
							d->transfers[line].seqno = SeqNo;
 80098e6:	7efb      	ldrb	r3, [r7, #27]
 80098e8:	4619      	mov	r1, r3
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	2354      	movs	r3, #84	; 0x54
 80098ee:	fb03 f301 	mul.w	r3, r3, r1
 80098f2:	4413      	add	r3, r2
 80098f4:	3368      	adds	r3, #104	; 0x68
 80098f6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80098fa:	701a      	strb	r2, [r3, #0]
							memcpy(d->transfers[line].tmpData, m->data, 8);
 80098fc:	7efb      	ldrb	r3, [r7, #27]
 80098fe:	461a      	mov	r2, r3
 8009900:	2354      	movs	r3, #84	; 0x54
 8009902:	fb03 f302 	mul.w	r3, r3, r2
 8009906:	3368      	adds	r3, #104	; 0x68
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	4413      	add	r3, r2
 800990c:	1cd8      	adds	r0, r3, #3
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	3304      	adds	r3, #4
 8009912:	2208      	movs	r2, #8
 8009914:	4619      	mov	r1, r3
 8009916:	f002 ff62 	bl	800c7de <memcpy>
						data[0] = (5 << 5) | SDO_BCS_UPLOAD_RESPONSE;
 800991a:	23a2      	movs	r3, #162	; 0xa2
 800991c:	733b      	strb	r3, [r7, #12]
						data[1] = d->transfers[line].seqno;
 800991e:	7efb      	ldrb	r3, [r7, #27]
 8009920:	4619      	mov	r1, r3
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	2354      	movs	r3, #84	; 0x54
 8009926:	fb03 f301 	mul.w	r3, r3, r1
 800992a:	4413      	add	r3, r2
 800992c:	3368      	adds	r3, #104	; 0x68
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	737b      	strb	r3, [r7, #13]
						data[2] = SDO_BLOCK_SIZE;
 8009932:	2310      	movs	r3, #16
 8009934:	73bb      	strb	r3, [r7, #14]
						data[3] = data[4] = data[5] = data[6] = data[7] = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	74fb      	strb	r3, [r7, #19]
 800993a:	7cfb      	ldrb	r3, [r7, #19]
 800993c:	74bb      	strb	r3, [r7, #18]
 800993e:	7cbb      	ldrb	r3, [r7, #18]
 8009940:	747b      	strb	r3, [r7, #17]
 8009942:	7c7b      	ldrb	r3, [r7, #17]
 8009944:	743b      	strb	r3, [r7, #16]
 8009946:	7c3b      	ldrb	r3, [r7, #16]
 8009948:	73fb      	strb	r3, [r7, #15]
						sendSDO(d, whoami, CliServNbr, data);
 800994a:	f107 030c 	add.w	r3, r7, #12
 800994e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8009952:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7fc ff72 	bl	8006840 <sendSDO>
                        d->transfers[line].seqno = 0;
 800995c:	7efb      	ldrb	r3, [r7, #27]
 800995e:	4619      	mov	r1, r3
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	2354      	movs	r3, #84	; 0x54
 8009964:	fb03 f301 	mul.w	r3, r3, r1
 8009968:	4413      	add	r3, r2
 800996a:	3368      	adds	r3, #104	; 0x68
 800996c:	2200      	movs	r2, #0
 800996e:	701a      	strb	r2, [r3, #0]
			break;
 8009970:	e1d6      	b.n	8009d20 <proceedSDO+0x333c>
					   	if (SeqNo == (d->transfers[line].seqno + 1)) {	
 8009972:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009976:	7efb      	ldrb	r3, [r7, #27]
 8009978:	4618      	mov	r0, r3
 800997a:	6879      	ldr	r1, [r7, #4]
 800997c:	2354      	movs	r3, #84	; 0x54
 800997e:	fb03 f300 	mul.w	r3, r3, r0
 8009982:	440b      	add	r3, r1
 8009984:	3368      	adds	r3, #104	; 0x68
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	3301      	adds	r3, #1
 800998a:	429a      	cmp	r2, r3
 800998c:	d13a      	bne.n	8009a04 <proceedSDO+0x3020>
							d->transfers[line].seqno = SeqNo;
 800998e:	7efb      	ldrb	r3, [r7, #27]
 8009990:	4619      	mov	r1, r3
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	2354      	movs	r3, #84	; 0x54
 8009996:	fb03 f301 	mul.w	r3, r3, r1
 800999a:	4413      	add	r3, r2
 800999c:	3368      	adds	r3, #104	; 0x68
 800999e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80099a2:	701a      	strb	r2, [r3, #0]
							err = SDOtoLine(d, line, 7, (*m).data + 1);
 80099a4:	7ef9      	ldrb	r1, [r7, #27]
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	3304      	adds	r3, #4
 80099aa:	3301      	adds	r3, #1
 80099ac:	2207      	movs	r2, #7
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f7fc fc72 	bl	8006298 <SDOtoLine>
 80099b4:	4603      	mov	r3, r0
 80099b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (err) {
 80099ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d020      	beq.n	8009a04 <proceedSDO+0x3020>
								failedSDO(d, CliServNbr, whoami, d->transfers[line].index,  d->transfers[line].subIndex, SDOABT_GENERAL_ERROR);
 80099c2:	7efb      	ldrb	r3, [r7, #27]
 80099c4:	4619      	mov	r1, r3
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	2354      	movs	r3, #84	; 0x54
 80099ca:	fb03 f301 	mul.w	r3, r3, r1
 80099ce:	4413      	add	r3, r2
 80099d0:	3330      	adds	r3, #48	; 0x30
 80099d2:	881c      	ldrh	r4, [r3, #0]
 80099d4:	7efb      	ldrb	r3, [r7, #27]
 80099d6:	4619      	mov	r1, r3
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	2354      	movs	r3, #84	; 0x54
 80099dc:	fb03 f301 	mul.w	r3, r3, r1
 80099e0:	4413      	add	r3, r2
 80099e2:	3332      	adds	r3, #50	; 0x32
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	f897 0043 	ldrb.w	r0, [r7, #67]	; 0x43
 80099ea:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80099ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80099f2:	9201      	str	r2, [sp, #4]
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	4623      	mov	r3, r4
 80099f8:	4602      	mov	r2, r0
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f7fc fcb0 	bl	8006360 <failedSDO>
								return 0xFF;
 8009a00:	23ff      	movs	r3, #255	; 0xff
 8009a02:	e18f      	b.n	8009d24 <proceedSDO+0x3340>
						if (SeqNo == SDO_BLOCK_SIZE) {
 8009a04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a08:	2b10      	cmp	r3, #16
 8009a0a:	f040 8189 	bne.w	8009d20 <proceedSDO+0x333c>
							data[0] = (5 << 5) | SDO_BCS_UPLOAD_RESPONSE;
 8009a0e:	23a2      	movs	r3, #162	; 0xa2
 8009a10:	733b      	strb	r3, [r7, #12]
							data[1] = d->transfers[line].seqno;
 8009a12:	7efb      	ldrb	r3, [r7, #27]
 8009a14:	4619      	mov	r1, r3
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	2354      	movs	r3, #84	; 0x54
 8009a1a:	fb03 f301 	mul.w	r3, r3, r1
 8009a1e:	4413      	add	r3, r2
 8009a20:	3368      	adds	r3, #104	; 0x68
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	737b      	strb	r3, [r7, #13]
							data[2] = SDO_BLOCK_SIZE;
 8009a26:	2310      	movs	r3, #16
 8009a28:	73bb      	strb	r3, [r7, #14]
							data[3] = data[4] = data[5] = data[6] = data[7] = 0;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	74fb      	strb	r3, [r7, #19]
 8009a2e:	7cfb      	ldrb	r3, [r7, #19]
 8009a30:	74bb      	strb	r3, [r7, #18]
 8009a32:	7cbb      	ldrb	r3, [r7, #18]
 8009a34:	747b      	strb	r3, [r7, #17]
 8009a36:	7c7b      	ldrb	r3, [r7, #17]
 8009a38:	743b      	strb	r3, [r7, #16]
 8009a3a:	7c3b      	ldrb	r3, [r7, #16]
 8009a3c:	73fb      	strb	r3, [r7, #15]
							sendSDO(d, whoami, CliServNbr, data);
 8009a3e:	f107 030c 	add.w	r3, r7, #12
 8009a42:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8009a46:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7fc fef8 	bl	8006840 <sendSDO>
                            d->transfers[line].seqno = 0;
 8009a50:	7efb      	ldrb	r3, [r7, #27]
 8009a52:	4619      	mov	r1, r3
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	2354      	movs	r3, #84	; 0x54
 8009a58:	fb03 f301 	mul.w	r3, r3, r1
 8009a5c:	4413      	add	r3, r2
 8009a5e:	3368      	adds	r3, #104	; 0x68
 8009a60:	2200      	movs	r2, #0
 8009a62:	701a      	strb	r2, [r3, #0]
			break;
 8009a64:	e15c      	b.n	8009d20 <proceedSDO+0x333c>
 8009a66:	bf00      	nop
 8009a68:	000493e0 	.word	0x000493e0
 8009a6c:	08005ead 	.word	0x08005ead
				else if (d->transfers[line].rxstep == RXSTEP_END) { /* endphase */
 8009a70:	7efb      	ldrb	r3, [r7, #27]
 8009a72:	4619      	mov	r1, r3
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	2354      	movs	r3, #84	; 0x54
 8009a78:	fb03 f301 	mul.w	r3, r3, r1
 8009a7c:	4413      	add	r3, r2
 8009a7e:	336a      	adds	r3, #106	; 0x6a
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	f040 814c 	bne.w	8009d20 <proceedSDO+0x333c>
					if ((m->data[0] & 1) != SDO_BSS_END_UPLOAD_RESPONSE) {
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	791b      	ldrb	r3, [r3, #4]
 8009a8c:	f003 0301 	and.w	r3, r3, #1
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d11a      	bne.n	8009aca <proceedSDO+0x30e6>
			    		MSG_ERR(0x1AAD, "SDO error block upload : Received wrong subcommand from node id ", nodeId);
 8009a94:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009a98:	9301      	str	r3, [sp, #4]
 8009a9a:	4ba4      	ldr	r3, [pc, #656]	; (8009d2c <proceedSDO+0x3348>)
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	f641 23ad 	movw	r3, #6829	; 0x1aad
 8009aa2:	f240 62fa 	movw	r2, #1786	; 0x6fa
 8009aa6:	49a2      	ldr	r1, [pc, #648]	; (8009d30 <proceedSDO+0x334c>)
 8009aa8:	48a2      	ldr	r0, [pc, #648]	; (8009d34 <proceedSDO+0x3350>)
 8009aaa:	f002 feab 	bl	800c804 <iprintf>
    					failedSDO(d, CliServNbr, whoami, 0, 0, SDOABT_LOCAL_CTRL_ERROR);
 8009aae:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009ab2:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8009ab6:	4ba0      	ldr	r3, [pc, #640]	; (8009d38 <proceedSDO+0x3354>)
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	2300      	movs	r3, #0
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	2300      	movs	r3, #0
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7fc fc4d 	bl	8006360 <failedSDO>
	    				return 0xFF;
 8009ac6:	23ff      	movs	r3, #255	; 0xff
 8009ac8:	e12c      	b.n	8009d24 <proceedSDO+0x3340>
					NbBytesNoData = (UNS8)((m->data[0]>>2) & 0x07);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	791b      	ldrb	r3, [r3, #4]
 8009ace:	089b      	lsrs	r3, r3, #2
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	f003 0307 	and.w	r3, r3, #7
 8009ad6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					err = SDOtoLine(d, line, 7-NbBytesNoData, d->transfers[line].tmpData + 1);
 8009ada:	7ef9      	ldrb	r1, [r7, #27]
 8009adc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009ae0:	f1c3 0307 	rsb	r3, r3, #7
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	7efb      	ldrb	r3, [r7, #27]
 8009ae8:	461a      	mov	r2, r3
 8009aea:	2354      	movs	r3, #84	; 0x54
 8009aec:	fb03 f302 	mul.w	r3, r3, r2
 8009af0:	3368      	adds	r3, #104	; 0x68
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	4413      	add	r3, r2
 8009af6:	3303      	adds	r3, #3
 8009af8:	3301      	adds	r3, #1
 8009afa:	4602      	mov	r2, r0
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7fc fbcb 	bl	8006298 <SDOtoLine>
 8009b02:	4603      	mov	r3, r0
 8009b04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					if (err) {
 8009b08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d020      	beq.n	8009b52 <proceedSDO+0x316e>
						failedSDO(d, CliServNbr, whoami, d->transfers[line].index,  d->transfers[line].subIndex, SDOABT_GENERAL_ERROR);
 8009b10:	7efb      	ldrb	r3, [r7, #27]
 8009b12:	4619      	mov	r1, r3
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	2354      	movs	r3, #84	; 0x54
 8009b18:	fb03 f301 	mul.w	r3, r3, r1
 8009b1c:	4413      	add	r3, r2
 8009b1e:	3330      	adds	r3, #48	; 0x30
 8009b20:	881c      	ldrh	r4, [r3, #0]
 8009b22:	7efb      	ldrb	r3, [r7, #27]
 8009b24:	4619      	mov	r1, r3
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	2354      	movs	r3, #84	; 0x54
 8009b2a:	fb03 f301 	mul.w	r3, r3, r1
 8009b2e:	4413      	add	r3, r2
 8009b30:	3332      	adds	r3, #50	; 0x32
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	f897 0043 	ldrb.w	r0, [r7, #67]	; 0x43
 8009b38:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8009b3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009b40:	9201      	str	r2, [sp, #4]
 8009b42:	9300      	str	r3, [sp, #0]
 8009b44:	4623      	mov	r3, r4
 8009b46:	4602      	mov	r2, r0
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f7fc fc09 	bl	8006360 <failedSDO>
						return 0xFF;
 8009b4e:	23ff      	movs	r3, #255	; 0xff
 8009b50:	e0e8      	b.n	8009d24 <proceedSDO+0x3340>
					if(d->transfers[line].objsize){ /* If size was indicated in the initiate request */
 8009b52:	7efb      	ldrb	r3, [r7, #27]
 8009b54:	4619      	mov	r1, r3
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	2354      	movs	r3, #84	; 0x54
 8009b5a:	fb03 f301 	mul.w	r3, r3, r1
 8009b5e:	4413      	add	r3, r2
 8009b60:	3360      	adds	r3, #96	; 0x60
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d040      	beq.n	8009bea <proceedSDO+0x3206>
						if (d->transfers[line].objsize != d->transfers[line].offset){
 8009b68:	7efb      	ldrb	r3, [r7, #27]
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	2354      	movs	r3, #84	; 0x54
 8009b70:	fb03 f301 	mul.w	r3, r3, r1
 8009b74:	4413      	add	r3, r2
 8009b76:	3360      	adds	r3, #96	; 0x60
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	7efb      	ldrb	r3, [r7, #27]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	6879      	ldr	r1, [r7, #4]
 8009b80:	2354      	movs	r3, #84	; 0x54
 8009b82:	fb03 f300 	mul.w	r3, r3, r0
 8009b86:	440b      	add	r3, r1
 8009b88:	3338      	adds	r3, #56	; 0x38
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d02c      	beq.n	8009bea <proceedSDO+0x3206>
			    				MSG_ERR(0x1AAE, "SDO error block download : sizes do not match - from node id ", nodeId);
 8009b90:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009b94:	9301      	str	r3, [sp, #4]
 8009b96:	4b69      	ldr	r3, [pc, #420]	; (8009d3c <proceedSDO+0x3358>)
 8009b98:	9300      	str	r3, [sp, #0]
 8009b9a:	f641 23ae 	movw	r3, #6830	; 0x1aae
 8009b9e:	f240 7207 	movw	r2, #1799	; 0x707
 8009ba2:	4963      	ldr	r1, [pc, #396]	; (8009d30 <proceedSDO+0x334c>)
 8009ba4:	4863      	ldr	r0, [pc, #396]	; (8009d34 <proceedSDO+0x3350>)
 8009ba6:	f002 fe2d 	bl	800c804 <iprintf>
    							failedSDO(d, CliServNbr, whoami, d->transfers[line].index, d->transfers[line].subIndex, SDOABT_LOCAL_CTRL_ERROR);
 8009baa:	7efb      	ldrb	r3, [r7, #27]
 8009bac:	4619      	mov	r1, r3
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	2354      	movs	r3, #84	; 0x54
 8009bb2:	fb03 f301 	mul.w	r3, r3, r1
 8009bb6:	4413      	add	r3, r2
 8009bb8:	3330      	adds	r3, #48	; 0x30
 8009bba:	881c      	ldrh	r4, [r3, #0]
 8009bbc:	7efb      	ldrb	r3, [r7, #27]
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	2354      	movs	r3, #84	; 0x54
 8009bc4:	fb03 f301 	mul.w	r3, r3, r1
 8009bc8:	4413      	add	r3, r2
 8009bca:	3332      	adds	r3, #50	; 0x32
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	f897 0043 	ldrb.w	r0, [r7, #67]	; 0x43
 8009bd2:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8009bd6:	4a58      	ldr	r2, [pc, #352]	; (8009d38 <proceedSDO+0x3354>)
 8009bd8:	9201      	str	r2, [sp, #4]
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	4623      	mov	r3, r4
 8009bde:	4602      	mov	r2, r0
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f7fc fbbd 	bl	8006360 <failedSDO>
	    						return 0xFF;
 8009be6:	23ff      	movs	r3, #255	; 0xff
 8009be8:	e09c      	b.n	8009d24 <proceedSDO+0x3340>
					data[0] = (5 << 5) | SDO_BCS_END_UPLOAD_REQUEST;
 8009bea:	23a1      	movs	r3, #161	; 0xa1
 8009bec:	733b      	strb	r3, [r7, #12]
					for (i = 1 ; i < 8 ; i++)
 8009bee:	2301      	movs	r3, #1
 8009bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bf2:	e008      	b.n	8009c06 <proceedSDO+0x3222>
						data[i] = 0;
 8009bf4:	f107 020c 	add.w	r2, r7, #12
 8009bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bfa:	4413      	add	r3, r2
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	701a      	strb	r2, [r3, #0]
					for (i = 1 ; i < 8 ; i++)
 8009c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c02:	3301      	adds	r3, #1
 8009c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c08:	2b07      	cmp	r3, #7
 8009c0a:	d9f3      	bls.n	8009bf4 <proceedSDO+0x3210>
					sendSDO(d, whoami, CliServNbr, data);
 8009c0c:	f107 030c 	add.w	r3, r7, #12
 8009c10:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8009c14:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f7fc fe11 	bl	8006840 <sendSDO>
                    StopSDO_TIMER(line)
 8009c1e:	7efb      	ldrb	r3, [r7, #27]
 8009c20:	4619      	mov	r1, r3
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	2354      	movs	r3, #84	; 0x54
 8009c26:	fb03 f301 	mul.w	r3, r3, r1
 8009c2a:	4413      	add	r3, r2
 8009c2c:	3374      	adds	r3, #116	; 0x74
 8009c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c32:	7efa      	ldrb	r2, [r7, #27]
 8009c34:	4614      	mov	r4, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f001 f870 	bl	800ad1c <DelAlarm>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	4619      	mov	r1, r3
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	2354      	movs	r3, #84	; 0x54
 8009c44:	fb03 f304 	mul.w	r3, r3, r4
 8009c48:	4413      	add	r3, r2
 8009c4a:	3374      	adds	r3, #116	; 0x74
 8009c4c:	460a      	mov	r2, r1
 8009c4e:	801a      	strh	r2, [r3, #0]
					d->transfers[line].state = SDO_FINISHED;
 8009c50:	7efb      	ldrb	r3, [r7, #27]
 8009c52:	4619      	mov	r1, r3
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	2354      	movs	r3, #84	; 0x54
 8009c58:	fb03 f301 	mul.w	r3, r3, r1
 8009c5c:	4413      	add	r3, r2
 8009c5e:	332a      	adds	r3, #42	; 0x2a
 8009c60:	2201      	movs	r2, #1
 8009c62:	701a      	strb	r2, [r3, #0]
				    if(d->transfers[line].Callback) (*d->transfers[line].Callback)(d,nodeId);
 8009c64:	7efb      	ldrb	r3, [r7, #27]
 8009c66:	4619      	mov	r1, r3
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	2354      	movs	r3, #84	; 0x54
 8009c6c:	fb03 f301 	mul.w	r3, r3, r1
 8009c70:	4413      	add	r3, r2
 8009c72:	3378      	adds	r3, #120	; 0x78
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d052      	beq.n	8009d20 <proceedSDO+0x333c>
 8009c7a:	7efb      	ldrb	r3, [r7, #27]
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	2354      	movs	r3, #84	; 0x54
 8009c82:	fb03 f301 	mul.w	r3, r3, r1
 8009c86:	4413      	add	r3, r2
 8009c88:	3378      	adds	r3, #120	; 0x78
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009c90:	4611      	mov	r1, r2
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	4798      	blx	r3
			break;
 8009c96:	e043      	b.n	8009d20 <proceedSDO+0x333c>
		default:
			/* Error : Unknown cs */
			if (!err)
 8009c98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d11e      	bne.n	8009cde <proceedSDO+0x32fa>
				failedSDO(d, CliServNbr, whoami, d->transfers[line].index,  d->transfers[line].subIndex, SDOABT_CS_NOT_VALID);
 8009ca0:	7efb      	ldrb	r3, [r7, #27]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	2354      	movs	r3, #84	; 0x54
 8009ca8:	fb03 f301 	mul.w	r3, r3, r1
 8009cac:	4413      	add	r3, r2
 8009cae:	3330      	adds	r3, #48	; 0x30
 8009cb0:	881c      	ldrh	r4, [r3, #0]
 8009cb2:	7efb      	ldrb	r3, [r7, #27]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	2354      	movs	r3, #84	; 0x54
 8009cba:	fb03 f301 	mul.w	r3, r3, r1
 8009cbe:	4413      	add	r3, r2
 8009cc0:	3332      	adds	r3, #50	; 0x32
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	f897 0043 	ldrb.w	r0, [r7, #67]	; 0x43
 8009cc8:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8009ccc:	4a1c      	ldr	r2, [pc, #112]	; (8009d40 <proceedSDO+0x335c>)
 8009cce:	9201      	str	r2, [sp, #4]
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	4623      	mov	r3, r4
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7fc fb42 	bl	8006360 <failedSDO>
 8009cdc:	e00b      	b.n	8009cf6 <proceedSDO+0x3312>
			else
				failedSDO(d, CliServNbr, whoami, 0,  0, SDOABT_CS_NOT_VALID);
 8009cde:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009ce2:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8009ce6:	4b16      	ldr	r3, [pc, #88]	; (8009d40 <proceedSDO+0x335c>)
 8009ce8:	9301      	str	r3, [sp, #4]
 8009cea:	2300      	movs	r3, #0
 8009cec:	9300      	str	r3, [sp, #0]
 8009cee:	2300      	movs	r3, #0
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f7fc fb35 	bl	8006360 <failedSDO>
			MSG_ERR(0x1AB2, "SDO. Received unknown command specifier : ", cs);
 8009cf6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009cfa:	9301      	str	r3, [sp, #4]
 8009cfc:	4b11      	ldr	r3, [pc, #68]	; (8009d44 <proceedSDO+0x3360>)
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	f641 23b2 	movw	r3, #6834	; 0x1ab2
 8009d04:	f240 721e 	movw	r2, #1822	; 0x71e
 8009d08:	4909      	ldr	r1, [pc, #36]	; (8009d30 <proceedSDO+0x334c>)
 8009d0a:	480a      	ldr	r0, [pc, #40]	; (8009d34 <proceedSDO+0x3350>)
 8009d0c:	f002 fd7a 	bl	800c804 <iprintf>
			return 0xFF;
 8009d10:	23ff      	movs	r3, #255	; 0xff
 8009d12:	e007      	b.n	8009d24 <proceedSDO+0x3340>
			break;
 8009d14:	bf00      	nop
 8009d16:	e004      	b.n	8009d22 <proceedSDO+0x333e>
			break;
 8009d18:	bf00      	nop
 8009d1a:	e002      	b.n	8009d22 <proceedSDO+0x333e>
			break;
 8009d1c:	bf00      	nop
 8009d1e:	e000      	b.n	8009d22 <proceedSDO+0x333e>
			break;
 8009d20:	bf00      	nop

	} /* End switch */
	return 0;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	374c      	adds	r7, #76	; 0x4c
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd90      	pop	{r4, r7, pc}
 8009d2c:	0800e61c 	.word	0x0800e61c
 8009d30:	0800dec8 	.word	0x0800dec8
 8009d34:	0800deec 	.word	0x0800deec
 8009d38:	08000021 	.word	0x08000021
 8009d3c:	0800e660 	.word	0x0800e660
 8009d40:	05040001 	.word	0x05040001
 8009d44:	0800e6a0 	.word	0x0800e6a0

08009d48 <GetSDOClientFromNodeId>:
 ** 	0xFF : No SDO client available
 **     0xFE : Not found
 **     otherwise : SDO client number
 **/
UNS8 GetSDOClientFromNodeId( CO_Data* d, UNS8 nodeId )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af02      	add	r7, sp, #8
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	70fb      	strb	r3, [r7, #3]
	UNS8 SDOfound = 0;
 8009d54:	2300      	movs	r3, #0
 8009d56:	73fb      	strb	r3, [r7, #15]
	UNS8 CliNbr;
	UNS16 lastIndex;
	UNS16 offset;
	UNS8 nodeIdServer;

	offset = d->firstIndex->SDO_CLT;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	695b      	ldr	r3, [r3, #20]
 8009d5c:	885b      	ldrh	r3, [r3, #2]
 8009d5e:	81bb      	strh	r3, [r7, #12]
	lastIndex = d->lastIndex->SDO_CLT;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	885b      	ldrh	r3, [r3, #2]
 8009d66:	817b      	strh	r3, [r7, #10]
	if (offset == 0) {
 8009d68:	89bb      	ldrh	r3, [r7, #12]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d10d      	bne.n	8009d8a <GetSDOClientFromNodeId+0x42>
		MSG_ERR(0x1AC6, "No SDO client index found for nodeId ", nodeId);
 8009d6e:	78fb      	ldrb	r3, [r7, #3]
 8009d70:	9301      	str	r3, [sp, #4]
 8009d72:	4b26      	ldr	r3, [pc, #152]	; (8009e0c <GetSDOClientFromNodeId+0xc4>)
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	f641 23c6 	movw	r3, #6854	; 0x1ac6
 8009d7a:	f240 723c 	movw	r2, #1852	; 0x73c
 8009d7e:	4924      	ldr	r1, [pc, #144]	; (8009e10 <GetSDOClientFromNodeId+0xc8>)
 8009d80:	4824      	ldr	r0, [pc, #144]	; (8009e14 <GetSDOClientFromNodeId+0xcc>)
 8009d82:	f002 fd3f 	bl	800c804 <iprintf>
		return 0xFF;
 8009d86:	23ff      	movs	r3, #255	; 0xff
 8009d88:	e03b      	b.n	8009e02 <GetSDOClientFromNodeId+0xba>
	}
	CliNbr = 0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	73bb      	strb	r3, [r7, #14]
	while (offset <= lastIndex) {
 8009d8e:	e02e      	b.n	8009dee <GetSDOClientFromNodeId+0xa6>
		if (d->objdict[offset].bSubCount <= 3) {
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685a      	ldr	r2, [r3, #4]
 8009d94:	89bb      	ldrh	r3, [r7, #12]
 8009d96:	00db      	lsls	r3, r3, #3
 8009d98:	4413      	add	r3, r2
 8009d9a:	791b      	ldrb	r3, [r3, #4]
 8009d9c:	2b03      	cmp	r3, #3
 8009d9e:	d80f      	bhi.n	8009dc0 <GetSDOClientFromNodeId+0x78>
			MSG_ERR(0x1AC8, "Subindex 3  not found at index ", 0x1280 + CliNbr);
 8009da0:	7bbb      	ldrb	r3, [r7, #14]
 8009da2:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 8009da6:	9301      	str	r3, [sp, #4]
 8009da8:	4b1b      	ldr	r3, [pc, #108]	; (8009e18 <GetSDOClientFromNodeId+0xd0>)
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	f641 23c8 	movw	r3, #6856	; 0x1ac8
 8009db0:	f240 7242 	movw	r2, #1858	; 0x742
 8009db4:	4916      	ldr	r1, [pc, #88]	; (8009e10 <GetSDOClientFromNodeId+0xc8>)
 8009db6:	4817      	ldr	r0, [pc, #92]	; (8009e14 <GetSDOClientFromNodeId+0xcc>)
 8009db8:	f002 fd24 	bl	800c804 <iprintf>
			return 0xFF;
 8009dbc:	23ff      	movs	r3, #255	; 0xff
 8009dbe:	e020      	b.n	8009e02 <GetSDOClientFromNodeId+0xba>
		}
		/* looking for the server nodeId */
		nodeIdServer = *((UNS8*) d->objdict[offset].pSubindex[3].pObject);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685a      	ldr	r2, [r3, #4]
 8009dc4:	89bb      	ldrh	r3, [r7, #12]
 8009dc6:	00db      	lsls	r3, r3, #3
 8009dc8:	4413      	add	r3, r2
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	3330      	adds	r3, #48	; 0x30
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	727b      	strb	r3, [r7, #9]
		MSG_WAR(0x1AD2, "index : ", 0x1280 + CliNbr);
		MSG_WAR(0x1AD3, "nodeIdServer : ", nodeIdServer);

		if(nodeIdServer == nodeId) {
 8009dd4:	7a7a      	ldrb	r2, [r7, #9]
 8009dd6:	78fb      	ldrb	r3, [r7, #3]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d102      	bne.n	8009de2 <GetSDOClientFromNodeId+0x9a>
			SDOfound = 1;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	73fb      	strb	r3, [r7, #15]
			break;
 8009de0:	e009      	b.n	8009df6 <GetSDOClientFromNodeId+0xae>
		}
		offset++;
 8009de2:	89bb      	ldrh	r3, [r7, #12]
 8009de4:	3301      	adds	r3, #1
 8009de6:	81bb      	strh	r3, [r7, #12]
		CliNbr++;
 8009de8:	7bbb      	ldrb	r3, [r7, #14]
 8009dea:	3301      	adds	r3, #1
 8009dec:	73bb      	strb	r3, [r7, #14]
	while (offset <= lastIndex) {
 8009dee:	89ba      	ldrh	r2, [r7, #12]
 8009df0:	897b      	ldrh	r3, [r7, #10]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d9cc      	bls.n	8009d90 <GetSDOClientFromNodeId+0x48>
	} /* end while */
	if (!SDOfound) {
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d101      	bne.n	8009e00 <GetSDOClientFromNodeId+0xb8>
		MSG_WAR(0x1AC9, "SDO No preset client found to communicate with node : ", nodeId);
		return 0xFE;
 8009dfc:	23fe      	movs	r3, #254	; 0xfe
 8009dfe:	e000      	b.n	8009e02 <GetSDOClientFromNodeId+0xba>
	}
	MSG_WAR(0x3AD0,"        SDO client defined at index  : ", 0x1280 + CliNbr);

	return CliNbr;
 8009e00:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	0800e6cc 	.word	0x0800e6cc
 8009e10:	0800dec8 	.word	0x0800dec8
 8009e14:	0800deec 	.word	0x0800deec
 8009e18:	0800e018 	.word	0x0800e018

08009e1c <_writeNetworkDict>:
 **
 ** @return
 **/
INLINE UNS8 _writeNetworkDict (CO_Data* d, UNS8 nodeId, UNS16 index,
		UNS8 subIndex, UNS32 count, UNS8 dataType, void *data, SDOCallback_t Callback, UNS8 endianize, UNS8 useBlockMode)
{
 8009e1c:	b590      	push	{r4, r7, lr}
 8009e1e:	b089      	sub	sp, #36	; 0x24
 8009e20:	af02      	add	r7, sp, #8
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	4608      	mov	r0, r1
 8009e26:	4611      	mov	r1, r2
 8009e28:	461a      	mov	r2, r3
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	70fb      	strb	r3, [r7, #3]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	803b      	strh	r3, [r7, #0]
 8009e32:	4613      	mov	r3, r2
 8009e34:	70bb      	strb	r3, [r7, #2]
	MSG_WAR(0x3AC2, "                                   subIndex : ", subIndex);
	MSG_WAR(0x3AC3, "                                   nb bytes : ", count);

	/* Check that the data can fit in the transfer buffer */
#ifndef SDO_DYNAMIC_BUFFER_ALLOCATION
	if(count > SDO_MAX_LENGTH_TRANSFER){
 8009e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e38:	2b20      	cmp	r3, #32
 8009e3a:	d90d      	bls.n	8009e58 <_writeNetworkDict+0x3c>
		MSG_ERR(0x1AC3, "SDO error : request for more than SDO_MAX_LENGTH_TRANSFER bytes to transfer to node : ", nodeId);
 8009e3c:	78fb      	ldrb	r3, [r7, #3]
 8009e3e:	9301      	str	r3, [sp, #4]
 8009e40:	4b9f      	ldr	r3, [pc, #636]	; (800a0c0 <_writeNetworkDict+0x2a4>)
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	f641 23c3 	movw	r3, #6851	; 0x1ac3
 8009e48:	f240 7292 	movw	r2, #1938	; 0x792
 8009e4c:	499d      	ldr	r1, [pc, #628]	; (800a0c4 <_writeNetworkDict+0x2a8>)
 8009e4e:	489e      	ldr	r0, [pc, #632]	; (800a0c8 <_writeNetworkDict+0x2ac>)
 8009e50:	f002 fcd8 	bl	800c804 <iprintf>
		return 0xFF;
 8009e54:	23ff      	movs	r3, #255	; 0xff
 8009e56:	e12e      	b.n	800a0b6 <_writeNetworkDict+0x29a>
	}
#endif

	/* First let's find the corresponding SDO client in our OD  */
	CliNbr = GetSDOClientFromNodeId( d, nodeId);
 8009e58:	78fb      	ldrb	r3, [r7, #3]
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7ff ff73 	bl	8009d48 <GetSDOClientFromNodeId>
 8009e62:	4603      	mov	r3, r0
 8009e64:	74bb      	strb	r3, [r7, #18]
	if(CliNbr >= 0xFE)
 8009e66:	7cbb      	ldrb	r3, [r7, #18]
 8009e68:	2bfd      	cmp	r3, #253	; 0xfd
 8009e6a:	d901      	bls.n	8009e70 <_writeNetworkDict+0x54>
		return CliNbr;
 8009e6c:	7cbb      	ldrb	r3, [r7, #18]
 8009e6e:	e122      	b.n	800a0b6 <_writeNetworkDict+0x29a>
	/* Verify that there is no SDO communication yet. */
	err = getSDOlineOnUse(d, CliNbr, SDO_CLIENT, &line);
 8009e70:	f107 0310 	add.w	r3, r7, #16
 8009e74:	7cb9      	ldrb	r1, [r7, #18]
 8009e76:	2202      	movs	r2, #2
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f7fc fc3d 	bl	80066f8 <getSDOlineOnUse>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	747b      	strb	r3, [r7, #17]
	if (!err) {
 8009e82:	7c7b      	ldrb	r3, [r7, #17]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10d      	bne.n	8009ea4 <_writeNetworkDict+0x88>
		MSG_ERR(0x1AC4, "SDO error : Communication yet established. with node : ", nodeId);
 8009e88:	78fb      	ldrb	r3, [r7, #3]
 8009e8a:	9301      	str	r3, [sp, #4]
 8009e8c:	4b8f      	ldr	r3, [pc, #572]	; (800a0cc <_writeNetworkDict+0x2b0>)
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	f641 23c4 	movw	r3, #6852	; 0x1ac4
 8009e94:	f240 729e 	movw	r2, #1950	; 0x79e
 8009e98:	498a      	ldr	r1, [pc, #552]	; (800a0c4 <_writeNetworkDict+0x2a8>)
 8009e9a:	488b      	ldr	r0, [pc, #556]	; (800a0c8 <_writeNetworkDict+0x2ac>)
 8009e9c:	f002 fcb2 	bl	800c804 <iprintf>
		return 0xFF;
 8009ea0:	23ff      	movs	r3, #255	; 0xff
 8009ea2:	e108      	b.n	800a0b6 <_writeNetworkDict+0x29a>
	}
	/* Taking the line ... */
	err = getSDOfreeLine( d, SDO_CLIENT, &line );
 8009ea4:	f107 0310 	add.w	r3, r7, #16
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	2102      	movs	r1, #2
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f7fc fbe3 	bl	8006678 <getSDOfreeLine>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	747b      	strb	r3, [r7, #17]
	if (err) {
 8009eb6:	7c7b      	ldrb	r3, [r7, #17]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00d      	beq.n	8009ed8 <_writeNetworkDict+0xbc>
		MSG_ERR(0x1AC5, "SDO error : No line free, too many SDO in progress. Aborted for node : ", nodeId);
 8009ebc:	78fb      	ldrb	r3, [r7, #3]
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	4b83      	ldr	r3, [pc, #524]	; (800a0d0 <_writeNetworkDict+0x2b4>)
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	f641 23c5 	movw	r3, #6853	; 0x1ac5
 8009ec8:	f240 72a4 	movw	r2, #1956	; 0x7a4
 8009ecc:	497d      	ldr	r1, [pc, #500]	; (800a0c4 <_writeNetworkDict+0x2a8>)
 8009ece:	487e      	ldr	r0, [pc, #504]	; (800a0c8 <_writeNetworkDict+0x2ac>)
 8009ed0:	f002 fc98 	bl	800c804 <iprintf>
		return (0xFF);
 8009ed4:	23ff      	movs	r3, #255	; 0xff
 8009ed6:	e0ee      	b.n	800a0b6 <_writeNetworkDict+0x29a>
	}
	else {
		MSG_WAR(0x3AE1, "Transmission on line : ", line);
	}
    if(useBlockMode) {
 8009ed8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d015      	beq.n	8009f0c <_writeNetworkDict+0xf0>
	    initSDOline(d, line, CliNbr, index, subIndex, SDO_BLOCK_DOWNLOAD_IN_PROGRESS);
 8009ee0:	7c39      	ldrb	r1, [r7, #16]
 8009ee2:	8838      	ldrh	r0, [r7, #0]
 8009ee4:	7cba      	ldrb	r2, [r7, #18]
 8009ee6:	2304      	movs	r3, #4
 8009ee8:	9301      	str	r3, [sp, #4]
 8009eea:	78bb      	ldrb	r3, [r7, #2]
 8009eec:	9300      	str	r3, [sp, #0]
 8009eee:	4603      	mov	r3, r0
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f7fc fadb 	bl	80064ac <initSDOline>
	    d->transfers[line].objsize = count;
 8009ef6:	7c3b      	ldrb	r3, [r7, #16]
 8009ef8:	4619      	mov	r1, r3
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	2354      	movs	r3, #84	; 0x54
 8009efe:	fb03 f301 	mul.w	r3, r3, r1
 8009f02:	4413      	add	r3, r2
 8009f04:	3360      	adds	r3, #96	; 0x60
 8009f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f08:	601a      	str	r2, [r3, #0]
 8009f0a:	e00a      	b.n	8009f22 <_writeNetworkDict+0x106>
    }
    else 
	    initSDOline(d, line, CliNbr, index, subIndex, SDO_DOWNLOAD_IN_PROGRESS);
 8009f0c:	7c39      	ldrb	r1, [r7, #16]
 8009f0e:	8838      	ldrh	r0, [r7, #0]
 8009f10:	7cba      	ldrb	r2, [r7, #18]
 8009f12:	2302      	movs	r3, #2
 8009f14:	9301      	str	r3, [sp, #4]
 8009f16:	78bb      	ldrb	r3, [r7, #2]
 8009f18:	9300      	str	r3, [sp, #0]
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7fc fac5 	bl	80064ac <initSDOline>
	d->transfers[line].count = count;
 8009f22:	7c3b      	ldrb	r3, [r7, #16]
 8009f24:	4619      	mov	r1, r3
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	2354      	movs	r3, #84	; 0x54
 8009f2a:	fb03 f301 	mul.w	r3, r3, r1
 8009f2e:	4413      	add	r3, r2
 8009f30:	3334      	adds	r3, #52	; 0x34
 8009f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f34:	601a      	str	r2, [r3, #0]
	d->transfers[line].dataType = dataType;
 8009f36:	7c3b      	ldrb	r3, [r7, #16]
 8009f38:	4619      	mov	r1, r3
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	2354      	movs	r3, #84	; 0x54
 8009f3e:	fb03 f301 	mul.w	r3, r3, r1
 8009f42:	4413      	add	r3, r2
 8009f44:	3373      	adds	r3, #115	; 0x73
 8009f46:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8009f4a:	701a      	strb	r2, [r3, #0]
			lineData = d->transfers[line].dynamicData;
		}
#endif //SDO_DYNAMIC_BUFFER_ALLOCATION

		/* Copy data to transfers structure. */
		for (j = 0 ; j < count ; j++) {
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	617b      	str	r3, [r7, #20]
 8009f50:	e012      	b.n	8009f78 <_writeNetworkDict+0x15c>
		if (dataType == 0 && endianize)
			d->transfers[line].data[count - 1 - j] = ((char *)data)[j];
		else /* String of bytes. */
			d->transfers[line].data[j] = ((char *)data)[j];
#  else
		d->transfers[line].data[j] = ((char *)data)[j];
 8009f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	4413      	add	r3, r2
 8009f58:	7c3a      	ldrb	r2, [r7, #16]
 8009f5a:	4610      	mov	r0, r2
 8009f5c:	7819      	ldrb	r1, [r3, #0]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	2354      	movs	r3, #84	; 0x54
 8009f62:	fb03 f300 	mul.w	r3, r3, r0
 8009f66:	441a      	add	r2, r3
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	333c      	adds	r3, #60	; 0x3c
 8009f6e:	460a      	mov	r2, r1
 8009f70:	701a      	strb	r2, [r3, #0]
		for (j = 0 ; j < count ; j++) {
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	3301      	adds	r3, #1
 8009f76:	617b      	str	r3, [r7, #20]
 8009f78:	697a      	ldr	r2, [r7, #20]
 8009f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d3e8      	bcc.n	8009f52 <_writeNetworkDict+0x136>
#  endif
#endif //SDO_DYNAMIC_BUFFER_ALLOCATION
	}
    if(useBlockMode) {
 8009f80:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d017      	beq.n	8009fb8 <_writeNetworkDict+0x19c>
	    buf[0] = (6 << 5) | (1 << 1 );   /* CCS = 6 , CC = 0 , S = 1 , CS = 0 */
 8009f88:	23c2      	movs	r3, #194	; 0xc2
 8009f8a:	723b      	strb	r3, [r7, #8]
 	    for (i = 0 ; i < 4 ; i++)
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	74fb      	strb	r3, [r7, #19]
 8009f90:	e00e      	b.n	8009fb0 <_writeNetworkDict+0x194>
		    buf[i+4] = (UNS8)((count >> (i<<3))); /* i*8 */
 8009f92:	7cfb      	ldrb	r3, [r7, #19]
 8009f94:	00db      	lsls	r3, r3, #3
 8009f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f98:	40da      	lsrs	r2, r3
 8009f9a:	7cfb      	ldrb	r3, [r7, #19]
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	b2d2      	uxtb	r2, r2
 8009fa0:	f107 0118 	add.w	r1, r7, #24
 8009fa4:	440b      	add	r3, r1
 8009fa6:	f803 2c10 	strb.w	r2, [r3, #-16]
 	    for (i = 0 ; i < 4 ; i++)
 8009faa:	7cfb      	ldrb	r3, [r7, #19]
 8009fac:	3301      	adds	r3, #1
 8009fae:	74fb      	strb	r3, [r7, #19]
 8009fb0:	7cfb      	ldrb	r3, [r7, #19]
 8009fb2:	2b03      	cmp	r3, #3
 8009fb4:	d9ed      	bls.n	8009f92 <_writeNetworkDict+0x176>
 8009fb6:	e04a      	b.n	800a04e <_writeNetworkDict+0x232>
    }
    else {
	    /* Send the SDO to the server. Initiate download, cs=1. */
	    if (count <= 4) { /* Expedited transfer */
 8009fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fba:	2b04      	cmp	r3, #4
 8009fbc:	d830      	bhi.n	800a020 <_writeNetworkDict+0x204>
		    buf[0] = (UNS8)((1 << 5) | ((4 - count) << 2) | 3);
 8009fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	f1c3 0304 	rsb	r3, r3, #4
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	f043 0323 	orr.w	r3, r3, #35	; 0x23
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	723b      	strb	r3, [r7, #8]
				//buf[0] = (UNS8)((1 << 5) |  2);
		    for (i = 4 ; i < 8 ; i++)
 8009fd4:	2304      	movs	r3, #4
 8009fd6:	74fb      	strb	r3, [r7, #19]
 8009fd8:	e014      	b.n	800a004 <_writeNetworkDict+0x1e8>
			    buf[i] = d->transfers[line].data[i - 4];
 8009fda:	7c3b      	ldrb	r3, [r7, #16]
 8009fdc:	461c      	mov	r4, r3
 8009fde:	7cfb      	ldrb	r3, [r7, #19]
 8009fe0:	1f1a      	subs	r2, r3, #4
 8009fe2:	7cfb      	ldrb	r3, [r7, #19]
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	2154      	movs	r1, #84	; 0x54
 8009fe8:	fb01 f104 	mul.w	r1, r1, r4
 8009fec:	4401      	add	r1, r0
 8009fee:	440a      	add	r2, r1
 8009ff0:	323c      	adds	r2, #60	; 0x3c
 8009ff2:	7812      	ldrb	r2, [r2, #0]
 8009ff4:	f107 0118 	add.w	r1, r7, #24
 8009ff8:	440b      	add	r3, r1
 8009ffa:	f803 2c10 	strb.w	r2, [r3, #-16]
		    for (i = 4 ; i < 8 ; i++)
 8009ffe:	7cfb      	ldrb	r3, [r7, #19]
 800a000:	3301      	adds	r3, #1
 800a002:	74fb      	strb	r3, [r7, #19]
 800a004:	7cfb      	ldrb	r3, [r7, #19]
 800a006:	2b07      	cmp	r3, #7
 800a008:	d9e7      	bls.n	8009fda <_writeNetworkDict+0x1be>
		    d->transfers[line].offset = count;
 800a00a:	7c3b      	ldrb	r3, [r7, #16]
 800a00c:	4619      	mov	r1, r3
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	2354      	movs	r3, #84	; 0x54
 800a012:	fb03 f301 	mul.w	r3, r3, r1
 800a016:	4413      	add	r3, r2
 800a018:	3338      	adds	r3, #56	; 0x38
 800a01a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a01c:	601a      	str	r2, [r3, #0]
 800a01e:	e016      	b.n	800a04e <_writeNetworkDict+0x232>
	    }
	    else { /** Normal transfer */
		    buf[0] = (1 << 5) | 1;
 800a020:	2321      	movs	r3, #33	; 0x21
 800a022:	723b      	strb	r3, [r7, #8]
		    for (i = 0 ; i < 4 ; i++)
 800a024:	2300      	movs	r3, #0
 800a026:	74fb      	strb	r3, [r7, #19]
 800a028:	e00e      	b.n	800a048 <_writeNetworkDict+0x22c>
			    buf[i+4] = (UNS8)((count >> (i<<3))); /* i*8 */
 800a02a:	7cfb      	ldrb	r3, [r7, #19]
 800a02c:	00db      	lsls	r3, r3, #3
 800a02e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a030:	40da      	lsrs	r2, r3
 800a032:	7cfb      	ldrb	r3, [r7, #19]
 800a034:	3304      	adds	r3, #4
 800a036:	b2d2      	uxtb	r2, r2
 800a038:	f107 0118 	add.w	r1, r7, #24
 800a03c:	440b      	add	r3, r1
 800a03e:	f803 2c10 	strb.w	r2, [r3, #-16]
		    for (i = 0 ; i < 4 ; i++)
 800a042:	7cfb      	ldrb	r3, [r7, #19]
 800a044:	3301      	adds	r3, #1
 800a046:	74fb      	strb	r3, [r7, #19]
 800a048:	7cfb      	ldrb	r3, [r7, #19]
 800a04a:	2b03      	cmp	r3, #3
 800a04c:	d9ed      	bls.n	800a02a <_writeNetworkDict+0x20e>
	    }
    }
	buf[1] = (UNS8)(index & 0xFF);        /* LSB */
 800a04e:	883b      	ldrh	r3, [r7, #0]
 800a050:	b2db      	uxtb	r3, r3
 800a052:	727b      	strb	r3, [r7, #9]
	buf[2] = (UNS8)((index >> 8) & 0xFF); /* MSB */
 800a054:	883b      	ldrh	r3, [r7, #0]
 800a056:	0a1b      	lsrs	r3, r3, #8
 800a058:	b29b      	uxth	r3, r3
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	72bb      	strb	r3, [r7, #10]
	buf[3] = subIndex;
 800a05e:	78bb      	ldrb	r3, [r7, #2]
 800a060:	72fb      	strb	r3, [r7, #11]

	d->transfers[line].Callback = Callback;
 800a062:	7c3b      	ldrb	r3, [r7, #16]
 800a064:	4619      	mov	r1, r3
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	2354      	movs	r3, #84	; 0x54
 800a06a:	fb03 f301 	mul.w	r3, r3, r1
 800a06e:	4413      	add	r3, r2
 800a070:	3378      	adds	r3, #120	; 0x78
 800a072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a074:	601a      	str	r2, [r3, #0]

	err = sendSDO(d, SDO_CLIENT, CliNbr, buf);
 800a076:	f107 0308 	add.w	r3, r7, #8
 800a07a:	7cba      	ldrb	r2, [r7, #18]
 800a07c:	2102      	movs	r1, #2
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f7fc fbde 	bl	8006840 <sendSDO>
 800a084:	4603      	mov	r3, r0
 800a086:	747b      	strb	r3, [r7, #17]
	if (err) {
 800a088:	7c7b      	ldrb	r3, [r7, #17]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d012      	beq.n	800a0b4 <_writeNetworkDict+0x298>
		MSG_ERR(0x1AD1, "SDO. Error while sending SDO to node : ", nodeId);
 800a08e:	78fb      	ldrb	r3, [r7, #3]
 800a090:	9301      	str	r3, [sp, #4]
 800a092:	4b10      	ldr	r3, [pc, #64]	; (800a0d4 <_writeNetworkDict+0x2b8>)
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	f641 23d1 	movw	r3, #6865	; 0x1ad1
 800a09a:	f240 72f5 	movw	r2, #2037	; 0x7f5
 800a09e:	4909      	ldr	r1, [pc, #36]	; (800a0c4 <_writeNetworkDict+0x2a8>)
 800a0a0:	4809      	ldr	r0, [pc, #36]	; (800a0c8 <_writeNetworkDict+0x2ac>)
 800a0a2:	f002 fbaf 	bl	800c804 <iprintf>
		/* release the line */
		resetSDOline(d, line);
 800a0a6:	7c3b      	ldrb	r3, [r7, #16]
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f7fc f9c4 	bl	8006438 <resetSDOline>
		return 0xFF;
 800a0b0:	23ff      	movs	r3, #255	; 0xff
 800a0b2:	e000      	b.n	800a0b6 <_writeNetworkDict+0x29a>
	}


	return 0;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	371c      	adds	r7, #28
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd90      	pop	{r4, r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	0800e6f4 	.word	0x0800e6f4
 800a0c4:	0800dec8 	.word	0x0800dec8
 800a0c8:	0800deec 	.word	0x0800deec
 800a0cc:	0800e74c 	.word	0x0800e74c
 800a0d0:	0800e784 	.word	0x0800e784
 800a0d4:	0800e7cc 	.word	0x0800e7cc

0800a0d8 <_readNetworkDict>:
 ** @param useBlockMode
 **
 ** @return
 **/
INLINE UNS8 _readNetworkDict (CO_Data* d, UNS8 nodeId, UNS16 index, UNS8 subIndex, UNS8 dataType, SDOCallback_t Callback, UNS8 useBlockMode)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b088      	sub	sp, #32
 800a0dc:	af02      	add	r7, sp, #8
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	4608      	mov	r0, r1
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	70fb      	strb	r3, [r7, #3]
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	803b      	strh	r3, [r7, #0]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	70bb      	strb	r3, [r7, #2]
	MSG_WAR(0x3AD5, "Send SDO to read in the dictionary of node : ", nodeId);
	MSG_WAR(0x3AD6, "                                  At index : ", index);
	MSG_WAR(0x3AD7, "                                  subIndex : ", subIndex);

	/* First let's find the corresponding SDO client in our OD  */
	CliNbr = GetSDOClientFromNodeId( d, nodeId);
 800a0f2:	78fb      	ldrb	r3, [r7, #3]
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f7ff fe26 	bl	8009d48 <GetSDOClientFromNodeId>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	75bb      	strb	r3, [r7, #22]
	if(CliNbr >= 0xFE)
 800a100:	7dbb      	ldrb	r3, [r7, #22]
 800a102:	2bfd      	cmp	r3, #253	; 0xfd
 800a104:	d901      	bls.n	800a10a <_readNetworkDict+0x32>
		return CliNbr;
 800a106:	7dbb      	ldrb	r3, [r7, #22]
 800a108:	e0c8      	b.n	800a29c <_readNetworkDict+0x1c4>

	/* Verify that there is no SDO communication yet. */
	err = getSDOlineOnUse(d, CliNbr, SDO_CLIENT, &line);
 800a10a:	f107 0314 	add.w	r3, r7, #20
 800a10e:	7db9      	ldrb	r1, [r7, #22]
 800a110:	2202      	movs	r2, #2
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f7fc faf0 	bl	80066f8 <getSDOlineOnUse>
 800a118:	4603      	mov	r3, r0
 800a11a:	757b      	strb	r3, [r7, #21]
	if (!err) {
 800a11c:	7d7b      	ldrb	r3, [r7, #21]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10d      	bne.n	800a13e <_readNetworkDict+0x66>
		MSG_ERR(0x1AD8, "SDO error : Communication yet established. with node : ", nodeId);
 800a122:	78fb      	ldrb	r3, [r7, #3]
 800a124:	9301      	str	r3, [sp, #4]
 800a126:	4b5f      	ldr	r3, [pc, #380]	; (800a2a4 <_readNetworkDict+0x1cc>)
 800a128:	9300      	str	r3, [sp, #0]
 800a12a:	f641 23d8 	movw	r3, #6872	; 0x1ad8
 800a12e:	f640 0281 	movw	r2, #2177	; 0x881
 800a132:	495d      	ldr	r1, [pc, #372]	; (800a2a8 <_readNetworkDict+0x1d0>)
 800a134:	485d      	ldr	r0, [pc, #372]	; (800a2ac <_readNetworkDict+0x1d4>)
 800a136:	f002 fb65 	bl	800c804 <iprintf>
		return 0xFF;
 800a13a:	23ff      	movs	r3, #255	; 0xff
 800a13c:	e0ae      	b.n	800a29c <_readNetworkDict+0x1c4>
	}
	/* Taking the line ... */
	err = getSDOfreeLine( d, SDO_CLIENT, &line );
 800a13e:	f107 0314 	add.w	r3, r7, #20
 800a142:	461a      	mov	r2, r3
 800a144:	2102      	movs	r1, #2
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7fc fa96 	bl	8006678 <getSDOfreeLine>
 800a14c:	4603      	mov	r3, r0
 800a14e:	757b      	strb	r3, [r7, #21]
	if (err) {
 800a150:	7d7b      	ldrb	r3, [r7, #21]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00d      	beq.n	800a172 <_readNetworkDict+0x9a>
		MSG_ERR(0x1AD9, "SDO error : No line free, too many SDO in progress. Aborted for node : ", nodeId);
 800a156:	78fb      	ldrb	r3, [r7, #3]
 800a158:	9301      	str	r3, [sp, #4]
 800a15a:	4b55      	ldr	r3, [pc, #340]	; (800a2b0 <_readNetworkDict+0x1d8>)
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	f641 23d9 	movw	r3, #6873	; 0x1ad9
 800a162:	f640 0287 	movw	r2, #2183	; 0x887
 800a166:	4950      	ldr	r1, [pc, #320]	; (800a2a8 <_readNetworkDict+0x1d0>)
 800a168:	4850      	ldr	r0, [pc, #320]	; (800a2ac <_readNetworkDict+0x1d4>)
 800a16a:	f002 fb4b 	bl	800c804 <iprintf>
		return (0xFF);
 800a16e:	23ff      	movs	r3, #255	; 0xff
 800a170:	e094      	b.n	800a29c <_readNetworkDict+0x1c4>
	}
	else {
		MSG_WAR(0x3AE0, "Transmission on line : ", line);
	}

    if(useBlockMode) {
 800a172:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a176:	2b00      	cmp	r3, #0
 800a178:	d034      	beq.n	800a1e4 <_readNetworkDict+0x10c>
	    initSDOline(d, line, CliNbr, index, subIndex, SDO_BLOCK_UPLOAD_IN_PROGRESS);
 800a17a:	7d39      	ldrb	r1, [r7, #20]
 800a17c:	8838      	ldrh	r0, [r7, #0]
 800a17e:	7dba      	ldrb	r2, [r7, #22]
 800a180:	2305      	movs	r3, #5
 800a182:	9301      	str	r3, [sp, #4]
 800a184:	78bb      	ldrb	r3, [r7, #2]
 800a186:	9300      	str	r3, [sp, #0]
 800a188:	4603      	mov	r3, r0
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f7fc f98e 	bl	80064ac <initSDOline>
	    /* Send the SDO to the server. Initiate block upload, cs=0. */
	    d->transfers[line].dataType = dataType;
 800a190:	7d3b      	ldrb	r3, [r7, #20]
 800a192:	4619      	mov	r1, r3
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	2354      	movs	r3, #84	; 0x54
 800a198:	fb03 f301 	mul.w	r3, r3, r1
 800a19c:	4413      	add	r3, r2
 800a19e:	3373      	adds	r3, #115	; 0x73
 800a1a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a1a4:	701a      	strb	r2, [r3, #0]
	    data[0] = (5 << 5) | SDO_BCS_INITIATE_UPLOAD_REQUEST;
 800a1a6:	23a0      	movs	r3, #160	; 0xa0
 800a1a8:	733b      	strb	r3, [r7, #12]
	    data[1] = (UNS8)(index & 0xFF);        /* LSB */
 800a1aa:	883b      	ldrh	r3, [r7, #0]
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	737b      	strb	r3, [r7, #13]
	    data[2] = (UNS8)((index >> 8) & 0xFF); /* MSB */
 800a1b0:	883b      	ldrh	r3, [r7, #0]
 800a1b2:	0a1b      	lsrs	r3, r3, #8
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	73bb      	strb	r3, [r7, #14]
	    data[3] = subIndex;
 800a1ba:	78bb      	ldrb	r3, [r7, #2]
 800a1bc:	73fb      	strb	r3, [r7, #15]
	    data[4] = SDO_BLOCK_SIZE;
 800a1be:	2310      	movs	r3, #16
 800a1c0:	743b      	strb	r3, [r7, #16]
	    for (i = 5 ; i < 8 ; i++)
 800a1c2:	2305      	movs	r3, #5
 800a1c4:	75fb      	strb	r3, [r7, #23]
 800a1c6:	e009      	b.n	800a1dc <_readNetworkDict+0x104>
		    data[i] = 0;
 800a1c8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ca:	f107 0218 	add.w	r2, r7, #24
 800a1ce:	4413      	add	r3, r2
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f803 2c0c 	strb.w	r2, [r3, #-12]
	    for (i = 5 ; i < 8 ; i++)
 800a1d6:	7dfb      	ldrb	r3, [r7, #23]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	75fb      	strb	r3, [r7, #23]
 800a1dc:	7dfb      	ldrb	r3, [r7, #23]
 800a1de:	2b07      	cmp	r3, #7
 800a1e0:	d9f2      	bls.n	800a1c8 <_readNetworkDict+0xf0>
 800a1e2:	e031      	b.n	800a248 <_readNetworkDict+0x170>
    }
    else {
	    initSDOline(d, line, CliNbr, index, subIndex, SDO_UPLOAD_IN_PROGRESS);
 800a1e4:	7d39      	ldrb	r1, [r7, #20]
 800a1e6:	8838      	ldrh	r0, [r7, #0]
 800a1e8:	7dba      	ldrb	r2, [r7, #22]
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	78bb      	ldrb	r3, [r7, #2]
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f7fc f959 	bl	80064ac <initSDOline>
	    /* Send the SDO to the server. Initiate upload, cs=2. */
	    d->transfers[line].dataType = dataType;
 800a1fa:	7d3b      	ldrb	r3, [r7, #20]
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	2354      	movs	r3, #84	; 0x54
 800a202:	fb03 f301 	mul.w	r3, r3, r1
 800a206:	4413      	add	r3, r2
 800a208:	3373      	adds	r3, #115	; 0x73
 800a20a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a20e:	701a      	strb	r2, [r3, #0]
	    data[0] = (2 << 5);
 800a210:	2340      	movs	r3, #64	; 0x40
 800a212:	733b      	strb	r3, [r7, #12]
	    data[1] = (UNS8)(index & 0xFF);        /* LSB */
 800a214:	883b      	ldrh	r3, [r7, #0]
 800a216:	b2db      	uxtb	r3, r3
 800a218:	737b      	strb	r3, [r7, #13]
	    data[2] = (UNS8)((index >> 8) & 0xFF); /* MSB */
 800a21a:	883b      	ldrh	r3, [r7, #0]
 800a21c:	0a1b      	lsrs	r3, r3, #8
 800a21e:	b29b      	uxth	r3, r3
 800a220:	b2db      	uxtb	r3, r3
 800a222:	73bb      	strb	r3, [r7, #14]
	    data[3] = subIndex;
 800a224:	78bb      	ldrb	r3, [r7, #2]
 800a226:	73fb      	strb	r3, [r7, #15]
	    for (i = 4 ; i < 8 ; i++)
 800a228:	2304      	movs	r3, #4
 800a22a:	75fb      	strb	r3, [r7, #23]
 800a22c:	e009      	b.n	800a242 <_readNetworkDict+0x16a>
		    data[i] = 0;
 800a22e:	7dfb      	ldrb	r3, [r7, #23]
 800a230:	f107 0218 	add.w	r2, r7, #24
 800a234:	4413      	add	r3, r2
 800a236:	2200      	movs	r2, #0
 800a238:	f803 2c0c 	strb.w	r2, [r3, #-12]
	    for (i = 4 ; i < 8 ; i++)
 800a23c:	7dfb      	ldrb	r3, [r7, #23]
 800a23e:	3301      	adds	r3, #1
 800a240:	75fb      	strb	r3, [r7, #23]
 800a242:	7dfb      	ldrb	r3, [r7, #23]
 800a244:	2b07      	cmp	r3, #7
 800a246:	d9f2      	bls.n	800a22e <_readNetworkDict+0x156>
    }
	d->transfers[line].Callback = Callback;
 800a248:	7d3b      	ldrb	r3, [r7, #20]
 800a24a:	4619      	mov	r1, r3
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	2354      	movs	r3, #84	; 0x54
 800a250:	fb03 f301 	mul.w	r3, r3, r1
 800a254:	4413      	add	r3, r2
 800a256:	3378      	adds	r3, #120	; 0x78
 800a258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a25a:	601a      	str	r2, [r3, #0]
	err = sendSDO(d, SDO_CLIENT, CliNbr, data);
 800a25c:	f107 030c 	add.w	r3, r7, #12
 800a260:	7dba      	ldrb	r2, [r7, #22]
 800a262:	2102      	movs	r1, #2
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f7fc faeb 	bl	8006840 <sendSDO>
 800a26a:	4603      	mov	r3, r0
 800a26c:	757b      	strb	r3, [r7, #21]
	if (err) {
 800a26e:	7d7b      	ldrb	r3, [r7, #21]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d012      	beq.n	800a29a <_readNetworkDict+0x1c2>
		MSG_ERR(0x1AE5, "SDO. Error while sending SDO to node : ", nodeId);
 800a274:	78fb      	ldrb	r3, [r7, #3]
 800a276:	9301      	str	r3, [sp, #4]
 800a278:	4b0e      	ldr	r3, [pc, #56]	; (800a2b4 <_readNetworkDict+0x1dc>)
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	f641 23e5 	movw	r3, #6885	; 0x1ae5
 800a280:	f640 02a8 	movw	r2, #2216	; 0x8a8
 800a284:	4908      	ldr	r1, [pc, #32]	; (800a2a8 <_readNetworkDict+0x1d0>)
 800a286:	4809      	ldr	r0, [pc, #36]	; (800a2ac <_readNetworkDict+0x1d4>)
 800a288:	f002 fabc 	bl	800c804 <iprintf>
		/* release the line */
		resetSDOline(d, line);
 800a28c:	7d3b      	ldrb	r3, [r7, #20]
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7fc f8d1 	bl	8006438 <resetSDOline>
		return 0xFF;
 800a296:	23ff      	movs	r3, #255	; 0xff
 800a298:	e000      	b.n	800a29c <_readNetworkDict+0x1c4>
	}
	return 0;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3718      	adds	r7, #24
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	0800e74c 	.word	0x0800e74c
 800a2a8:	0800dec8 	.word	0x0800dec8
 800a2ac:	0800deec 	.word	0x0800deec
 800a2b0:	0800e784 	.word	0x0800e784
 800a2b4:	0800e7cc 	.word	0x0800e7cc

0800a2b8 <readNetworkDict>:
 * - 0 is returned upon success.
 * - 0xFE is returned when no sdo client to communicate with node.
 * - 0xFF is returned when error occurs.
 */
UNS8 readNetworkDict (CO_Data* d, UNS8 nodeId, UNS16 index, UNS8 subIndex, UNS8 dataType, UNS8 useBlockMode)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af04      	add	r7, sp, #16
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	4608      	mov	r0, r1
 800a2c2:	4611      	mov	r1, r2
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	70fb      	strb	r3, [r7, #3]
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	803b      	strh	r3, [r7, #0]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	70bb      	strb	r3, [r7, #2]
	return _readNetworkDict (d, nodeId, index, subIndex, dataType, NULL, useBlockMode);
 800a2d2:	78b8      	ldrb	r0, [r7, #2]
 800a2d4:	883a      	ldrh	r2, [r7, #0]
 800a2d6:	78f9      	ldrb	r1, [r7, #3]
 800a2d8:	7d3b      	ldrb	r3, [r7, #20]
 800a2da:	9302      	str	r3, [sp, #8]
 800a2dc:	2300      	movs	r3, #0
 800a2de:	9301      	str	r3, [sp, #4]
 800a2e0:	7c3b      	ldrb	r3, [r7, #16]
 800a2e2:	9300      	str	r3, [sp, #0]
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f7ff fef6 	bl	800a0d8 <_readNetworkDict>
 800a2ec:	4603      	mov	r3, r0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
	...

0800a2f8 <getReadResultNetworkDict>:
 **    SDO_PROVIDED_BUFFER_TOO_SMALL if *data is not big enough
 **    or any transmission status value.
 **/
UNS8 getReadResultNetworkDict (CO_Data* d, UNS8 nodeId, void* data, UNS32 *size,
		UNS32 * abortCode)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b088      	sub	sp, #32
 800a2fc:	af02      	add	r7, sp, #8
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	607a      	str	r2, [r7, #4]
 800a302:	603b      	str	r3, [r7, #0]
 800a304:	460b      	mov	r3, r1
 800a306:	72fb      	strb	r3, [r7, #11]
	UNS32 i;
	UNS8 err;
	UNS8 CliNbr;
	UNS8 line;
	* abortCode = 0;
 800a308:	6a3b      	ldr	r3, [r7, #32]
 800a30a:	2200      	movs	r2, #0
 800a30c:	601a      	str	r2, [r3, #0]

	/* First let's find the corresponding SDO client in our OD  */
	CliNbr = GetSDOClientFromNodeId(d, nodeId);
 800a30e:	7afb      	ldrb	r3, [r7, #11]
 800a310:	4619      	mov	r1, r3
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f7ff fd18 	bl	8009d48 <GetSDOClientFromNodeId>
 800a318:	4603      	mov	r3, r0
 800a31a:	74fb      	strb	r3, [r7, #19]
	if(CliNbr >= 0xFE) {
 800a31c:	7cfb      	ldrb	r3, [r7, #19]
 800a31e:	2bfd      	cmp	r3, #253	; 0xfd
 800a320:	d904      	bls.n	800a32c <getReadResultNetworkDict+0x34>
        *size = 0;
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2200      	movs	r2, #0
 800a326:	601a      	str	r2, [r3, #0]
		return SDO_ABORTED_INTERNAL;
 800a328:	2385      	movs	r3, #133	; 0x85
 800a32a:	e0af      	b.n	800a48c <getReadResultNetworkDict+0x194>
    }

	/* Looking for the line tranfert. */
	err = getSDOlineOnUse(d, CliNbr, SDO_CLIENT, &line);
 800a32c:	f107 0311 	add.w	r3, r7, #17
 800a330:	7cf9      	ldrb	r1, [r7, #19]
 800a332:	2202      	movs	r2, #2
 800a334:	68f8      	ldr	r0, [r7, #12]
 800a336:	f7fc f9df 	bl	80066f8 <getSDOlineOnUse>
 800a33a:	4603      	mov	r3, r0
 800a33c:	74bb      	strb	r3, [r7, #18]
	if (err) {
 800a33e:	7cbb      	ldrb	r3, [r7, #18]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d010      	beq.n	800a366 <getReadResultNetworkDict+0x6e>
		MSG_ERR(0x1AF0, "SDO error : No line found for communication with node : ", nodeId);
 800a344:	7afb      	ldrb	r3, [r7, #11]
 800a346:	9301      	str	r3, [sp, #4]
 800a348:	4b52      	ldr	r3, [pc, #328]	; (800a494 <getReadResultNetworkDict+0x19c>)
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	f641 23f0 	movw	r3, #6896	; 0x1af0
 800a350:	f640 1227 	movw	r2, #2343	; 0x927
 800a354:	4950      	ldr	r1, [pc, #320]	; (800a498 <getReadResultNetworkDict+0x1a0>)
 800a356:	4851      	ldr	r0, [pc, #324]	; (800a49c <getReadResultNetworkDict+0x1a4>)
 800a358:	f002 fa54 	bl	800c804 <iprintf>
        *size = 0;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	2200      	movs	r2, #0
 800a360:	601a      	str	r2, [r3, #0]
        return SDO_ABORTED_INTERNAL;
 800a362:	2385      	movs	r3, #133	; 0x85
 800a364:	e092      	b.n	800a48c <getReadResultNetworkDict+0x194>
	}

    /* If transfer not finished just return, but if aborted set abort code and size to 0 */
    if (d->transfers[line].state != SDO_FINISHED) {
 800a366:	7c7b      	ldrb	r3, [r7, #17]
 800a368:	4619      	mov	r1, r3
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	2354      	movs	r3, #84	; 0x54
 800a36e:	fb03 f301 	mul.w	r3, r3, r1
 800a372:	4413      	add	r3, r2
 800a374:	332a      	adds	r3, #42	; 0x2a
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d02d      	beq.n	800a3d8 <getReadResultNetworkDict+0xe0>
	    if((d->transfers[line].state == SDO_ABORTED_RCV) || (d->transfers[line].state == SDO_ABORTED_INTERNAL)) {
 800a37c:	7c7b      	ldrb	r3, [r7, #17]
 800a37e:	4619      	mov	r1, r3
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	2354      	movs	r3, #84	; 0x54
 800a384:	fb03 f301 	mul.w	r3, r3, r1
 800a388:	4413      	add	r3, r2
 800a38a:	332a      	adds	r3, #42	; 0x2a
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	2b80      	cmp	r3, #128	; 0x80
 800a390:	d00a      	beq.n	800a3a8 <getReadResultNetworkDict+0xb0>
 800a392:	7c7b      	ldrb	r3, [r7, #17]
 800a394:	4619      	mov	r1, r3
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	2354      	movs	r3, #84	; 0x54
 800a39a:	fb03 f301 	mul.w	r3, r3, r1
 800a39e:	4413      	add	r3, r2
 800a3a0:	332a      	adds	r3, #42	; 0x2a
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	2b85      	cmp	r3, #133	; 0x85
 800a3a6:	d10d      	bne.n	800a3c4 <getReadResultNetworkDict+0xcc>
            *abortCode = d->transfers[line].abortCode;
 800a3a8:	7c7b      	ldrb	r3, [r7, #17]
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	2354      	movs	r3, #84	; 0x54
 800a3b0:	fb03 f301 	mul.w	r3, r3, r1
 800a3b4:	4413      	add	r3, r2
 800a3b6:	332c      	adds	r3, #44	; 0x2c
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	6a3b      	ldr	r3, [r7, #32]
 800a3bc:	601a      	str	r2, [r3, #0]
            *size = 0;
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	601a      	str	r2, [r3, #0]
        }
		return d->transfers[line].state;
 800a3c4:	7c7b      	ldrb	r3, [r7, #17]
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	2354      	movs	r3, #84	; 0x54
 800a3cc:	fb03 f301 	mul.w	r3, r3, r1
 800a3d0:	4413      	add	r3, r2
 800a3d2:	332a      	adds	r3, #42	; 0x2a
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	e059      	b.n	800a48c <getReadResultNetworkDict+0x194>
    }

	/* if SDO initiated with e=0 and s=0 count is null, offset carry effective size*/
	if( d->transfers[line].count == 0)
 800a3d8:	7c7b      	ldrb	r3, [r7, #17]
 800a3da:	4619      	mov	r1, r3
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	2354      	movs	r3, #84	; 0x54
 800a3e0:	fb03 f301 	mul.w	r3, r3, r1
 800a3e4:	4413      	add	r3, r2
 800a3e6:	3334      	adds	r3, #52	; 0x34
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d111      	bne.n	800a412 <getReadResultNetworkDict+0x11a>
		d->transfers[line].count = d->transfers[line].offset;
 800a3ee:	7c7b      	ldrb	r3, [r7, #17]
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	7c7b      	ldrb	r3, [r7, #17]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	2354      	movs	r3, #84	; 0x54
 800a3fa:	fb03 f301 	mul.w	r3, r3, r1
 800a3fe:	4413      	add	r3, r2
 800a400:	3338      	adds	r3, #56	; 0x38
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	68f9      	ldr	r1, [r7, #12]
 800a406:	2354      	movs	r3, #84	; 0x54
 800a408:	fb03 f300 	mul.w	r3, r3, r0
 800a40c:	440b      	add	r3, r1
 800a40e:	3334      	adds	r3, #52	; 0x34
 800a410:	601a      	str	r2, [r3, #0]

    /* Check if the provided buffer is big enough */
    if(*size < d->transfers[line].count) {
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	7c7b      	ldrb	r3, [r7, #17]
 800a418:	4618      	mov	r0, r3
 800a41a:	68f9      	ldr	r1, [r7, #12]
 800a41c:	2354      	movs	r3, #84	; 0x54
 800a41e:	fb03 f300 	mul.w	r3, r3, r0
 800a422:	440b      	add	r3, r1
 800a424:	3334      	adds	r3, #52	; 0x34
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d204      	bcs.n	800a436 <getReadResultNetworkDict+0x13e>
		*size = 0;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	2200      	movs	r2, #0
 800a430:	601a      	str	r2, [r3, #0]
		return SDO_PROVIDED_BUFFER_TOO_SMALL;
 800a432:	238a      	movs	r3, #138	; 0x8a
 800a434:	e02a      	b.n	800a48c <getReadResultNetworkDict+0x194>
    }
	
    /* Give back actual size */
    *size = d->transfers[line].count;
 800a436:	7c7b      	ldrb	r3, [r7, #17]
 800a438:	4619      	mov	r1, r3
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	2354      	movs	r3, #84	; 0x54
 800a43e:	fb03 f301 	mul.w	r3, r3, r1
 800a442:	4413      	add	r3, r2
 800a444:	3334      	adds	r3, #52	; 0x34
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	601a      	str	r2, [r3, #0]
			( (char *) data)[i] = lineData[i];
# endif
		}
	}
#else //SDO_DYNAMIC_BUFFER_ALLOCATION
	for  ( i = 0 ; i < *size ; i++) {
 800a44c:	2300      	movs	r3, #0
 800a44e:	617b      	str	r3, [r7, #20]
 800a450:	e011      	b.n	800a476 <getReadResultNetworkDict+0x17e>
		if (d->transfers[line].dataType != visible_string)
			( (char *) data)[*size - 1 - i] = d->transfers[line].data[i];
		else /* String of bytes. */
			( (char *) data)[i] = d->transfers[line].data[i];
# else
		( (char *) data)[i] = d->transfers[line].data[i];
 800a452:	7c7b      	ldrb	r3, [r7, #17]
 800a454:	4618      	mov	r0, r3
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	4413      	add	r3, r2
 800a45c:	68f9      	ldr	r1, [r7, #12]
 800a45e:	2254      	movs	r2, #84	; 0x54
 800a460:	fb02 f200 	mul.w	r2, r2, r0
 800a464:	4411      	add	r1, r2
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	440a      	add	r2, r1
 800a46a:	323c      	adds	r2, #60	; 0x3c
 800a46c:	7812      	ldrb	r2, [r2, #0]
 800a46e:	701a      	strb	r2, [r3, #0]
	for  ( i = 0 ; i < *size ; i++) {
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	3301      	adds	r3, #1
 800a474:	617b      	str	r3, [r7, #20]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	697a      	ldr	r2, [r7, #20]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d3e8      	bcc.n	800a452 <getReadResultNetworkDict+0x15a>
# endif
	}
#endif //SDO_DYNAMIC_BUFFER_ALLOCATION
    resetSDOline(d, line);
 800a480:	7c7b      	ldrb	r3, [r7, #17]
 800a482:	4619      	mov	r1, r3
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f7fb ffd7 	bl	8006438 <resetSDOline>
	return SDO_FINISHED;
 800a48a:	2301      	movs	r3, #1
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3718      	adds	r7, #24
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	0800e824 	.word	0x0800e824
 800a498:	0800dec8 	.word	0x0800dec8
 800a49c:	0800deec 	.word	0x0800deec

0800a4a0 <getWriteResultNetworkDict>:
 ** @param abortCode
 **
 ** @return
 **/
UNS8 getWriteResultNetworkDict (CO_Data* d, UNS8 nodeId, UNS32 * abortCode)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b088      	sub	sp, #32
 800a4a4:	af02      	add	r7, sp, #8
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	607a      	str	r2, [r7, #4]
 800a4ac:	72fb      	strb	r3, [r7, #11]
	UNS8 line = 0;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	757b      	strb	r3, [r7, #21]
	UNS8 err;
	UNS8 CliNbr;
	* abortCode = 0;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	601a      	str	r2, [r3, #0]
	
	/* First let's find the corresponding SDO client in our OD  */
	CliNbr = GetSDOClientFromNodeId(d, nodeId);
 800a4b8:	7afb      	ldrb	r3, [r7, #11]
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f7ff fc43 	bl	8009d48 <GetSDOClientFromNodeId>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	75fb      	strb	r3, [r7, #23]
	if(CliNbr >= 0xFE)
 800a4c6:	7dfb      	ldrb	r3, [r7, #23]
 800a4c8:	2bfd      	cmp	r3, #253	; 0xfd
 800a4ca:	d901      	bls.n	800a4d0 <getWriteResultNetworkDict+0x30>
		return SDO_ABORTED_INTERNAL;
 800a4cc:	2385      	movs	r3, #133	; 0x85
 800a4ce:	e03f      	b.n	800a550 <getWriteResultNetworkDict+0xb0>

	/* Looking for the line tranfert. */
	err = getSDOlineOnUse(d, CliNbr, SDO_CLIENT, &line);
 800a4d0:	f107 0315 	add.w	r3, r7, #21
 800a4d4:	7df9      	ldrb	r1, [r7, #23]
 800a4d6:	2202      	movs	r2, #2
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f7fc f90d 	bl	80066f8 <getSDOlineOnUse>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	75bb      	strb	r3, [r7, #22]
	if (err) {
 800a4e2:	7dbb      	ldrb	r3, [r7, #22]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00d      	beq.n	800a504 <getWriteResultNetworkDict+0x64>
		MSG_ERR(0x1AF1, "SDO error : No line found for communication with node : ", nodeId);
 800a4e8:	7afb      	ldrb	r3, [r7, #11]
 800a4ea:	9301      	str	r3, [sp, #4]
 800a4ec:	4b1a      	ldr	r3, [pc, #104]	; (800a558 <getWriteResultNetworkDict+0xb8>)
 800a4ee:	9300      	str	r3, [sp, #0]
 800a4f0:	f641 23f1 	movw	r3, #6897	; 0x1af1
 800a4f4:	f640 127e 	movw	r2, #2430	; 0x97e
 800a4f8:	4918      	ldr	r1, [pc, #96]	; (800a55c <getWriteResultNetworkDict+0xbc>)
 800a4fa:	4819      	ldr	r0, [pc, #100]	; (800a560 <getWriteResultNetworkDict+0xc0>)
 800a4fc:	f002 f982 	bl	800c804 <iprintf>
		return SDO_ABORTED_INTERNAL;
 800a500:	2385      	movs	r3, #133	; 0x85
 800a502:	e025      	b.n	800a550 <getWriteResultNetworkDict+0xb0>
	}
	* abortCode = d->transfers[line].abortCode;
 800a504:	7d7b      	ldrb	r3, [r7, #21]
 800a506:	4619      	mov	r1, r3
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	2354      	movs	r3, #84	; 0x54
 800a50c:	fb03 f301 	mul.w	r3, r3, r1
 800a510:	4413      	add	r3, r2
 800a512:	332c      	adds	r3, #44	; 0x2c
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	601a      	str	r2, [r3, #0]
    if (d->transfers[line].state != SDO_FINISHED)
 800a51a:	7d7b      	ldrb	r3, [r7, #21]
 800a51c:	4619      	mov	r1, r3
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	2354      	movs	r3, #84	; 0x54
 800a522:	fb03 f301 	mul.w	r3, r3, r1
 800a526:	4413      	add	r3, r2
 800a528:	332a      	adds	r3, #42	; 0x2a
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d009      	beq.n	800a544 <getWriteResultNetworkDict+0xa4>
	    return d->transfers[line].state;
 800a530:	7d7b      	ldrb	r3, [r7, #21]
 800a532:	4619      	mov	r1, r3
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	2354      	movs	r3, #84	; 0x54
 800a538:	fb03 f301 	mul.w	r3, r3, r1
 800a53c:	4413      	add	r3, r2
 800a53e:	332a      	adds	r3, #42	; 0x2a
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	e005      	b.n	800a550 <getWriteResultNetworkDict+0xb0>
    resetSDOline(d, line);
 800a544:	7d7b      	ldrb	r3, [r7, #21]
 800a546:	4619      	mov	r1, r3
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f7fb ff75 	bl	8006438 <resetSDOline>
	return SDO_FINISHED;
 800a54e:	2301      	movs	r3, #1
}
 800a550:	4618      	mov	r0, r3
 800a552:	3718      	adds	r7, #24
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	0800e824 	.word	0x0800e824
 800a55c:	0800dec8 	.word	0x0800dec8
 800a560:	0800deec 	.word	0x0800deec

0800a564 <canDispatch>:
**                                                                                                 
** @param d                                                                                        
** @param m                                                                                        
**/  
void canDispatch(CO_Data* d, Message *m)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
	UNS16 cob_id = UNS16_LE(m->cob_id);
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	881b      	ldrh	r3, [r3, #0]
 800a572:	81fb      	strh	r3, [r7, #14]
	 switch(cob_id >> 7)
 800a574:	89fb      	ldrh	r3, [r7, #14]
 800a576:	09db      	lsrs	r3, r3, #7
 800a578:	b29b      	uxth	r3, r3
 800a57a:	2b0e      	cmp	r3, #14
 800a57c:	d867      	bhi.n	800a64e <canDispatch+0xea>
 800a57e:	a201      	add	r2, pc, #4	; (adr r2, 800a584 <canDispatch+0x20>)
 800a580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a584:	0800a629 	.word	0x0800a629
 800a588:	0800a5c1 	.word	0x0800a5c1
 800a58c:	0800a5ed 	.word	0x0800a5ed
 800a590:	0800a5ed 	.word	0x0800a5ed
 800a594:	0800a5ed 	.word	0x0800a5ed
 800a598:	0800a5ed 	.word	0x0800a5ed
 800a59c:	0800a5ed 	.word	0x0800a5ed
 800a5a0:	0800a5ed 	.word	0x0800a5ed
 800a5a4:	0800a5ed 	.word	0x0800a5ed
 800a5a8:	0800a5ed 	.word	0x0800a5ed
 800a5ac:	0800a5ed 	.word	0x0800a5ed
 800a5b0:	0800a601 	.word	0x0800a601
 800a5b4:	0800a601 	.word	0x0800a601
 800a5b8:	0800a64f 	.word	0x0800a64f
 800a5bc:	0800a615 	.word	0x0800a615
	{
		case SYNC:		/* can be a SYNC or a EMCY message */
			if(cob_id == 0x080)	/* SYNC */
 800a5c0:	89fb      	ldrh	r3, [r7, #14]
 800a5c2:	2b80      	cmp	r3, #128	; 0x80
 800a5c4:	d108      	bne.n	800a5d8 <canDispatch+0x74>
			{
				if(d->CurrentCommunicationState.csSYNC)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d035      	beq.n	800a63c <canDispatch+0xd8>
					proceedSYNC(d);
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 fb07 	bl	800abe4 <proceedSYNC>
			} else 		/* EMCY */
				if(d->CurrentCommunicationState.csEmergency)
					proceedEMCY(d,m);
			break;
 800a5d6:	e031      	b.n	800a63c <canDispatch+0xd8>
				if(d->CurrentCommunicationState.csEmergency)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d02c      	beq.n	800a63c <canDispatch+0xd8>
					proceedEMCY(d,m);
 800a5e2:	6839      	ldr	r1, [r7, #0]
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f7f9 fedb 	bl	80043a0 <proceedEMCY>
			break;
 800a5ea:	e027      	b.n	800a63c <canDispatch+0xd8>
		case PDO2rx:
		case PDO3tx:
		case PDO3rx:
		case PDO4tx:
		case PDO4rx:
			if (d->CurrentCommunicationState.csPDO)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d024      	beq.n	800a640 <canDispatch+0xdc>
				proceedPDO(d,m);
 800a5f6:	6839      	ldr	r1, [r7, #0]
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f7fa fd5d 	bl	80050b8 <proceedPDO>
			break;
 800a5fe:	e01f      	b.n	800a640 <canDispatch+0xdc>
		case SDOtx:
		case SDOrx:
			if (d->CurrentCommunicationState.csSDO)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800a606:	2b00      	cmp	r3, #0
 800a608:	d01c      	beq.n	800a644 <canDispatch+0xe0>
				proceedSDO(d,m);
 800a60a:	6839      	ldr	r1, [r7, #0]
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f7fc f9e9 	bl	80069e4 <proceedSDO>
			break;
 800a612:	e017      	b.n	800a644 <canDispatch+0xe0>
		case NODE_GUARD:
			if (d->CurrentCommunicationState.csLifeGuard)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f993 3081 	ldrsb.w	r3, [r3, #129]	; 0x81
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d014      	beq.n	800a648 <canDispatch+0xe4>
				proceedNODE_GUARD(d,m);
 800a61e:	6839      	ldr	r1, [r7, #0]
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f7f9 ff23 	bl	800446c <proceedNODE_GUARD>
			break;
 800a626:	e00f      	b.n	800a648 <canDispatch+0xe4>
		case NMT:
			if (*(d->iam_a_slave))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a1b      	ldr	r3, [r3, #32]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00c      	beq.n	800a64c <canDispatch+0xe8>
			{
				proceedNMTstateChange(d,m);
 800a632:	6839      	ldr	r1, [r7, #0]
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f7fa fa1f 	bl	8004a78 <proceedNMTstateChange>
			}
            break;
 800a63a:	e007      	b.n	800a64c <canDispatch+0xe8>
			break;
 800a63c:	bf00      	nop
 800a63e:	e006      	b.n	800a64e <canDispatch+0xea>
			break;
 800a640:	bf00      	nop
 800a642:	e004      	b.n	800a64e <canDispatch+0xea>
			break;
 800a644:	bf00      	nop
 800a646:	e002      	b.n	800a64e <canDispatch+0xea>
			break;
 800a648:	bf00      	nop
 800a64a:	e000      	b.n	800a64e <canDispatch+0xea>
            break;
 800a64c:	bf00      	nop
				proceedLSS_Master(d,m);
			}
			break;
#endif
	}
}
 800a64e:	bf00      	nop
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop

0800a658 <switchCommunicationState>:
**                                                                                                 
** @param d                                                                                        
** @param newCommunicationState                                                                    
**/  	
void switchCommunicationState(CO_Data* d, s_state_communication *newCommunicationState)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
#ifdef CO_ENABLE_LSS
	StartOrStop(csLSS,	startLSS(d),	stopLSS(d))
#endif
	StartOrStop(csSDO,	None,		resetSDO(d))
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d009      	beq.n	800a680 <switchCommunicationState+0x28>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800a672:	2b00      	cmp	r3, #0
 800a674:	d104      	bne.n	800a680 <switchCommunicationState+0x28>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800a67e:	e010      	b.n	800a6a2 <switchCommunicationState+0x4a>
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10b      	bne.n	800a6a2 <switchCommunicationState+0x4a>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800a690:	2b01      	cmp	r3, #1
 800a692:	d106      	bne.n	800a6a2 <switchCommunicationState+0x4a>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f7fb fcb9 	bl	8006014 <resetSDO>
	StartOrStop(csSYNC,	startSYNC(d),		stopSYNC(d))
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00c      	beq.n	800a6c6 <switchCommunicationState+0x6e>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d107      	bne.n	800a6c6 <switchCommunicationState+0x6e>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 f9f2 	bl	800aaa8 <startSYNC>
 800a6c4:	e010      	b.n	800a6e8 <switchCommunicationState+0x90>
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d10b      	bne.n	800a6e8 <switchCommunicationState+0x90>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d106      	bne.n	800a6e8 <switchCommunicationState+0x90>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fa30 	bl	800ab48 <stopSYNC>
	StartOrStop(csLifeGuard,	lifeGuardInit(d),	lifeGuardStop(d))
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00c      	beq.n	800a70c <switchCommunicationState+0xb4>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f993 3081 	ldrsb.w	r3, [r3, #129]	; 0x81
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d107      	bne.n	800a70c <switchCommunicationState+0xb4>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2201      	movs	r2, #1
 800a700:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f7fa f95b 	bl	80049c0 <lifeGuardInit>
 800a70a:	e010      	b.n	800a72e <switchCommunicationState+0xd6>
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d10b      	bne.n	800a72e <switchCommunicationState+0xd6>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f993 3081 	ldrsb.w	r3, [r3, #129]	; 0x81
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d106      	bne.n	800a72e <switchCommunicationState+0xd6>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f7fa f957 	bl	80049dc <lifeGuardStop>
	StartOrStop(csEmergency,	emergencyInit(d),	emergencyStop(d)) 
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00c      	beq.n	800a752 <switchCommunicationState+0xfa>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d107      	bne.n	800a752 <switchCommunicationState+0xfa>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2201      	movs	r2, #1
 800a746:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f7f9 fe08 	bl	8004360 <emergencyInit>
 800a750:	e010      	b.n	800a774 <switchCommunicationState+0x11c>
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d10b      	bne.n	800a774 <switchCommunicationState+0x11c>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 800a762:	2b01      	cmp	r3, #1
 800a764:	d106      	bne.n	800a774 <switchCommunicationState+0x11c>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f7f9 fe0c 	bl	800438c <emergencyStop>
	StartOrStop(csPDO,	PDOInit(d),	PDOStop(d))
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d00c      	beq.n	800a798 <switchCommunicationState+0x140>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 800a784:	2b00      	cmp	r3, #0
 800a786:	d107      	bne.n	800a798 <switchCommunicationState+0x140>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f7fb fae9 	bl	8005d68 <PDOInit>
 800a796:	e010      	b.n	800a7ba <switchCommunicationState+0x162>
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10b      	bne.n	800a7ba <switchCommunicationState+0x162>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d106      	bne.n	800a7ba <switchCommunicationState+0x162>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7fb fb19 	bl	8005dec <PDOStop>
	StartOrStop(csBoot_Up,	None,	slaveSendBootUp(d))
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	f993 3000 	ldrsb.w	r3, [r3]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d009      	beq.n	800a7d8 <switchCommunicationState+0x180>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d104      	bne.n	800a7d8 <switchCommunicationState+0x180>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
}
 800a7d6:	e010      	b.n	800a7fa <switchCommunicationState+0x1a2>
	StartOrStop(csBoot_Up,	None,	slaveSendBootUp(d))
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	f993 3000 	ldrsb.w	r3, [r3]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d10b      	bne.n	800a7fa <switchCommunicationState+0x1a2>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d106      	bne.n	800a7fa <switchCommunicationState+0x1a2>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f7fa f9d0 	bl	8004b9a <slaveSendBootUp>
}
 800a7fa:	bf00      	nop
 800a7fc:	3708      	adds	r7, #8
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
	...

0800a804 <setState>:
** @param newState                                                                                 
**                                                                                                 
** @return                                                                                         
**/  
UNS8 setState(CO_Data* d, e_nodeState newState)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b08a      	sub	sp, #40	; 0x28
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	460b      	mov	r3, r1
 800a80e:	70fb      	strb	r3, [r7, #3]
	if(newState != d->nodeState){
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a816:	78fa      	ldrb	r2, [r7, #3]
 800a818:	429a      	cmp	r2, r3
 800a81a:	f000 8096 	beq.w	800a94a <setState+0x146>
		switch( newState ){
 800a81e:	78fb      	ldrb	r3, [r7, #3]
 800a820:	2b04      	cmp	r3, #4
 800a822:	d06c      	beq.n	800a8fe <setState+0xfa>
 800a824:	2b04      	cmp	r3, #4
 800a826:	dc02      	bgt.n	800a82e <setState+0x2a>
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d005      	beq.n	800a838 <setState+0x34>
 800a82c:	e08b      	b.n	800a946 <setState+0x142>
 800a82e:	2b05      	cmp	r3, #5
 800a830:	d041      	beq.n	800a8b6 <setState+0xb2>
 800a832:	2b7f      	cmp	r3, #127	; 0x7f
 800a834:	d024      	beq.n	800a880 <setState+0x7c>
 800a836:	e086      	b.n	800a946 <setState+0x142>
			/* start Lss */
			case Initialisation:
			{
				s_state_communication newCommunicationState = {1, 0, 0, 0, 0, 0, 0};
 800a838:	2301      	movs	r3, #1
 800a83a:	f887 3020 	strb.w	r3, [r7, #32]
 800a83e:	2300      	movs	r3, #0
 800a840:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800a844:	2300      	movs	r3, #0
 800a846:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a84a:	2300      	movs	r3, #0
 800a84c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a850:	2300      	movs	r3, #0
 800a852:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800a856:	2300      	movs	r3, #0
 800a858:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a85c:	2300      	movs	r3, #0
 800a85e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				d->nodeState = Initialisation;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
				switchCommunicationState(d, &newCommunicationState);
 800a86a:	f107 0320 	add.w	r3, r7, #32
 800a86e:	4619      	mov	r1, r3
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f7ff fef1 	bl	800a658 <switchCommunicationState>
				/* call user app init callback now. */
				/* d->initialisation MUST NOT CALL SetState */
				(*d->initialisation)(d);	
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	4798      	blx	r3
			/* App don't have to call SetState(d, Pre_operational) */
								
			case Pre_operational:
			{
				
				s_state_communication newCommunicationState = {0, 1, 1, 1, 1, 0, 1};
 800a880:	4a36      	ldr	r2, [pc, #216]	; (800a95c <setState+0x158>)
 800a882:	f107 0318 	add.w	r3, r7, #24
 800a886:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a88a:	6018      	str	r0, [r3, #0]
 800a88c:	3304      	adds	r3, #4
 800a88e:	8019      	strh	r1, [r3, #0]
 800a890:	3302      	adds	r3, #2
 800a892:	0c0a      	lsrs	r2, r1, #16
 800a894:	701a      	strb	r2, [r3, #0]
				d->nodeState = Pre_operational;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	227f      	movs	r2, #127	; 0x7f
 800a89a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
				switchCommunicationState(d, &newCommunicationState);
 800a89e:	f107 0318 	add.w	r3, r7, #24
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7ff fed7 	bl	800a658 <switchCommunicationState>
                (*d->preOperational)(d);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	4798      	blx	r3
			}
			break;
 800a8b4:	e04a      	b.n	800a94c <setState+0x148>
								
			case Operational:
			if(d->nodeState == Initialisation) return 0xFF;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <setState+0xc0>
 800a8c0:	23ff      	movs	r3, #255	; 0xff
 800a8c2:	e046      	b.n	800a952 <setState+0x14e>
			{
				s_state_communication newCommunicationState = {0, 1, 1, 1, 1, 1, 0};
 800a8c4:	4a26      	ldr	r2, [pc, #152]	; (800a960 <setState+0x15c>)
 800a8c6:	f107 0310 	add.w	r3, r7, #16
 800a8ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a8ce:	6018      	str	r0, [r3, #0]
 800a8d0:	3304      	adds	r3, #4
 800a8d2:	8019      	strh	r1, [r3, #0]
 800a8d4:	3302      	adds	r3, #2
 800a8d6:	0c0a      	lsrs	r2, r1, #16
 800a8d8:	701a      	strb	r2, [r3, #0]
				d->nodeState = Operational;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2205      	movs	r2, #5
 800a8de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
				newState = Operational;
 800a8e2:	2305      	movs	r3, #5
 800a8e4:	70fb      	strb	r3, [r7, #3]
				switchCommunicationState(d, &newCommunicationState);
 800a8e6:	f107 0310 	add.w	r3, r7, #16
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f7ff feb3 	bl	800a658 <switchCommunicationState>
				(*d->operational)(d);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	4798      	blx	r3
			}
			break;
 800a8fc:	e026      	b.n	800a94c <setState+0x148>
						
			case Stopped:
			if(d->nodeState == Initialisation) return 0xFF;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a904:	2b00      	cmp	r3, #0
 800a906:	d101      	bne.n	800a90c <setState+0x108>
 800a908:	23ff      	movs	r3, #255	; 0xff
 800a90a:	e022      	b.n	800a952 <setState+0x14e>
			{
				s_state_communication newCommunicationState = {0, 0, 0, 0, 1, 0, 1};
 800a90c:	4a15      	ldr	r2, [pc, #84]	; (800a964 <setState+0x160>)
 800a90e:	f107 0308 	add.w	r3, r7, #8
 800a912:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a916:	6018      	str	r0, [r3, #0]
 800a918:	3304      	adds	r3, #4
 800a91a:	8019      	strh	r1, [r3, #0]
 800a91c:	3302      	adds	r3, #2
 800a91e:	0c0a      	lsrs	r2, r1, #16
 800a920:	701a      	strb	r2, [r3, #0]
				d->nodeState = Stopped;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2204      	movs	r2, #4
 800a926:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
				newState = Stopped;
 800a92a:	2304      	movs	r3, #4
 800a92c:	70fb      	strb	r3, [r7, #3]
				switchCommunicationState(d, &newCommunicationState);
 800a92e:	f107 0308 	add.w	r3, r7, #8
 800a932:	4619      	mov	r1, r3
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f7ff fe8f 	bl	800a658 <switchCommunicationState>
				(*d->stopped)(d);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	4798      	blx	r3
			}
			break;
 800a944:	e002      	b.n	800a94c <setState+0x148>
			default:
				return 0xFF;
 800a946:	23ff      	movs	r3, #255	; 0xff
 800a948:	e003      	b.n	800a952 <setState+0x14e>

		}/* end switch case */
	
	}
 800a94a:	bf00      	nop
	/* d->nodeState contains the final state */
	/* may not be the requested state */
    return d->nodeState;  
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
}
 800a952:	4618      	mov	r0, r3
 800a954:	3728      	adds	r7, #40	; 0x28
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	0800e860 	.word	0x0800e860
 800a960:	0800e868 	.word	0x0800e868
 800a964:	0800e870 	.word	0x0800e870

0800a968 <getNodeId>:
** @param d                                                                                        
**                                                                                                 
** @return                                                                                         
**/ 
UNS8 getNodeId(CO_Data* d)
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  return *d->bDeviceNodeId;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	781b      	ldrb	r3, [r3, #0]
}
 800a976:	4618      	mov	r0, r3
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bc80      	pop	{r7}
 800a97e:	4770      	bx	lr

0800a980 <setNodeId>:
**                                                                                                 
** @param d                                                                                        
** @param nodeId                                                                                   
**/   
void setNodeId(CO_Data* d, UNS8 nodeId)
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	460b      	mov	r3, r1
 800a98a:	70fb      	strb	r3, [r7, #3]
  UNS16 offset = d->firstIndex->SDO_SVR;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	695b      	ldr	r3, [r3, #20]
 800a990:	881b      	ldrh	r3, [r3, #0]
 800a992:	81fb      	strh	r3, [r7, #14]
  	*d->bDeviceNodeId = nodeId;
  	return;
  }
  else
#endif
  if(!(nodeId>0 && nodeId<=127)){
 800a994:	78fb      	ldrb	r3, [r7, #3]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d065      	beq.n	800aa66 <setNodeId+0xe6>
 800a99a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	db61      	blt.n	800aa66 <setNodeId+0xe6>
	  MSG_WAR(0x2D01, "Invalid NodeID",nodeId);
	  return;
  }

  if(offset){
 800a9a2:	89fb      	ldrh	r3, [r7, #14]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d043      	beq.n	800aa30 <setNodeId+0xb0>
    /* Adjust COB-ID Client->Server (rx) only id already set to default value or id not valid (id==0xFF)*/
    if((*(UNS32*)d->objdict[offset].pSubindex[1].pObject == ((UNS32)0x600) + *d->bDeviceNodeId)||(*d->bDeviceNodeId==0xFF)){
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	89fb      	ldrh	r3, [r7, #14]
 800a9ae:	00db      	lsls	r3, r3, #3
 800a9b0:	4413      	add	r3, r2
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	3310      	adds	r3, #16
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d004      	beq.n	800a9d2 <setNodeId+0x52>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	2bff      	cmp	r3, #255	; 0xff
 800a9d0:	d10c      	bne.n	800a9ec <setNodeId+0x6c>
      /* cob_id_client = 0x600 + nodeId; */
      *(UNS32*)d->objdict[offset].pSubindex[1].pObject = 0x600 + nodeId;
 800a9d2:	78fb      	ldrb	r3, [r7, #3]
 800a9d4:	f503 61c0 	add.w	r1, r3, #1536	; 0x600
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685a      	ldr	r2, [r3, #4]
 800a9dc:	89fb      	ldrh	r3, [r7, #14]
 800a9de:	00db      	lsls	r3, r3, #3
 800a9e0:	4413      	add	r3, r2
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	3310      	adds	r3, #16
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	460a      	mov	r2, r1
 800a9ea:	601a      	str	r2, [r3, #0]
    }
    /* Adjust COB-ID Server -> Client (tx) only id already set to default value or id not valid (id==0xFF)*/
    if((*(UNS32*)d->objdict[offset].pSubindex[2].pObject == ((UNS32)0x580) + *d->bDeviceNodeId)||(*d->bDeviceNodeId==0xFF)){
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	685a      	ldr	r2, [r3, #4]
 800a9f0:	89fb      	ldrh	r3, [r7, #14]
 800a9f2:	00db      	lsls	r3, r3, #3
 800a9f4:	4413      	add	r3, r2
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	3320      	adds	r3, #32
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d004      	beq.n	800aa16 <setNodeId+0x96>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	2bff      	cmp	r3, #255	; 0xff
 800aa14:	d10c      	bne.n	800aa30 <setNodeId+0xb0>
      /* cob_id_server = 0x580 + nodeId; */
      *(UNS32*)d->objdict[offset].pSubindex[2].pObject = 0x580 + nodeId;
 800aa16:	78fb      	ldrb	r3, [r7, #3]
 800aa18:	f503 61b0 	add.w	r1, r3, #1408	; 0x580
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	685a      	ldr	r2, [r3, #4]
 800aa20:	89fb      	ldrh	r3, [r7, #14]
 800aa22:	00db      	lsls	r3, r3, #3
 800aa24:	4413      	add	r3, r2
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	3320      	adds	r3, #32
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	460a      	mov	r2, r1
 800aa2e:	601a      	str	r2, [r3, #0]
      offset ++;
    }
  }*/

  /* Update EMCY COB-ID if already set to default*/
  if((*d->error_cobid == *d->bDeviceNodeId + (UNS32)0x80)||(*d->bDeviceNodeId==0xFF))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	3380      	adds	r3, #128	; 0x80
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d004      	beq.n	800aa4e <setNodeId+0xce>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	2bff      	cmp	r3, #255	; 0xff
 800aa4c:	d106      	bne.n	800aa5c <setNodeId+0xdc>
    *d->error_cobid = nodeId + 0x80;
 800aa4e:	78fb      	ldrb	r3, [r7, #3]
 800aa50:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800aa5a:	601a      	str	r2, [r3, #0]

  /* bDeviceNodeId is defined in the object dictionary. */
  *d->bDeviceNodeId = nodeId;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	78fa      	ldrb	r2, [r7, #3]
 800aa62:	701a      	strb	r2, [r3, #0]
 800aa64:	e000      	b.n	800aa68 <setNodeId+0xe8>
	  return;
 800aa66:	bf00      	nop
}
 800aa68:	3714      	adds	r7, #20
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bc80      	pop	{r7}
 800aa6e:	4770      	bx	lr

0800aa70 <SyncAlarm>:
**                                                                                                 
** @param d                                                                                        
** @param id                                                                                       
**/   
void SyncAlarm(CO_Data* d, UNS32 id)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
	(void)id;
	sendSYNC(d) ;
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 f8a1 	bl	800abc2 <sendSYNC>
}
 800aa80:	bf00      	nop
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <OnCOB_ID_SyncUpdate>:
** @param unsused_bSubindex                                                                        
**                                                                                                 
** @return                                                                                         
**/  
UNS32 OnCOB_ID_SyncUpdate(CO_Data* d, const indextable * unsused_indextable, UNS8 unsused_bSubindex)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	4613      	mov	r3, r2
 800aa94:	71fb      	strb	r3, [r7, #7]
	(void)unsused_indextable;
	(void)unsused_bSubindex;
	startSYNC(d);
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f000 f806 	bl	800aaa8 <startSYNC>
	return 0;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
	...

0800aaa8 <startSYNC>:
**                                                                                                 
**                                                                                                 
** @param d                                                                                        
**/ 
void startSYNC(CO_Data* d)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af02      	add	r7, sp, #8
 800aaae:	6078      	str	r0, [r7, #4]
	if(d->syncTimer != TIMER_NONE){
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 800aab6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaba:	d002      	beq.n	800aac2 <startSYNC+0x1a>
		stopSYNC(d);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 f843 	bl	800ab48 <stopSYNC>
	}

	RegisterSetODentryCallBack(d, 0x1005, 0, &OnCOB_ID_SyncUpdate);//ע��ص�����
 800aac2:	4b1e      	ldr	r3, [pc, #120]	; (800ab3c <startSYNC+0x94>)
 800aac4:	2200      	movs	r2, #0
 800aac6:	f241 0105 	movw	r1, #4101	; 0x1005
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f7fa fa08 	bl	8004ee0 <RegisterSetODentryCallBack>
	RegisterSetODentryCallBack(d, 0x1006, 0, &OnCOB_ID_SyncUpdate);
 800aad0:	4b1a      	ldr	r3, [pc, #104]	; (800ab3c <startSYNC+0x94>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	f241 0106 	movw	r1, #4102	; 0x1006
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f7fa fa01 	bl	8004ee0 <RegisterSetODentryCallBack>

	if(*d->COB_ID_Sync & 0x40000000ul && *d->Sync_Cycle_Period)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d021      	beq.n	800ab32 <startSYNC+0x8a>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d01b      	beq.n	800ab32 <startSYNC+0x8a>
	{
		d->syncTimer = SetAlarm(
				d,
				0 /*No id needed*/,
				&SyncAlarm,
				US_TO_TIMEVAL(*d->Sync_Cycle_Period), 
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab00:	681b      	ldr	r3, [r3, #0]
		d->syncTimer = SetAlarm(
 800ab02:	4a0f      	ldr	r2, [pc, #60]	; (800ab40 <startSYNC+0x98>)
 800ab04:	fba2 2303 	umull	r2, r3, r2, r3
 800ab08:	08d9      	lsrs	r1, r3, #3
				US_TO_TIMEVAL(*d->Sync_Cycle_Period));
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab10:	681b      	ldr	r3, [r3, #0]
		d->syncTimer = SetAlarm(
 800ab12:	4a0b      	ldr	r2, [pc, #44]	; (800ab40 <startSYNC+0x98>)
 800ab14:	fba2 2303 	umull	r2, r3, r2, r3
 800ab18:	08db      	lsrs	r3, r3, #3
 800ab1a:	9300      	str	r3, [sp, #0]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	4a09      	ldr	r2, [pc, #36]	; (800ab44 <startSYNC+0x9c>)
 800ab20:	2100      	movs	r1, #0
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 f87e 	bl	800ac24 <SetAlarm>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
	}
}
 800ab32:	bf00      	nop
 800ab34:	3708      	adds	r7, #8
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	0800aa89 	.word	0x0800aa89
 800ab40:	cccccccd 	.word	0xcccccccd
 800ab44:	0800aa71 	.word	0x0800aa71

0800ab48 <stopSYNC>:
**                                                                                                 
**                                                                                                 
** @param d                                                                                        
**/   
void stopSYNC(CO_Data* d)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
    RegisterSetODentryCallBack(d, 0x1005, 0, NULL);
 800ab50:	2300      	movs	r3, #0
 800ab52:	2200      	movs	r2, #0
 800ab54:	f241 0105 	movw	r1, #4101	; 0x1005
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f7fa f9c1 	bl	8004ee0 <RegisterSetODentryCallBack>
    RegisterSetODentryCallBack(d, 0x1006, 0, NULL);
 800ab5e:	2300      	movs	r3, #0
 800ab60:	2200      	movs	r2, #0
 800ab62:	f241 0106 	movw	r1, #4102	; 0x1006
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f7fa f9ba 	bl	8004ee0 <RegisterSetODentryCallBack>
	d->syncTimer = DelAlarm(d->syncTimer);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 800ab72:	4618      	mov	r0, r3
 800ab74:	f000 f8d2 	bl	800ad1c <DelAlarm>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
}
 800ab82:	bf00      	nop
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <sendSYNCMessage>:
** @param d                                                                                
**                                                                                                 
** @return                                                                                         
**/  
UNS8 sendSYNCMessage(CO_Data* d)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b086      	sub	sp, #24
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
  Message m;
  
  MSG_WAR(0x3001, "sendSYNC ", 0);
  
  m.cob_id = (UNS16)UNS16_LE(*d->COB_ID_Sync);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	81bb      	strh	r3, [r7, #12]
  m.rtr = NOT_A_REQUEST;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	73bb      	strb	r3, [r7, #14]
  m.len = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	73fb      	strb	r3, [r7, #15]
  
  return canSend(d->canHandle,&m);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 800abac:	f107 020c 	add.w	r2, r7, #12
 800abb0:	4611      	mov	r1, r2
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7f6 fab0 	bl	8001118 <canSend>
 800abb8:	4603      	mov	r3, r0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3718      	adds	r7, #24
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <sendSYNC>:
** @param d                                                                                  
**                                                                                                 
** @return                                                                                         
**/  
UNS8 sendSYNC(CO_Data* d)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b084      	sub	sp, #16
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  UNS8 res;
  res = sendSYNCMessage(d);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f7ff ffdd 	bl	800ab8a <sendSYNCMessage>
 800abd0:	4603      	mov	r3, r0
 800abd2:	73fb      	strb	r3, [r7, #15]
  proceedSYNC(d) ; 
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 f805 	bl	800abe4 <proceedSYNC>
  return res ;
 800abda:	7bfb      	ldrb	r3, [r7, #15]
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <proceedSYNC>:
** @param d                                                                                    
**                                                                                                 
** @return                                                                                         
**/ 
UNS8 proceedSYNC(CO_Data* d)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]

  UNS8 res;
  
  MSG_WAR(0x3002, "SYNC received. Proceed. ", 0);
  
  (*d->post_sync)(d);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	4798      	blx	r3

  /* only operational state allows PDO transmission */
  if(! d->CurrentCommunicationState.csPDO) 
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d101      	bne.n	800ac04 <proceedSYNC+0x20>
    return 0;
 800ac00:	2300      	movs	r3, #0
 800ac02:	e00b      	b.n	800ac1c <proceedSYNC+0x38>

  res = _sendPDOevent(d, 1 /*isSyncEvent*/ );
 800ac04:	2101      	movs	r1, #1
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7fa fee4 	bl	80059d4 <_sendPDOevent>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	73fb      	strb	r3, [r7, #15]
  
  /*Call user app callback*/
  (*d->post_TPDO)(d);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	4798      	blx	r3
  
  return res;
 800ac1a:	7bfb      	ldrb	r3, [r7, #15]
  
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3710      	adds	r7, #16
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <SetAlarm>:
** @param period
**
** @return
**/
TIMER_HANDLE SetAlarm(CO_Data* d, UNS32 id, TimerCallback_t callback, TIMEVAL value, TIMEVAL period)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b088      	sub	sp, #32
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	607a      	str	r2, [r7, #4]
 800ac30:	603b      	str	r3, [r7, #0]
	TIMER_HANDLE row_number;
	s_timer_entry *row;

	/* in order to decide new timer setting we have to run over all timer rows */
	for(row_number=0, row=timers; row_number <= last_timer_raw + 1 && row_number < MAX_NB_TIMER; row_number++, row++)
 800ac32:	2300      	movs	r3, #0
 800ac34:	83fb      	strh	r3, [r7, #30]
 800ac36:	4b36      	ldr	r3, [pc, #216]	; (800ad10 <SetAlarm+0xec>)
 800ac38:	61bb      	str	r3, [r7, #24]
 800ac3a:	e057      	b.n	800acec <SetAlarm+0xc8>
	{
		if (callback && 	/* if something to store */
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d04b      	beq.n	800acda <SetAlarm+0xb6>
		   row->state == TIMER_FREE) /* and empty row */
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	781b      	ldrb	r3, [r3, #0]
		if (callback && 	/* if something to store */
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d147      	bne.n	800acda <SetAlarm+0xb6>
		{	/* just store */
			TIMEVAL real_timer_value;
			TIMEVAL elapsed_time;

			if (row_number == last_timer_raw + 1) last_timer_raw++;
 800ac4a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800ac4e:	4b31      	ldr	r3, [pc, #196]	; (800ad14 <SetAlarm+0xf0>)
 800ac50:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac54:	3301      	adds	r3, #1
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d108      	bne.n	800ac6c <SetAlarm+0x48>
 800ac5a:	4b2e      	ldr	r3, [pc, #184]	; (800ad14 <SetAlarm+0xf0>)
 800ac5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	3301      	adds	r3, #1
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	b21a      	sxth	r2, r3
 800ac68:	4b2a      	ldr	r3, [pc, #168]	; (800ad14 <SetAlarm+0xf0>)
 800ac6a:	801a      	strh	r2, [r3, #0]

			elapsed_time = getElapsedTime();
 800ac6c:	f7f6 fa06 	bl	800107c <getElapsedTime>
 800ac70:	6178      	str	r0, [r7, #20]
			/* set next wakeup alarm if new entry is sooner than others, or if it is alone */
			real_timer_value = value;
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	613b      	str	r3, [r7, #16]
			real_timer_value = min_val(real_timer_value, TIMEVAL_MAX);
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	bf28      	it	cs
 800ac80:	4613      	movcs	r3, r2
 800ac82:	613b      	str	r3, [r7, #16]
			
			//计算定时器到点是否，比已经注册了的定时器块
			if (total_sleep_time > elapsed_time && total_sleep_time - elapsed_time > real_timer_value)
 800ac84:	4b24      	ldr	r3, [pc, #144]	; (800ad18 <SetAlarm+0xf4>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	697a      	ldr	r2, [r7, #20]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d20e      	bcs.n	800acac <SetAlarm+0x88>
 800ac8e:	4b22      	ldr	r3, [pc, #136]	; (800ad18 <SetAlarm+0xf4>)
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	693a      	ldr	r2, [r7, #16]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d207      	bcs.n	800acac <SetAlarm+0x88>
			{
				total_sleep_time = elapsed_time + real_timer_value;
 800ac9c:	697a      	ldr	r2, [r7, #20]
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	4413      	add	r3, r2
 800aca2:	4a1d      	ldr	r2, [pc, #116]	; (800ad18 <SetAlarm+0xf4>)
 800aca4:	6013      	str	r3, [r2, #0]
				setTimer(real_timer_value);
 800aca6:	6938      	ldr	r0, [r7, #16]
 800aca8:	f7f6 fa0c 	bl	80010c4 <setTimer>
			}
			row->callback = callback;
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	609a      	str	r2, [r3, #8]
			row->d = d;
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	605a      	str	r2, [r3, #4]
			row->id = id;
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	68ba      	ldr	r2, [r7, #8]
 800acbc:	60da      	str	r2, [r3, #12]
			row->val = value + elapsed_time;	//加上失去的时间
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	441a      	add	r2, r3
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	611a      	str	r2, [r3, #16]
			row->interval = period;
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800accc:	615a      	str	r2, [r3, #20]
			row->state = TIMER_ARMED;
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	2201      	movs	r2, #1
 800acd2:	701a      	strb	r2, [r3, #0]
			return row_number;
 800acd4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800acd8:	e016      	b.n	800ad08 <SetAlarm+0xe4>
	for(row_number=0, row=timers; row_number <= last_timer_raw + 1 && row_number < MAX_NB_TIMER; row_number++, row++)
 800acda:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800acde:	b29b      	uxth	r3, r3
 800ace0:	3301      	adds	r3, #1
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	83fb      	strh	r3, [r7, #30]
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	3318      	adds	r3, #24
 800acea:	61bb      	str	r3, [r7, #24]
 800acec:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800acf0:	4b08      	ldr	r3, [pc, #32]	; (800ad14 <SetAlarm+0xf0>)
 800acf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800acf6:	3301      	adds	r3, #1
 800acf8:	429a      	cmp	r2, r3
 800acfa:	dc03      	bgt.n	800ad04 <SetAlarm+0xe0>
 800acfc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ad00:	2b07      	cmp	r3, #7
 800ad02:	dd9b      	ble.n	800ac3c <SetAlarm+0x18>
		}
	}

	return TIMER_NONE;
 800ad04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3720      	adds	r7, #32
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	20005c58 	.word	0x20005c58
 800ad14:	20005b68 	.word	0x20005b68
 800ad18:	20005b64 	.word	0x20005b64

0800ad1c <DelAlarm>:
** @param handle
**
** @return
**/
TIMER_HANDLE DelAlarm(TIMER_HANDLE handle)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	4603      	mov	r3, r0
 800ad24:	80fb      	strh	r3, [r7, #6]
	/* Quick and dirty. system timer will continue to be trigged, but no action will be preformed. */
	MSG_WAR(0x3320, "DelAlarm. handle = ", handle);
	if(handle != TIMER_NONE)
 800ad26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad2e:	d019      	beq.n	800ad64 <DelAlarm+0x48>
	{
		if(handle == last_timer_raw)
 800ad30:	4b10      	ldr	r3, [pc, #64]	; (800ad74 <DelAlarm+0x58>)
 800ad32:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ad36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d108      	bne.n	800ad50 <DelAlarm+0x34>
			last_timer_raw--;
 800ad3e:	4b0d      	ldr	r3, [pc, #52]	; (800ad74 <DelAlarm+0x58>)
 800ad40:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	3b01      	subs	r3, #1
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	b21a      	sxth	r2, r3
 800ad4c:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <DelAlarm+0x58>)
 800ad4e:	801a      	strh	r2, [r3, #0]
		timers[handle].state = TIMER_FREE;
 800ad50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ad54:	4908      	ldr	r1, [pc, #32]	; (800ad78 <DelAlarm+0x5c>)
 800ad56:	4613      	mov	r3, r2
 800ad58:	005b      	lsls	r3, r3, #1
 800ad5a:	4413      	add	r3, r2
 800ad5c:	00db      	lsls	r3, r3, #3
 800ad5e:	440b      	add	r3, r1
 800ad60:	2200      	movs	r2, #0
 800ad62:	701a      	strb	r2, [r3, #0]
	}
	return TIMER_NONE;
 800ad64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bc80      	pop	{r7}
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	20005b68 	.word	0x20005b68
 800ad78:	20005c58 	.word	0x20005c58

0800ad7c <TimeDispatch>:
** ------  TimeDispatch is called on each timer expiration ----
** 定时器中断中调用
**/
int tdcount=0;
void TimeDispatch(void)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b086      	sub	sp, #24
 800ad80:	af00      	add	r7, sp, #0
	TIMER_HANDLE i;
	TIMEVAL next_wakeup = TIMEVAL_MAX; /* used to compute when should normaly occur next wakeup 所有timer中最小的唤醒时间*/
 800ad82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad86:	613b      	str	r3, [r7, #16]
	

	/* First run : change timer state depending on time */
	/* Get time since timer signal 获取中断发生之后经过的时间*/
	UNS32 overrun = (UNS32)getElapsedTime();//此时 elapsetime和lastcounterval都是0。防止两个很接近的定时，被遗漏
 800ad88:	f7f6 f978 	bl	800107c <getElapsedTime>
 800ad8c:	60b8      	str	r0, [r7, #8]

	TIMEVAL real_total_sleep_time = total_sleep_time + overrun;//定时器真实沉睡时间
 800ad8e:	4b46      	ldr	r3, [pc, #280]	; (800aea8 <TimeDispatch+0x12c>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	4413      	add	r3, r2
 800ad96:	607b      	str	r3, [r7, #4]

	s_timer_entry *row;

	for(i=0, row = timers; i <= last_timer_raw; i++, row++)
 800ad98:	2300      	movs	r3, #0
 800ad9a:	82fb      	strh	r3, [r7, #22]
 800ad9c:	4b43      	ldr	r3, [pc, #268]	; (800aeac <TimeDispatch+0x130>)
 800ad9e:	60fb      	str	r3, [r7, #12]
 800ada0:	e042      	b.n	800ae28 <TimeDispatch+0xac>
	{
		if (row->state & TIMER_ARMED) /* if row is active */
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	f003 0301 	and.w	r3, r3, #1
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d033      	beq.n	800ae16 <TimeDispatch+0x9a>
		{
			if (row->val <= real_total_sleep_time) /* to be trigged */
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d320      	bcc.n	800adfa <TimeDispatch+0x7e>
			{
				if (!row->interval) /* if simply outdated */
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	695b      	ldr	r3, [r3, #20]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d103      	bne.n	800adc8 <TimeDispatch+0x4c>
				{
					row->state = TIMER_TRIG; /* ask for trig */
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2202      	movs	r2, #2
 800adc4:	701a      	strb	r2, [r3, #0]
 800adc6:	e026      	b.n	800ae16 <TimeDispatch+0x9a>
				}
				else /* or period have expired 是周期触发的*/
				{
					/* set val as interval, with 32 bit overrun correction, */
					/* modulo for 64 bit not available on all platforms     */
					row->val = row->interval - (overrun % (UNS32)row->interval);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6959      	ldr	r1, [r3, #20]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	695a      	ldr	r2, [r3, #20]
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	fbb3 f0f2 	udiv	r0, r3, r2
 800add6:	fb02 f200 	mul.w	r2, r2, r0
 800adda:	1a9b      	subs	r3, r3, r2
 800addc:	1aca      	subs	r2, r1, r3
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	611a      	str	r2, [r3, #16]
					row->state = TIMER_TRIG_PERIOD; /* ask for trig, periodic */
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2203      	movs	r2, #3
 800ade6:	701a      	strb	r2, [r3, #0]
					/* Check if this new timer value is the soonest */
					if(row->val < next_wakeup)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	693a      	ldr	r2, [r7, #16]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d911      	bls.n	800ae16 <TimeDispatch+0x9a>
						next_wakeup = row->val;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	691b      	ldr	r3, [r3, #16]
 800adf6:	613b      	str	r3, [r7, #16]
 800adf8:	e00d      	b.n	800ae16 <TimeDispatch+0x9a>
				}
			}
			else
			{
				/* Each armed timer value in decremented. */
				row->val -= real_total_sleep_time;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	691a      	ldr	r2, [r3, #16]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	1ad2      	subs	r2, r2, r3
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	611a      	str	r2, [r3, #16]

				/* Check if this new timer value is the soonest */
				if(row->val < next_wakeup)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	693a      	ldr	r2, [r7, #16]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d902      	bls.n	800ae16 <TimeDispatch+0x9a>
					next_wakeup = row->val;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	613b      	str	r3, [r7, #16]
	for(i=0, row = timers; i <= last_timer_raw; i++, row++)
 800ae16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	82fb      	strh	r3, [r7, #22]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	3318      	adds	r3, #24
 800ae26:	60fb      	str	r3, [r7, #12]
 800ae28:	4b21      	ldr	r3, [pc, #132]	; (800aeb0 <TimeDispatch+0x134>)
 800ae2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	ddb5      	ble.n	800ada2 <TimeDispatch+0x26>
			}
		}
	}

	/* Remember how much time we should sleep. */
	total_sleep_time = next_wakeup;
 800ae36:	4a1c      	ldr	r2, [pc, #112]	; (800aea8 <TimeDispatch+0x12c>)
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	6013      	str	r3, [r2, #0]

	/*** 很重要     Set timer to soonest occurence */
	setTimer(next_wakeup);
 800ae3c:	6938      	ldr	r0, [r7, #16]
 800ae3e:	f7f6 f941 	bl	80010c4 <setTimer>

	/* Then trig them or not. */
	for(i=0, row = timers; i<=last_timer_raw; i++, row++)
 800ae42:	2300      	movs	r3, #0
 800ae44:	82fb      	strh	r3, [r7, #22]
 800ae46:	4b19      	ldr	r3, [pc, #100]	; (800aeac <TimeDispatch+0x130>)
 800ae48:	60fb      	str	r3, [r7, #12]
 800ae4a:	e021      	b.n	800ae90 <TimeDispatch+0x114>
	{
		if (row->state & TIMER_TRIG) //TIMER_TRIG_PERIOD也满足条件
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	f003 0302 	and.w	r3, r3, #2
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d012      	beq.n	800ae7e <TimeDispatch+0x102>
		{
			row->state &= ~TIMER_TRIG; /* reset trig state (will be free if not periodic) TIMER_TRIG_PERIOD 变成TIMER_ARMED*/
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	f023 0302 	bic.w	r3, r3, #2
 800ae60:	b2da      	uxtb	r2, r3
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	701a      	strb	r2, [r3, #0]
			if(row->callback)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d007      	beq.n	800ae7e <TimeDispatch+0x102>
				(*row->callback)(row->d, row->id); /* trig ! */
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	6850      	ldr	r0, [r2, #4]
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	68d2      	ldr	r2, [r2, #12]
 800ae7a:	4611      	mov	r1, r2
 800ae7c:	4798      	blx	r3
	for(i=0, row = timers; i<=last_timer_raw; i++, row++)
 800ae7e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	3301      	adds	r3, #1
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	82fb      	strh	r3, [r7, #22]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	3318      	adds	r3, #24
 800ae8e:	60fb      	str	r3, [r7, #12]
 800ae90:	4b07      	ldr	r3, [pc, #28]	; (800aeb0 <TimeDispatch+0x134>)
 800ae92:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	ddd6      	ble.n	800ae4c <TimeDispatch+0xd0>
		}
	}
}
 800ae9e:	bf00      	nop
 800aea0:	3718      	adds	r7, #24
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	20005b64 	.word	0x20005b64
 800aeac:	20005c58 	.word	0x20005c58
 800aeb0:	20005b68 	.word	0x20005b68

0800aeb4 <OSInitHookBegin>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void  OSInitHookBegin (void)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	af00      	add	r7, sp, #0
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 800aeb8:	bf00      	nop
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bc80      	pop	{r7}
 800aebe:	4770      	bx	lr

0800aec0 <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void  OSInitHookEnd (void)
{
 800aec0:	b480      	push	{r7}
 800aec2:	af00      	add	r7, sp, #0
}
 800aec4:	bf00      	nop
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bc80      	pop	{r7}
 800aeca:	4770      	bx	lr

0800aecc <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void  OSTaskCreateHook (OS_TCB *ptcb)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0
    App_TaskCreateHook(ptcb);
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f7f6 fa31 	bl	800133c <App_TaskCreateHook>
#else
    (void)ptcb;                                  /* Prevent compiler warning                           */
#endif
}
 800aeda:	bf00      	nop
 800aedc:	3708      	adds	r7, #8
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <OSTaskIdleHook>:
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION >= 251
void  OSTaskIdleHook (void)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0
    App_TaskIdleHook();
 800aee6:	f7f6 fa1d 	bl	8001324 <App_TaskIdleHook>
#endif
}
 800aeea:	bf00      	nop
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <OSTaskStatHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0
void  OSTaskStatHook (void)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0
    App_TaskStatHook();
 800aef2:	f7f6 fa2c 	bl	800134e <App_TaskStatHook>
#endif
}
 800aef6:	bf00      	nop
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <OSTaskStkInit>:
*              2) All tasks run in Thread mode, using process stack.
*********************************************************************************************************
*/

OS_STK *OSTaskStkInit (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT16U opt)
{
 800aefa:	b480      	push	{r7}
 800aefc:	b087      	sub	sp, #28
 800aefe:	af00      	add	r7, sp, #0
 800af00:	60f8      	str	r0, [r7, #12]
 800af02:	60b9      	str	r1, [r7, #8]
 800af04:	607a      	str	r2, [r7, #4]
 800af06:	807b      	strh	r3, [r7, #2]
    OS_STK *stk;


    (void)opt;                                   /* 'opt' is not used, prevent warning                 */
    stk       = ptos;                            /* Load stack pointer                                 */
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	617b      	str	r3, [r7, #20]

                                                 /* Registers stacked as if auto-saved on exception    */
    *(stk)    = (INT32U)0x01000000L;             /* xPSR                                               */
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800af12:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)task;                    /* Entry Point                                        */
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	3b04      	subs	r3, #4
 800af18:	617b      	str	r3, [r7, #20]
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0xFFFFFFFEL;             /* R14 (LR) (init value will cause fault if ever used)*/
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	3b04      	subs	r3, #4
 800af24:	617b      	str	r3, [r7, #20]
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	f06f 0201 	mvn.w	r2, #1
 800af2c:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x12121212L;             /* R12                                                */
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	3b04      	subs	r3, #4
 800af32:	617b      	str	r3, [r7, #20]
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800af3a:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x03030303L;             /* R3                                                 */
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	3b04      	subs	r3, #4
 800af40:	617b      	str	r3, [r7, #20]
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800af48:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x02020202L;             /* R2                                                 */
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	3b04      	subs	r3, #4
 800af4e:	617b      	str	r3, [r7, #20]
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800af56:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x01010101L;             /* R1                                                 */
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	3b04      	subs	r3, #4
 800af5c:	617b      	str	r3, [r7, #20]
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800af64:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)p_arg;                   /* R0 : argument                                      */
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	3b04      	subs	r3, #4
 800af6a:	617b      	str	r3, [r7, #20]
 800af6c:	68ba      	ldr	r2, [r7, #8]
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	601a      	str	r2, [r3, #0]

                                                 /* Remaining registers saved on process stack         */
    *(--stk)  = (INT32U)0x11111111L;             /* R11                                                */
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	3b04      	subs	r3, #4
 800af76:	617b      	str	r3, [r7, #20]
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800af7e:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x10101010L;             /* R10                                                */
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	3b04      	subs	r3, #4
 800af84:	617b      	str	r3, [r7, #20]
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800af8c:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x09090909L;             /* R9                                                 */
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	3b04      	subs	r3, #4
 800af92:	617b      	str	r3, [r7, #20]
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800af9a:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x08080808L;             /* R8                                                 */
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	3b04      	subs	r3, #4
 800afa0:	617b      	str	r3, [r7, #20]
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800afa8:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x07070707L;             /* R7                                                 */
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	3b04      	subs	r3, #4
 800afae:	617b      	str	r3, [r7, #20]
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800afb6:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x06060606L;             /* R6                                                 */
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	3b04      	subs	r3, #4
 800afbc:	617b      	str	r3, [r7, #20]
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800afc4:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x05050505L;             /* R5                                                 */
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	3b04      	subs	r3, #4
 800afca:	617b      	str	r3, [r7, #20]
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800afd2:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x04040404L;             /* R4                                                 */
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	3b04      	subs	r3, #4
 800afd8:	617b      	str	r3, [r7, #20]
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800afe0:	601a      	str	r2, [r3, #0]

    return (stk);
 800afe2:	697b      	ldr	r3, [r7, #20]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	371c      	adds	r7, #28
 800afe8:	46bd      	mov	sp, r7
 800afea:	bc80      	pop	{r7}
 800afec:	4770      	bx	lr

0800afee <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) && (OS_TASK_SW_HOOK_EN > 0)
void  OSTaskSwHook (void)
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0
    App_TaskSwHook();
 800aff2:	f7f6 f9b4 	bl	800135e <App_TaskSwHook>
#endif
}
 800aff6:	bf00      	nop
 800aff8:	bd80      	pop	{r7, pc}

0800affa <OSTCBInitHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void  OSTCBInitHook (OS_TCB *ptcb)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b082      	sub	sp, #8
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0
    App_TCBInitHook(ptcb);
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7f6 f9b1 	bl	800136a <App_TCBInitHook>
#else
    (void)ptcb;                                  /* Prevent compiler warning                           */
#endif
}
 800b008:	bf00      	nop
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
void  OSTimeTickHook (void)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0
    App_TimeTickHook();
 800b014:	f7f6 f9b2 	bl	800137c <App_TimeTickHook>
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
        OSTmrCtr = 0;
        OSTmrSignal();
    }
#endif
}
 800b018:	bf00      	nop
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	af00      	add	r7, sp, #0
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 800b020:	f7ff ff48 	bl	800aeb4 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 800b024:	f000 fb14 	bl	800b650 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 800b028:	f000 fb4a 	bl	800b6c0 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 800b02c:	f000 fbc4 	bl	800b7b8 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 800b030:	f000 facc 	bl	800b5cc <OS_InitEventList>
#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    OS_MemInit();                                                /* Initialize the memory manager            */
#endif

#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 800b034:	f000 ff72 	bl	800bf1c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 800b038:	f000 fb72 	bl	800b720 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0u
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 800b03c:	f000 fb96 	bl	800b76c <OS_InitTaskStat>

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 800b040:	f7ff ff3e 	bl	800aec0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0u
    OSDebugInit();
#endif
}
 800b044:	bf00      	nop
 800b046:	bd80      	pop	{r7, pc}

0800b048 <OSIntEnter>:
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 800b048:	b480      	push	{r7}
 800b04a:	af00      	add	r7, sp, #0
    if (OSRunning == OS_TRUE) {
 800b04c:	4b08      	ldr	r3, [pc, #32]	; (800b070 <OSIntEnter+0x28>)
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d109      	bne.n	800b068 <OSIntEnter+0x20>
        if (OSIntNesting < 255u) {
 800b054:	4b07      	ldr	r3, [pc, #28]	; (800b074 <OSIntEnter+0x2c>)
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	2bff      	cmp	r3, #255	; 0xff
 800b05a:	d005      	beq.n	800b068 <OSIntEnter+0x20>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 800b05c:	4b05      	ldr	r3, [pc, #20]	; (800b074 <OSIntEnter+0x2c>)
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	3301      	adds	r3, #1
 800b062:	b2da      	uxtb	r2, r3
 800b064:	4b03      	ldr	r3, [pc, #12]	; (800b074 <OSIntEnter+0x2c>)
 800b066:	701a      	strb	r2, [r3, #0]
        }
    }
}
 800b068:	bf00      	nop
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bc80      	pop	{r7}
 800b06e:	4770      	bx	lr
 800b070:	2000866d 	.word	0x2000866d
 800b074:	20008a28 	.word	0x20008a28

0800b078 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 800b07e:	2300      	movs	r3, #0
 800b080:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {
 800b082:	4b1e      	ldr	r3, [pc, #120]	; (800b0fc <OSIntExit+0x84>)
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d133      	bne.n	800b0f2 <OSIntExit+0x7a>
        OS_ENTER_CRITICAL();
 800b08a:	f7f5 f8cb 	bl	8000224 <OS_CPU_SR_Save>
 800b08e:	6078      	str	r0, [r7, #4]
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
 800b090:	4b1b      	ldr	r3, [pc, #108]	; (800b100 <OSIntExit+0x88>)
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d005      	beq.n	800b0a4 <OSIntExit+0x2c>
            OSIntNesting--;
 800b098:	4b19      	ldr	r3, [pc, #100]	; (800b100 <OSIntExit+0x88>)
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	3b01      	subs	r3, #1
 800b09e:	b2da      	uxtb	r2, r3
 800b0a0:	4b17      	ldr	r3, [pc, #92]	; (800b100 <OSIntExit+0x88>)
 800b0a2:	701a      	strb	r2, [r3, #0]
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
 800b0a4:	4b16      	ldr	r3, [pc, #88]	; (800b100 <OSIntExit+0x88>)
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d11f      	bne.n	800b0ec <OSIntExit+0x74>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
 800b0ac:	4b15      	ldr	r3, [pc, #84]	; (800b104 <OSIntExit+0x8c>)
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d11b      	bne.n	800b0ec <OSIntExit+0x74>
                OS_SchedNew();
 800b0b4:	f000 fc28 	bl	800b908 <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 800b0b8:	4b13      	ldr	r3, [pc, #76]	; (800b108 <OSIntExit+0x90>)
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	461a      	mov	r2, r3
 800b0be:	4b13      	ldr	r3, [pc, #76]	; (800b10c <OSIntExit+0x94>)
 800b0c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0c4:	4a12      	ldr	r2, [pc, #72]	; (800b110 <OSIntExit+0x98>)
 800b0c6:	6013      	str	r3, [r2, #0]
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 800b0c8:	4b0f      	ldr	r3, [pc, #60]	; (800b108 <OSIntExit+0x90>)
 800b0ca:	781a      	ldrb	r2, [r3, #0]
 800b0cc:	4b11      	ldr	r3, [pc, #68]	; (800b114 <OSIntExit+0x9c>)
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d00b      	beq.n	800b0ec <OSIntExit+0x74>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 800b0d4:	4b0e      	ldr	r3, [pc, #56]	; (800b110 <OSIntExit+0x98>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0da:	3201      	adds	r2, #1
 800b0dc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 800b0de:	4b0e      	ldr	r3, [pc, #56]	; (800b118 <OSIntExit+0xa0>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	4a0c      	ldr	r2, [pc, #48]	; (800b118 <OSIntExit+0xa0>)
 800b0e6:	6013      	str	r3, [r2, #0]
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 800b0e8:	f7f5 f8b8 	bl	800025c <OSIntCtxSw>
                }
            }
        }
        OS_EXIT_CRITICAL();
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f7f5 f89d 	bl	800022c <OS_CPU_SR_Restore>
    }
}
 800b0f2:	bf00      	nop
 800b0f4:	3708      	adds	r7, #8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	2000866d 	.word	0x2000866d
 800b100:	20008a28 	.word	0x20008a28
 800b104:	2000866c 	.word	0x2000866c
 800b108:	20008674 	.word	0x20008674
 800b10c:	20009388 	.word	0x20009388
 800b110:	20008a10 	.word	0x20008a10
 800b114:	20008675 	.word	0x20008675
 800b118:	200089a0 	.word	0x200089a0

0800b11c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedLock (void)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800b122:	2300      	movs	r3, #0
 800b124:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 800b126:	4b0e      	ldr	r3, [pc, #56]	; (800b160 <OSSchedLock+0x44>)
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d113      	bne.n	800b156 <OSSchedLock+0x3a>
        OS_ENTER_CRITICAL();
 800b12e:	f7f5 f879 	bl	8000224 <OS_CPU_SR_Save>
 800b132:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
 800b134:	4b0b      	ldr	r3, [pc, #44]	; (800b164 <OSSchedLock+0x48>)
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d109      	bne.n	800b150 <OSSchedLock+0x34>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 800b13c:	4b0a      	ldr	r3, [pc, #40]	; (800b168 <OSSchedLock+0x4c>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	2bff      	cmp	r3, #255	; 0xff
 800b142:	d005      	beq.n	800b150 <OSSchedLock+0x34>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 800b144:	4b08      	ldr	r3, [pc, #32]	; (800b168 <OSSchedLock+0x4c>)
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	3301      	adds	r3, #1
 800b14a:	b2da      	uxtb	r2, r3
 800b14c:	4b06      	ldr	r3, [pc, #24]	; (800b168 <OSSchedLock+0x4c>)
 800b14e:	701a      	strb	r2, [r3, #0]
            }
        }
        OS_EXIT_CRITICAL();
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f7f5 f86b 	bl	800022c <OS_CPU_SR_Restore>
    }
}
 800b156:	bf00      	nop
 800b158:	3708      	adds	r7, #8
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	2000866d 	.word	0x2000866d
 800b164:	20008a28 	.word	0x20008a28
 800b168:	2000866c 	.word	0x2000866c

0800b16c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedUnlock (void)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 800b172:	2300      	movs	r3, #0
 800b174:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 800b176:	4b17      	ldr	r3, [pc, #92]	; (800b1d4 <OSSchedUnlock+0x68>)
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d125      	bne.n	800b1ca <OSSchedUnlock+0x5e>
        OS_ENTER_CRITICAL();
 800b17e:	f7f5 f851 	bl	8000224 <OS_CPU_SR_Save>
 800b182:	6078      	str	r0, [r7, #4]
        if (OSLockNesting > 0u) {                          /* Do not decrement if already 0            */
 800b184:	4b14      	ldr	r3, [pc, #80]	; (800b1d8 <OSSchedUnlock+0x6c>)
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d01b      	beq.n	800b1c4 <OSSchedUnlock+0x58>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 800b18c:	4b12      	ldr	r3, [pc, #72]	; (800b1d8 <OSSchedUnlock+0x6c>)
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	3b01      	subs	r3, #1
 800b192:	b2da      	uxtb	r2, r3
 800b194:	4b10      	ldr	r3, [pc, #64]	; (800b1d8 <OSSchedUnlock+0x6c>)
 800b196:	701a      	strb	r2, [r3, #0]
            if (OSLockNesting == 0u) {                     /* See if scheduler is enabled and ...      */
 800b198:	4b0f      	ldr	r3, [pc, #60]	; (800b1d8 <OSSchedUnlock+0x6c>)
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d10d      	bne.n	800b1bc <OSSchedUnlock+0x50>
                if (OSIntNesting == 0u) {                  /* ... not in an ISR                        */
 800b1a0:	4b0e      	ldr	r3, [pc, #56]	; (800b1dc <OSSchedUnlock+0x70>)
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d105      	bne.n	800b1b4 <OSSchedUnlock+0x48>
                    OS_EXIT_CRITICAL();
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f7f5 f83f 	bl	800022c <OS_CPU_SR_Restore>
                    OS_Sched();                            /* See if a HPT is ready                    */
 800b1ae:	f000 fb69 	bl	800b884 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 800b1b2:	e00a      	b.n	800b1ca <OSSchedUnlock+0x5e>
                    OS_EXIT_CRITICAL();
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f7f5 f839 	bl	800022c <OS_CPU_SR_Restore>
}
 800b1ba:	e006      	b.n	800b1ca <OSSchedUnlock+0x5e>
                OS_EXIT_CRITICAL();
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f7f5 f835 	bl	800022c <OS_CPU_SR_Restore>
}
 800b1c2:	e002      	b.n	800b1ca <OSSchedUnlock+0x5e>
            OS_EXIT_CRITICAL();
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f7f5 f831 	bl	800022c <OS_CPU_SR_Restore>
}
 800b1ca:	bf00      	nop
 800b1cc:	3708      	adds	r7, #8
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	2000866d 	.word	0x2000866d
 800b1d8:	2000866c 	.word	0x2000866c
 800b1dc:	20008a28 	.word	0x20008a28

0800b1e0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	af00      	add	r7, sp, #0
    if (OSRunning == OS_FALSE) {
 800b1e4:	4b0c      	ldr	r3, [pc, #48]	; (800b218 <OSStart+0x38>)
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d113      	bne.n	800b214 <OSStart+0x34>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 800b1ec:	f000 fb8c 	bl	800b908 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 800b1f0:	4b0a      	ldr	r3, [pc, #40]	; (800b21c <OSStart+0x3c>)
 800b1f2:	781a      	ldrb	r2, [r3, #0]
 800b1f4:	4b0a      	ldr	r3, [pc, #40]	; (800b220 <OSStart+0x40>)
 800b1f6:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 800b1f8:	4b08      	ldr	r3, [pc, #32]	; (800b21c <OSStart+0x3c>)
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	4b09      	ldr	r3, [pc, #36]	; (800b224 <OSStart+0x44>)
 800b200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b204:	4a08      	ldr	r2, [pc, #32]	; (800b228 <OSStart+0x48>)
 800b206:	6013      	str	r3, [r2, #0]
        OSTCBCur      = OSTCBHighRdy;
 800b208:	4b07      	ldr	r3, [pc, #28]	; (800b228 <OSStart+0x48>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a07      	ldr	r2, [pc, #28]	; (800b22c <OSStart+0x4c>)
 800b20e:	6013      	str	r3, [r2, #0]
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 800b210:	f7f5 f80f 	bl	8000232 <OSStartHighRdy>
    }
}
 800b214:	bf00      	nop
 800b216:	bd80      	pop	{r7, pc}
 800b218:	2000866d 	.word	0x2000866d
 800b21c:	20008674 	.word	0x20008674
 800b220:	20008675 	.word	0x20008675
 800b224:	20009388 	.word	0x20009388
 800b228:	20008a10 	.word	0x20008a10
 800b22c:	20008a2c 	.word	0x20008a2c

0800b230 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OSStatInit (void)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800b236:	2300      	movs	r3, #0
 800b238:	607b      	str	r3, [r7, #4]
#endif



    OSTimeDly(2u);                               /* Synchronize with clock tick                        */
 800b23a:	2002      	movs	r0, #2
 800b23c:	f001 f9de 	bl	800c5fc <OSTimeDly>
    OS_ENTER_CRITICAL();
 800b240:	f7f4 fff0 	bl	8000224 <OS_CPU_SR_Save>
 800b244:	6078      	str	r0, [r7, #4]
    OSIdleCtr    = 0uL;                          /* Clear idle counter                                 */
 800b246:	4b0d      	ldr	r3, [pc, #52]	; (800b27c <OSStatInit+0x4c>)
 800b248:	2200      	movs	r2, #0
 800b24a:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL();
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f7f4 ffed 	bl	800022c <OS_CPU_SR_Restore>
    OSTimeDly(OS_TICKS_PER_SEC / 10u);           /* Determine MAX. idle counter value for 1/10 second  */
 800b252:	2064      	movs	r0, #100	; 0x64
 800b254:	f001 f9d2 	bl	800c5fc <OSTimeDly>
    OS_ENTER_CRITICAL();
 800b258:	f7f4 ffe4 	bl	8000224 <OS_CPU_SR_Save>
 800b25c:	6078      	str	r0, [r7, #4]
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 800b25e:	4b07      	ldr	r3, [pc, #28]	; (800b27c <OSStatInit+0x4c>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a07      	ldr	r2, [pc, #28]	; (800b280 <OSStatInit+0x50>)
 800b264:	6013      	str	r3, [r2, #0]
    OSStatRdy    = OS_TRUE;
 800b266:	4b07      	ldr	r3, [pc, #28]	; (800b284 <OSStatInit+0x54>)
 800b268:	2201      	movs	r2, #1
 800b26a:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL();
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f7f4 ffdd 	bl	800022c <OS_CPU_SR_Restore>
}
 800b272:	bf00      	nop
 800b274:	3708      	adds	r7, #8
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	20008670 	.word	0x20008670
 800b280:	200089a4 	.word	0x200089a4
 800b284:	20009384 	.word	0x20009384

0800b288 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0u
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 800b28e:	2300      	movs	r3, #0
 800b290:	607b      	str	r3, [r7, #4]
#endif



#if OS_TIME_TICK_HOOK_EN > 0u
    OSTimeTickHook();                                      /* Call user definable hook                     */
 800b292:	f7ff febd 	bl	800b010 <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 800b296:	f7f4 ffc5 	bl	8000224 <OS_CPU_SR_Save>
 800b29a:	6078      	str	r0, [r7, #4]
    OSTime++;
 800b29c:	4b42      	ldr	r3, [pc, #264]	; (800b3a8 <OSTimeTick+0x120>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	4a41      	ldr	r2, [pc, #260]	; (800b3a8 <OSTimeTick+0x120>)
 800b2a4:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f7f4 ffc0 	bl	800022c <OS_CPU_SR_Restore>
#endif
    if (OSRunning == OS_TRUE) {
 800b2ac:	4b3f      	ldr	r3, [pc, #252]	; (800b3ac <OSTimeTick+0x124>)
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d176      	bne.n	800b3a2 <OSTimeTick+0x11a>
#if OS_TICK_STEP_EN > 0u
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 800b2b4:	4b3e      	ldr	r3, [pc, #248]	; (800b3b0 <OSTimeTick+0x128>)
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d006      	beq.n	800b2ca <OSTimeTick+0x42>
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	d007      	beq.n	800b2d0 <OSTimeTick+0x48>
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d10b      	bne.n	800b2dc <OSTimeTick+0x54>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	72fb      	strb	r3, [r7, #11]
                 break;
 800b2c8:	e00e      	b.n	800b2e8 <OSTimeTick+0x60>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	72fb      	strb	r3, [r7, #11]
                 break;
 800b2ce:	e00b      	b.n	800b2e8 <OSTimeTick+0x60>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_WAIT;
 800b2d4:	4b36      	ldr	r3, [pc, #216]	; (800b3b0 <OSTimeTick+0x128>)
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	701a      	strb	r2, [r3, #0]
                 break;
 800b2da:	e005      	b.n	800b2e8 <OSTimeTick+0x60>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_DIS;
 800b2e0:	4b33      	ldr	r3, [pc, #204]	; (800b3b0 <OSTimeTick+0x128>)
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	701a      	strb	r2, [r3, #0]
                 break;
 800b2e6:	bf00      	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 800b2e8:	7afb      	ldrb	r3, [r7, #11]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d058      	beq.n	800b3a0 <OSTimeTick+0x118>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 800b2ee:	4b31      	ldr	r3, [pc, #196]	; (800b3b4 <OSTimeTick+0x12c>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	60fb      	str	r3, [r7, #12]
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 800b2f4:	e04e      	b.n	800b394 <OSTimeTick+0x10c>
            OS_ENTER_CRITICAL();
 800b2f6:	f7f4 ff95 	bl	8000224 <OS_CPU_SR_Save>
 800b2fa:	6078      	str	r0, [r7, #4]
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b300:	2b00      	cmp	r3, #0
 800b302:	d041      	beq.n	800b388 <OSTimeTick+0x100>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b308:	1e5a      	subs	r2, r3, #1
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	625a      	str	r2, [r3, #36]	; 0x24
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b312:	2b00      	cmp	r3, #0
 800b314:	d138      	bne.n	800b388 <OSTimeTick+0x100>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b31c:	f003 0337 	and.w	r3, r3, #55	; 0x37
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00d      	beq.n	800b340 <OSTimeTick+0xb8>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b32a:	f023 0337 	bic.w	r3, r3, #55	; 0x37
 800b32e:	b2da      	uxtb	r2, r3
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2201      	movs	r2, #1
 800b33a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800b33e:	e003      	b.n	800b348 <OSTimeTick+0xc0>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2200      	movs	r2, #0
 800b344:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b34e:	f003 0308 	and.w	r3, r3, #8
 800b352:	2b00      	cmp	r3, #0
 800b354:	d118      	bne.n	800b388 <OSTimeTick+0x100>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800b35c:	4b16      	ldr	r3, [pc, #88]	; (800b3b8 <OSTimeTick+0x130>)
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	4313      	orrs	r3, r2
 800b362:	b2da      	uxtb	r2, r3
 800b364:	4b14      	ldr	r3, [pc, #80]	; (800b3b8 <OSTimeTick+0x130>)
 800b366:	701a      	strb	r2, [r3, #0]
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b36e:	461a      	mov	r2, r3
 800b370:	4b12      	ldr	r3, [pc, #72]	; (800b3bc <OSTimeTick+0x134>)
 800b372:	5c9a      	ldrb	r2, [r3, r2]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b37a:	68f9      	ldr	r1, [r7, #12]
 800b37c:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 800b380:	4313      	orrs	r3, r2
 800b382:	b2da      	uxtb	r2, r3
 800b384:	4b0d      	ldr	r3, [pc, #52]	; (800b3bc <OSTimeTick+0x134>)
 800b386:	545a      	strb	r2, [r3, r1]
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	695b      	ldr	r3, [r3, #20]
 800b38c:	60fb      	str	r3, [r7, #12]
            OS_EXIT_CRITICAL();
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f7f4 ff4c 	bl	800022c <OS_CPU_SR_Restore>
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b39a:	2b3f      	cmp	r3, #63	; 0x3f
 800b39c:	d1ab      	bne.n	800b2f6 <OSTimeTick+0x6e>
 800b39e:	e000      	b.n	800b3a2 <OSTimeTick+0x11a>
            return;
 800b3a0:	bf00      	nop
        }
    }
}
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	20008a30 	.word	0x20008a30
 800b3ac:	2000866d 	.word	0x2000866d
 800b3b0:	2000867c 	.word	0x2000867c
 800b3b4:	20008678 	.word	0x20008678
 800b3b8:	20008a18 	.word	0x20008a18
 800b3bc:	20008a1c 	.word	0x20008a1c

0800b3c0 <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b086      	sub	sp, #24
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	4611      	mov	r1, r2
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	71fb      	strb	r3, [r7, #7]
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	71bb      	strb	r3, [r7, #6]
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	7a9b      	ldrb	r3, [r3, #10]
 800b3da:	461a      	mov	r2, r3
 800b3dc:	4b27      	ldr	r3, [pc, #156]	; (800b47c <OS_EventTaskRdy+0xbc>)
 800b3de:	5c9b      	ldrb	r3, [r3, r2]
 800b3e0:	75fb      	strb	r3, [r7, #23]
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 800b3e2:	7dfb      	ldrb	r3, [r7, #23]
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	7adb      	ldrb	r3, [r3, #11]
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	4b23      	ldr	r3, [pc, #140]	; (800b47c <OS_EventTaskRdy+0xbc>)
 800b3ee:	5c9b      	ldrb	r3, [r3, r2]
 800b3f0:	75bb      	strb	r3, [r7, #22]
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
 800b3f2:	7dfb      	ldrb	r3, [r7, #23]
 800b3f4:	00db      	lsls	r3, r3, #3
 800b3f6:	b2da      	uxtb	r2, r3
 800b3f8:	7dbb      	ldrb	r3, [r7, #22]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	757b      	strb	r3, [r7, #21]
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 800b3fe:	7d7b      	ldrb	r3, [r7, #21]
 800b400:	4a1f      	ldr	r2, [pc, #124]	; (800b480 <OS_EventTaskRdy+0xc0>)
 800b402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b406:	613b      	str	r3, [r7, #16]
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	2200      	movs	r2, #0
 800b40c:	625a      	str	r2, [r3, #36]	; 0x24
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	68ba      	ldr	r2, [r7, #8]
 800b412:	621a      	str	r2, [r3, #32]
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800b41a:	79fb      	ldrb	r3, [r7, #7]
 800b41c:	43db      	mvns	r3, r3
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	4013      	ands	r3, r2
 800b422:	b2da      	uxtb	r2, r3
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	79ba      	ldrb	r2, [r7, #6]
 800b42e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b438:	f003 0308 	and.w	r3, r3, #8
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d113      	bne.n	800b468 <OS_EventTaskRdy+0xa8>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800b446:	4b0f      	ldr	r3, [pc, #60]	; (800b484 <OS_EventTaskRdy+0xc4>)
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	b2da      	uxtb	r2, r3
 800b44e:	4b0d      	ldr	r3, [pc, #52]	; (800b484 <OS_EventTaskRdy+0xc4>)
 800b450:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 800b452:	7dfb      	ldrb	r3, [r7, #23]
 800b454:	4a0c      	ldr	r2, [pc, #48]	; (800b488 <OS_EventTaskRdy+0xc8>)
 800b456:	5cd1      	ldrb	r1, [r2, r3]
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800b45e:	7dfb      	ldrb	r3, [r7, #23]
 800b460:	430a      	orrs	r2, r1
 800b462:	b2d1      	uxtb	r1, r2
 800b464:	4a08      	ldr	r2, [pc, #32]	; (800b488 <OS_EventTaskRdy+0xc8>)
 800b466:	54d1      	strb	r1, [r2, r3]
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 800b468:	68f9      	ldr	r1, [r7, #12]
 800b46a:	6938      	ldr	r0, [r7, #16]
 800b46c:	f000 f864 	bl	800b538 <OS_EventTaskRemove>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    }
#endif

    return (prio);
 800b470:	7d7b      	ldrb	r3, [r7, #21]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3718      	adds	r7, #24
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	0800e9fc 	.word	0x0800e9fc
 800b480:	20009388 	.word	0x20009388
 800b484:	20008a18 	.word	0x20008a18
 800b488:	20008a1c 	.word	0x20008a1c

0800b48c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 800b494:	4b25      	ldr	r3, [pc, #148]	; (800b52c <OS_EventTaskWait+0xa0>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	61da      	str	r2, [r3, #28]

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 800b49c:	4b23      	ldr	r3, [pc, #140]	; (800b52c <OS_EventTaskWait+0xa0>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4413      	add	r3, r2
 800b4aa:	7ada      	ldrb	r2, [r3, #11]
 800b4ac:	4b1f      	ldr	r3, [pc, #124]	; (800b52c <OS_EventTaskWait+0xa0>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b4b4:	491d      	ldr	r1, [pc, #116]	; (800b52c <OS_EventTaskWait+0xa0>)
 800b4b6:	6809      	ldr	r1, [r1, #0]
 800b4b8:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	b2da      	uxtb	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	440b      	add	r3, r1
 800b4c4:	72da      	strb	r2, [r3, #11]
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	7a9a      	ldrb	r2, [r3, #10]
 800b4ca:	4b18      	ldr	r3, [pc, #96]	; (800b52c <OS_EventTaskWait+0xa0>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	b2da      	uxtb	r2, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	729a      	strb	r2, [r3, #10]

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 800b4da:	4b14      	ldr	r3, [pc, #80]	; (800b52c <OS_EventTaskWait+0xa0>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b4e2:	73fb      	strb	r3, [r7, #15]
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 800b4e4:	7bfb      	ldrb	r3, [r7, #15]
 800b4e6:	4a12      	ldr	r2, [pc, #72]	; (800b530 <OS_EventTaskWait+0xa4>)
 800b4e8:	5cd1      	ldrb	r1, [r2, r3]
 800b4ea:	4b10      	ldr	r3, [pc, #64]	; (800b52c <OS_EventTaskWait+0xa0>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b4f2:	43db      	mvns	r3, r3
 800b4f4:	b2da      	uxtb	r2, r3
 800b4f6:	7bfb      	ldrb	r3, [r7, #15]
 800b4f8:	400a      	ands	r2, r1
 800b4fa:	b2d1      	uxtb	r1, r2
 800b4fc:	4a0c      	ldr	r2, [pc, #48]	; (800b530 <OS_EventTaskWait+0xa4>)
 800b4fe:	54d1      	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
 800b500:	7bfb      	ldrb	r3, [r7, #15]
 800b502:	4a0b      	ldr	r2, [pc, #44]	; (800b530 <OS_EventTaskWait+0xa4>)
 800b504:	5cd3      	ldrb	r3, [r2, r3]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d10b      	bne.n	800b522 <OS_EventTaskWait+0x96>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 800b50a:	4b08      	ldr	r3, [pc, #32]	; (800b52c <OS_EventTaskWait+0xa0>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b512:	43db      	mvns	r3, r3
 800b514:	b2da      	uxtb	r2, r3
 800b516:	4b07      	ldr	r3, [pc, #28]	; (800b534 <OS_EventTaskWait+0xa8>)
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	4013      	ands	r3, r2
 800b51c:	b2da      	uxtb	r2, r3
 800b51e:	4b05      	ldr	r3, [pc, #20]	; (800b534 <OS_EventTaskWait+0xa8>)
 800b520:	701a      	strb	r2, [r3, #0]
    }
}
 800b522:	bf00      	nop
 800b524:	3714      	adds	r7, #20
 800b526:	46bd      	mov	sp, r7
 800b528:	bc80      	pop	{r7}
 800b52a:	4770      	bx	lr
 800b52c:	20008a2c 	.word	0x20008a2c
 800b530:	20008a1c 	.word	0x20008a1c
 800b534:	20008a18 	.word	0x20008a18

0800b538 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b548:	73fb      	strb	r3, [r7, #15]
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
 800b54a:	7bfb      	ldrb	r3, [r7, #15]
 800b54c:	683a      	ldr	r2, [r7, #0]
 800b54e:	4413      	add	r3, r2
 800b550:	7ad9      	ldrb	r1, [r3, #11]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b558:	43db      	mvns	r3, r3
 800b55a:	b2da      	uxtb	r2, r3
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
 800b55e:	400a      	ands	r2, r1
 800b560:	b2d1      	uxtb	r1, r2
 800b562:	683a      	ldr	r2, [r7, #0]
 800b564:	4413      	add	r3, r2
 800b566:	460a      	mov	r2, r1
 800b568:	72da      	strb	r2, [r3, #11]
    if (pevent->OSEventTbl[y] == 0u) {
 800b56a:	7bfb      	ldrb	r3, [r7, #15]
 800b56c:	683a      	ldr	r2, [r7, #0]
 800b56e:	4413      	add	r3, r2
 800b570:	7adb      	ldrb	r3, [r3, #11]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d10a      	bne.n	800b58c <OS_EventTaskRemove+0x54>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	7a9a      	ldrb	r2, [r3, #10]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b580:	43db      	mvns	r3, r3
 800b582:	b2db      	uxtb	r3, r3
 800b584:	4013      	ands	r3, r2
 800b586:	b2da      	uxtb	r2, r3
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	729a      	strb	r2, [r3, #10]
    }
}
 800b58c:	bf00      	nop
 800b58e:	3714      	adds	r7, #20
 800b590:	46bd      	mov	sp, r7
 800b592:	bc80      	pop	{r7}
 800b594:	4770      	bx	lr

0800b596 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 800b596:	b480      	push	{r7}
 800b598:	b085      	sub	sp, #20
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	729a      	strb	r2, [r3, #10]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	73fb      	strb	r3, [r7, #15]
 800b5a8:	e007      	b.n	800b5ba <OS_EventWaitListInit+0x24>
        pevent->OSEventTbl[i] = 0u;
 800b5aa:	7bfb      	ldrb	r3, [r7, #15]
 800b5ac:	687a      	ldr	r2, [r7, #4]
 800b5ae:	4413      	add	r3, r2
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	72da      	strb	r2, [r3, #11]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	73fb      	strb	r3, [r7, #15]
 800b5ba:	7bfb      	ldrb	r3, [r7, #15]
 800b5bc:	2b07      	cmp	r3, #7
 800b5be:	d9f4      	bls.n	800b5aa <OS_EventWaitListInit+0x14>
    }
}
 800b5c0:	bf00      	nop
 800b5c2:	3714      	adds	r7, #20
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bc80      	pop	{r7}
 800b5c8:	4770      	bx	lr
	...

0800b5cc <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 800b5d2:	21c8      	movs	r1, #200	; 0xc8
 800b5d4:	481c      	ldr	r0, [pc, #112]	; (800b648 <OS_InitEventList+0x7c>)
 800b5d6:	f000 f93d 	bl	800b854 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 800b5da:	2300      	movs	r3, #0
 800b5dc:	81fb      	strh	r3, [r7, #14]
 800b5de:	e01b      	b.n	800b618 <OS_InitEventList+0x4c>
        ix_next = ix + 1u;
 800b5e0:	89fb      	ldrh	r3, [r7, #14]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	80fb      	strh	r3, [r7, #6]
        pevent1 = &OSEventTbl[ix];
 800b5e6:	89fa      	ldrh	r2, [r7, #14]
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	4413      	add	r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	4a15      	ldr	r2, [pc, #84]	; (800b648 <OS_InitEventList+0x7c>)
 800b5f2:	4413      	add	r3, r2
 800b5f4:	60bb      	str	r3, [r7, #8]
        pevent2 = &OSEventTbl[ix_next];
 800b5f6:	88fa      	ldrh	r2, [r7, #6]
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	4413      	add	r3, r2
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	4a11      	ldr	r2, [pc, #68]	; (800b648 <OS_InitEventList+0x7c>)
 800b602:	4413      	add	r3, r2
 800b604:	603b      	str	r3, [r7, #0]
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	2200      	movs	r2, #0
 800b60a:	701a      	strb	r2, [r3, #0]
        pevent1->OSEventPtr     = pevent2;
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	605a      	str	r2, [r3, #4]
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 800b612:	89fb      	ldrh	r3, [r7, #14]
 800b614:	3301      	adds	r3, #1
 800b616:	81fb      	strh	r3, [r7, #14]
 800b618:	89fb      	ldrh	r3, [r7, #14]
 800b61a:	2b08      	cmp	r3, #8
 800b61c:	d9e0      	bls.n	800b5e0 <OS_InitEventList+0x14>
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
#endif
    }
    pevent1                         = &OSEventTbl[ix];
 800b61e:	89fa      	ldrh	r2, [r7, #14]
 800b620:	4613      	mov	r3, r2
 800b622:	009b      	lsls	r3, r3, #2
 800b624:	4413      	add	r3, r2
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	4a07      	ldr	r2, [pc, #28]	; (800b648 <OS_InitEventList+0x7c>)
 800b62a:	4413      	add	r3, r2
 800b62c:	60bb      	str	r3, [r7, #8]
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	2200      	movs	r2, #0
 800b632:	701a      	strb	r2, [r3, #0]
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	2200      	movs	r2, #0
 800b638:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 800b63a:	4b04      	ldr	r3, [pc, #16]	; (800b64c <OS_InitEventList+0x80>)
 800b63c:	4a02      	ldr	r2, [pc, #8]	; (800b648 <OS_InitEventList+0x7c>)
 800b63e:	601a      	str	r2, [r3, #0]
#if OS_EVENT_NAME_EN > 0u
    OSEventFreeList->OSEventName    = (INT8U *)"?";         /* Unknown name                            */
#endif
#endif
#endif
}
 800b640:	bf00      	nop
 800b642:	3710      	adds	r7, #16
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	20008c34 	.word	0x20008c34
 800b64c:	20008a24 	.word	0x20008a24

0800b650 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 800b650:	b480      	push	{r7}
 800b652:	af00      	add	r7, sp, #0
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
 800b654:	4b10      	ldr	r3, [pc, #64]	; (800b698 <OS_InitMisc+0x48>)
 800b656:	2200      	movs	r2, #0
 800b658:	601a      	str	r2, [r3, #0]
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
 800b65a:	4b10      	ldr	r3, [pc, #64]	; (800b69c <OS_InitMisc+0x4c>)
 800b65c:	2200      	movs	r2, #0
 800b65e:	701a      	strb	r2, [r3, #0]
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
 800b660:	4b0f      	ldr	r3, [pc, #60]	; (800b6a0 <OS_InitMisc+0x50>)
 800b662:	2200      	movs	r2, #0
 800b664:	701a      	strb	r2, [r3, #0]

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
 800b666:	4b0f      	ldr	r3, [pc, #60]	; (800b6a4 <OS_InitMisc+0x54>)
 800b668:	2200      	movs	r2, #0
 800b66a:	701a      	strb	r2, [r3, #0]

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
 800b66c:	4b0e      	ldr	r3, [pc, #56]	; (800b6a8 <OS_InitMisc+0x58>)
 800b66e:	2200      	movs	r2, #0
 800b670:	701a      	strb	r2, [r3, #0]

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
 800b672:	4b0e      	ldr	r3, [pc, #56]	; (800b6ac <OS_InitMisc+0x5c>)
 800b674:	2200      	movs	r2, #0
 800b676:	601a      	str	r2, [r3, #0]
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
 800b678:	4b0d      	ldr	r3, [pc, #52]	; (800b6b0 <OS_InitMisc+0x60>)
 800b67a:	2200      	movs	r2, #0
 800b67c:	601a      	str	r2, [r3, #0]

#if OS_TASK_STAT_EN > 0u
    OSIdleCtrRun              = 0uL;
 800b67e:	4b0d      	ldr	r3, [pc, #52]	; (800b6b4 <OS_InitMisc+0x64>)
 800b680:	2200      	movs	r2, #0
 800b682:	601a      	str	r2, [r3, #0]
    OSIdleCtrMax              = 0uL;
 800b684:	4b0c      	ldr	r3, [pc, #48]	; (800b6b8 <OS_InitMisc+0x68>)
 800b686:	2200      	movs	r2, #0
 800b688:	601a      	str	r2, [r3, #0]
    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
 800b68a:	4b0c      	ldr	r3, [pc, #48]	; (800b6bc <OS_InitMisc+0x6c>)
 800b68c:	2200      	movs	r2, #0
 800b68e:	701a      	strb	r2, [r3, #0]
#endif

#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
#endif
}
 800b690:	bf00      	nop
 800b692:	46bd      	mov	sp, r7
 800b694:	bc80      	pop	{r7}
 800b696:	4770      	bx	lr
 800b698:	20008a30 	.word	0x20008a30
 800b69c:	20008a28 	.word	0x20008a28
 800b6a0:	2000866c 	.word	0x2000866c
 800b6a4:	200089ad 	.word	0x200089ad
 800b6a8:	2000866d 	.word	0x2000866d
 800b6ac:	200089a0 	.word	0x200089a0
 800b6b0:	20008670 	.word	0x20008670
 800b6b4:	20009488 	.word	0x20009488
 800b6b8:	200089a4 	.word	0x200089a4
 800b6bc:	20009384 	.word	0x20009384

0800b6c0 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
 800b6c6:	4b10      	ldr	r3, [pc, #64]	; (800b708 <OS_InitRdyList+0x48>)
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	701a      	strb	r2, [r3, #0]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	71fb      	strb	r3, [r7, #7]
 800b6d0:	e006      	b.n	800b6e0 <OS_InitRdyList+0x20>
        OSRdyTbl[i] = 0u;
 800b6d2:	79fb      	ldrb	r3, [r7, #7]
 800b6d4:	4a0d      	ldr	r2, [pc, #52]	; (800b70c <OS_InitRdyList+0x4c>)
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	54d1      	strb	r1, [r2, r3]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 800b6da:	79fb      	ldrb	r3, [r7, #7]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	71fb      	strb	r3, [r7, #7]
 800b6e0:	79fb      	ldrb	r3, [r7, #7]
 800b6e2:	2b07      	cmp	r3, #7
 800b6e4:	d9f5      	bls.n	800b6d2 <OS_InitRdyList+0x12>
    }

    OSPrioCur     = 0u;
 800b6e6:	4b0a      	ldr	r3, [pc, #40]	; (800b710 <OS_InitRdyList+0x50>)
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy = 0u;
 800b6ec:	4b09      	ldr	r3, [pc, #36]	; (800b714 <OS_InitRdyList+0x54>)
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	701a      	strb	r2, [r3, #0]

    OSTCBHighRdy  = (OS_TCB *)0;
 800b6f2:	4b09      	ldr	r3, [pc, #36]	; (800b718 <OS_InitRdyList+0x58>)
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	601a      	str	r2, [r3, #0]
    OSTCBCur      = (OS_TCB *)0;
 800b6f8:	4b08      	ldr	r3, [pc, #32]	; (800b71c <OS_InitRdyList+0x5c>)
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	601a      	str	r2, [r3, #0]
}
 800b6fe:	bf00      	nop
 800b700:	370c      	adds	r7, #12
 800b702:	46bd      	mov	sp, r7
 800b704:	bc80      	pop	{r7}
 800b706:	4770      	bx	lr
 800b708:	20008a18 	.word	0x20008a18
 800b70c:	20008a1c 	.word	0x20008a1c
 800b710:	20008675 	.word	0x20008675
 800b714:	20008674 	.word	0x20008674
 800b718:	20008a10 	.word	0x20008a10
 800b71c:	20008a2c 	.word	0x20008a2c

0800b720 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b088      	sub	sp, #32
 800b724:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskIdle,
 800b726:	2303      	movs	r3, #3
 800b728:	9304      	str	r3, [sp, #16]
 800b72a:	2300      	movs	r3, #0
 800b72c:	9303      	str	r3, [sp, #12]
 800b72e:	2380      	movs	r3, #128	; 0x80
 800b730:	9302      	str	r3, [sp, #8]
 800b732:	4b0a      	ldr	r3, [pc, #40]	; (800b75c <OS_InitTaskIdle+0x3c>)
 800b734:	9301      	str	r3, [sp, #4]
 800b736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	233f      	movs	r3, #63	; 0x3f
 800b73e:	4a08      	ldr	r2, [pc, #32]	; (800b760 <OS_InitTaskIdle+0x40>)
 800b740:	2100      	movs	r1, #0
 800b742:	4808      	ldr	r0, [pc, #32]	; (800b764 <OS_InitTaskIdle+0x44>)
 800b744:	f000 fdb4 	bl	800c2b0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
 800b748:	1dfb      	adds	r3, r7, #7
 800b74a:	461a      	mov	r2, r3
 800b74c:	4906      	ldr	r1, [pc, #24]	; (800b768 <OS_InitTaskIdle+0x48>)
 800b74e:	203f      	movs	r0, #63	; 0x3f
 800b750:	f000 fe12 	bl	800c378 <OSTaskNameSet>
#endif
}
 800b754:	bf00      	nop
 800b756:	3708      	adds	r7, #8
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	20008a34 	.word	0x20008a34
 800b760:	20008c30 	.word	0x20008c30
 800b764:	0800b951 	.word	0x0800b951
 800b768:	0800e878 	.word	0x0800e878

0800b76c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
static  void  OS_InitTaskStat (void)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b088      	sub	sp, #32
 800b770:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskStat,
 800b772:	2303      	movs	r3, #3
 800b774:	9304      	str	r3, [sp, #16]
 800b776:	2300      	movs	r3, #0
 800b778:	9303      	str	r3, [sp, #12]
 800b77a:	23c8      	movs	r3, #200	; 0xc8
 800b77c:	9302      	str	r3, [sp, #8]
 800b77e:	4b0a      	ldr	r3, [pc, #40]	; (800b7a8 <OS_InitTaskStat+0x3c>)
 800b780:	9301      	str	r3, [sp, #4]
 800b782:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	233e      	movs	r3, #62	; 0x3e
 800b78a:	4a08      	ldr	r2, [pc, #32]	; (800b7ac <OS_InitTaskStat+0x40>)
 800b78c:	2100      	movs	r1, #0
 800b78e:	4808      	ldr	r0, [pc, #32]	; (800b7b0 <OS_InitTaskStat+0x44>)
 800b790:	f000 fd8e 	bl	800c2b0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
 800b794:	1dfb      	adds	r3, r7, #7
 800b796:	461a      	mov	r2, r3
 800b798:	4906      	ldr	r1, [pc, #24]	; (800b7b4 <OS_InitTaskStat+0x48>)
 800b79a:	203e      	movs	r0, #62	; 0x3e
 800b79c:	f000 fdec 	bl	800c378 <OSTaskNameSet>
#endif
}
 800b7a0:	bf00      	nop
 800b7a2:	3708      	adds	r7, #8
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	20008680 	.word	0x20008680
 800b7ac:	2000899c 	.word	0x2000899c
 800b7b0:	0800b97d 	.word	0x0800b97d
 800b7b4:	0800e888 	.word	0x0800e888

0800b7b8 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 800b7be:	f44f 61d1 	mov.w	r1, #1672	; 0x688
 800b7c2:	481f      	ldr	r0, [pc, #124]	; (800b840 <OS_InitTCBList+0x88>)
 800b7c4:	f000 f846 	bl	800b854 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 800b7c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b7cc:	481d      	ldr	r0, [pc, #116]	; (800b844 <OS_InitTCBList+0x8c>)
 800b7ce:	f000 f841 	bl	800b854 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	73fb      	strb	r3, [r7, #15]
 800b7d6:	e019      	b.n	800b80c <OS_InitTCBList+0x54>
        ix_next =  ix + 1u;
 800b7d8:	7bfb      	ldrb	r3, [r7, #15]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	71fb      	strb	r3, [r7, #7]
        ptcb1   = &OSTCBTbl[ix];
 800b7de:	7bfb      	ldrb	r3, [r7, #15]
 800b7e0:	224c      	movs	r2, #76	; 0x4c
 800b7e2:	fb02 f303 	mul.w	r3, r2, r3
 800b7e6:	4a16      	ldr	r2, [pc, #88]	; (800b840 <OS_InitTCBList+0x88>)
 800b7e8:	4413      	add	r3, r2
 800b7ea:	60bb      	str	r3, [r7, #8]
        ptcb2   = &OSTCBTbl[ix_next];
 800b7ec:	79fb      	ldrb	r3, [r7, #7]
 800b7ee:	224c      	movs	r2, #76	; 0x4c
 800b7f0:	fb02 f303 	mul.w	r3, r2, r3
 800b7f4:	4a12      	ldr	r2, [pc, #72]	; (800b840 <OS_InitTCBList+0x88>)
 800b7f6:	4413      	add	r3, r2
 800b7f8:	603b      	str	r3, [r7, #0]
        ptcb1->OSTCBNext = ptcb2;
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	683a      	ldr	r2, [r7, #0]
 800b7fe:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	4a11      	ldr	r2, [pc, #68]	; (800b848 <OS_InitTCBList+0x90>)
 800b804:	645a      	str	r2, [r3, #68]	; 0x44
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 800b806:	7bfb      	ldrb	r3, [r7, #15]
 800b808:	3301      	adds	r3, #1
 800b80a:	73fb      	strb	r3, [r7, #15]
 800b80c:	7bfb      	ldrb	r3, [r7, #15]
 800b80e:	2b14      	cmp	r3, #20
 800b810:	d9e2      	bls.n	800b7d8 <OS_InitTCBList+0x20>
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
 800b812:	7bfb      	ldrb	r3, [r7, #15]
 800b814:	224c      	movs	r2, #76	; 0x4c
 800b816:	fb02 f303 	mul.w	r3, r2, r3
 800b81a:	4a09      	ldr	r2, [pc, #36]	; (800b840 <OS_InitTCBList+0x88>)
 800b81c:	4413      	add	r3, r2
 800b81e:	60bb      	str	r3, [r7, #8]
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	2200      	movs	r2, #0
 800b824:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	4a07      	ldr	r2, [pc, #28]	; (800b848 <OS_InitTCBList+0x90>)
 800b82a:	645a      	str	r2, [r3, #68]	; 0x44
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 800b82c:	4b07      	ldr	r3, [pc, #28]	; (800b84c <OS_InitTCBList+0x94>)
 800b82e:	2200      	movs	r2, #0
 800b830:	601a      	str	r2, [r3, #0]
    OSTCBFreeList           = &OSTCBTbl[0];
 800b832:	4b07      	ldr	r3, [pc, #28]	; (800b850 <OS_InitTCBList+0x98>)
 800b834:	4a02      	ldr	r2, [pc, #8]	; (800b840 <OS_InitTCBList+0x88>)
 800b836:	601a      	str	r2, [r3, #0]
}
 800b838:	bf00      	nop
 800b83a:	3710      	adds	r7, #16
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	20008cfc 	.word	0x20008cfc
 800b844:	20009388 	.word	0x20009388
 800b848:	0800e898 	.word	0x0800e898
 800b84c:	20008678 	.word	0x20008678
 800b850:	200089a8 	.word	0x200089a8

0800b854 <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
 800b854:	b480      	push	{r7}
 800b856:	b083      	sub	sp, #12
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	460b      	mov	r3, r1
 800b85e:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 800b860:	e007      	b.n	800b872 <OS_MemClr+0x1e>
        *pdest++ = (INT8U)0;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	1c5a      	adds	r2, r3, #1
 800b866:	607a      	str	r2, [r7, #4]
 800b868:	2200      	movs	r2, #0
 800b86a:	701a      	strb	r2, [r3, #0]
        size--;
 800b86c:	887b      	ldrh	r3, [r7, #2]
 800b86e:	3b01      	subs	r3, #1
 800b870:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 800b872:	887b      	ldrh	r3, [r7, #2]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d1f4      	bne.n	800b862 <OS_MemClr+0xe>
    }
}
 800b878:	bf00      	nop
 800b87a:	370c      	adds	r7, #12
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bc80      	pop	{r7}
 800b880:	4770      	bx	lr
	...

0800b884 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 800b88a:	2300      	movs	r3, #0
 800b88c:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 800b88e:	f7f4 fcc9 	bl	8000224 <OS_CPU_SR_Save>
 800b892:	6078      	str	r0, [r7, #4]
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
 800b894:	4b15      	ldr	r3, [pc, #84]	; (800b8ec <OS_Sched+0x68>)
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d11f      	bne.n	800b8dc <OS_Sched+0x58>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
 800b89c:	4b14      	ldr	r3, [pc, #80]	; (800b8f0 <OS_Sched+0x6c>)
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d11b      	bne.n	800b8dc <OS_Sched+0x58>
            OS_SchedNew();
 800b8a4:	f000 f830 	bl	800b908 <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 800b8a8:	4b12      	ldr	r3, [pc, #72]	; (800b8f4 <OS_Sched+0x70>)
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	4b12      	ldr	r3, [pc, #72]	; (800b8f8 <OS_Sched+0x74>)
 800b8b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8b4:	4a11      	ldr	r2, [pc, #68]	; (800b8fc <OS_Sched+0x78>)
 800b8b6:	6013      	str	r3, [r2, #0]
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 800b8b8:	4b0e      	ldr	r3, [pc, #56]	; (800b8f4 <OS_Sched+0x70>)
 800b8ba:	781a      	ldrb	r2, [r3, #0]
 800b8bc:	4b10      	ldr	r3, [pc, #64]	; (800b900 <OS_Sched+0x7c>)
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d00b      	beq.n	800b8dc <OS_Sched+0x58>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 800b8c4:	4b0d      	ldr	r3, [pc, #52]	; (800b8fc <OS_Sched+0x78>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8ca:	3201      	adds	r2, #1
 800b8cc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 800b8ce:	4b0d      	ldr	r3, [pc, #52]	; (800b904 <OS_Sched+0x80>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	4a0b      	ldr	r2, [pc, #44]	; (800b904 <OS_Sched+0x80>)
 800b8d6:	6013      	str	r3, [r2, #0]
                OS_TASK_SW();                          /* Perform a context switch                     */
 800b8d8:	f7f4 fcbb 	bl	8000252 <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f7f4 fca5 	bl	800022c <OS_CPU_SR_Restore>
}
 800b8e2:	bf00      	nop
 800b8e4:	3708      	adds	r7, #8
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	20008a28 	.word	0x20008a28
 800b8f0:	2000866c 	.word	0x2000866c
 800b8f4:	20008674 	.word	0x20008674
 800b8f8:	20009388 	.word	0x20009388
 800b8fc:	20008a10 	.word	0x20008a10
 800b900:	20008675 	.word	0x20008675
 800b904:	200089a0 	.word	0x200089a0

0800b908 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 800b90e:	4b0c      	ldr	r3, [pc, #48]	; (800b940 <OS_SchedNew+0x38>)
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	461a      	mov	r2, r3
 800b914:	4b0b      	ldr	r3, [pc, #44]	; (800b944 <OS_SchedNew+0x3c>)
 800b916:	5c9b      	ldrb	r3, [r3, r2]
 800b918:	71fb      	strb	r3, [r7, #7]
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
 800b91a:	79fb      	ldrb	r3, [r7, #7]
 800b91c:	00db      	lsls	r3, r3, #3
 800b91e:	b2da      	uxtb	r2, r3
 800b920:	79fb      	ldrb	r3, [r7, #7]
 800b922:	4909      	ldr	r1, [pc, #36]	; (800b948 <OS_SchedNew+0x40>)
 800b924:	5ccb      	ldrb	r3, [r1, r3]
 800b926:	4619      	mov	r1, r3
 800b928:	4b06      	ldr	r3, [pc, #24]	; (800b944 <OS_SchedNew+0x3c>)
 800b92a:	5c5b      	ldrb	r3, [r3, r1]
 800b92c:	4413      	add	r3, r2
 800b92e:	b2da      	uxtb	r2, r3
 800b930:	4b06      	ldr	r3, [pc, #24]	; (800b94c <OS_SchedNew+0x44>)
 800b932:	701a      	strb	r2, [r3, #0]
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(*ptbl & 0xFFu)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u);
    }
#endif
}
 800b934:	bf00      	nop
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	bc80      	pop	{r7}
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	20008a18 	.word	0x20008a18
 800b944:	0800e9fc 	.word	0x0800e9fc
 800b948:	20008a1c 	.word	0x20008a1c
 800b94c:	20008674 	.word	0x20008674

0800b950 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800b958:	2300      	movs	r3, #0
 800b95a:	60fb      	str	r3, [r7, #12]



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 800b95c:	f7f4 fc62 	bl	8000224 <OS_CPU_SR_Save>
 800b960:	60f8      	str	r0, [r7, #12]
        OSIdleCtr++;
 800b962:	4b05      	ldr	r3, [pc, #20]	; (800b978 <OS_TaskIdle+0x28>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	3301      	adds	r3, #1
 800b968:	4a03      	ldr	r2, [pc, #12]	; (800b978 <OS_TaskIdle+0x28>)
 800b96a:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f7f4 fc5d 	bl	800022c <OS_CPU_SR_Restore>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 800b972:	f7ff fab6 	bl	800aee2 <OSTaskIdleHook>
        OS_ENTER_CRITICAL();
 800b976:	e7f1      	b.n	800b95c <OS_TaskIdle+0xc>
 800b978:	20008670 	.word	0x20008670

0800b97c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OS_TaskStat (void *p_arg)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800b984:	2300      	movs	r3, #0
 800b986:	60fb      	str	r3, [r7, #12]
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 800b988:	e002      	b.n	800b990 <OS_TaskStat+0x14>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
 800b98a:	20c8      	movs	r0, #200	; 0xc8
 800b98c:	f000 fe36 	bl	800c5fc <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
 800b990:	4b1b      	ldr	r3, [pc, #108]	; (800ba00 <OS_TaskStat+0x84>)
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d0f8      	beq.n	800b98a <OS_TaskStat+0xe>
    }
    OSIdleCtrMax /= 100uL;
 800b998:	4b1a      	ldr	r3, [pc, #104]	; (800ba04 <OS_TaskStat+0x88>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a1a      	ldr	r2, [pc, #104]	; (800ba08 <OS_TaskStat+0x8c>)
 800b99e:	fba2 2303 	umull	r2, r3, r2, r3
 800b9a2:	095b      	lsrs	r3, r3, #5
 800b9a4:	4a17      	ldr	r2, [pc, #92]	; (800ba04 <OS_TaskStat+0x88>)
 800b9a6:	6013      	str	r3, [r2, #0]
    if (OSIdleCtrMax == 0uL) {
 800b9a8:	4b16      	ldr	r3, [pc, #88]	; (800ba04 <OS_TaskStat+0x88>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d105      	bne.n	800b9bc <OS_TaskStat+0x40>
        OSCPUUsage = 0u;
 800b9b0:	4b16      	ldr	r3, [pc, #88]	; (800ba0c <OS_TaskStat+0x90>)
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	701a      	strb	r2, [r3, #0]
#if OS_TASK_SUSPEND_EN > 0u
        (void)OSTaskSuspend(OS_PRIO_SELF);
 800b9b6:	20ff      	movs	r0, #255	; 0xff
 800b9b8:	f000 fd88 	bl	800c4cc <OSTaskSuspend>
            OSTimeDly(OS_TICKS_PER_SEC);
        }
#endif
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 800b9bc:	f7f4 fc32 	bl	8000224 <OS_CPU_SR_Save>
 800b9c0:	60f8      	str	r0, [r7, #12]
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 800b9c2:	4b13      	ldr	r3, [pc, #76]	; (800ba10 <OS_TaskStat+0x94>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a13      	ldr	r2, [pc, #76]	; (800ba14 <OS_TaskStat+0x98>)
 800b9c8:	6013      	str	r3, [r2, #0]
        OSIdleCtr    = 0uL;                      /* Reset the idle counter for the next second         */
 800b9ca:	4b11      	ldr	r3, [pc, #68]	; (800ba10 <OS_TaskStat+0x94>)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	601a      	str	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f7f4 fc2b 	bl	800022c <OS_CPU_SR_Restore>
        OSCPUUsage   = (INT8U)(100uL - OSIdleCtrRun / OSIdleCtrMax);
 800b9d6:	4b0f      	ldr	r3, [pc, #60]	; (800ba14 <OS_TaskStat+0x98>)
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	4b0a      	ldr	r3, [pc, #40]	; (800ba04 <OS_TaskStat+0x88>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800b9e8:	b2da      	uxtb	r2, r3
 800b9ea:	4b08      	ldr	r3, [pc, #32]	; (800ba0c <OS_TaskStat+0x90>)
 800b9ec:	701a      	strb	r2, [r3, #0]
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 800b9ee:	f7ff fa7e 	bl	800aeee <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 800b9f2:	f000 f811 	bl	800ba18 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
 800b9f6:	2064      	movs	r0, #100	; 0x64
 800b9f8:	f000 fe00 	bl	800c5fc <OSTimeDly>
        OS_ENTER_CRITICAL();
 800b9fc:	e7de      	b.n	800b9bc <OS_TaskStat+0x40>
 800b9fe:	bf00      	nop
 800ba00:	20009384 	.word	0x20009384
 800ba04:	200089a4 	.word	0x200089a4
 800ba08:	51eb851f 	.word	0x51eb851f
 800ba0c:	200089ac 	.word	0x200089ac
 800ba10:	20008670 	.word	0x20008670
 800ba14:	20009488 	.word	0x20009488

0800ba18 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStatStkChk (void)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 800ba1e:	2300      	movs	r3, #0
 800ba20:	73fb      	strb	r3, [r7, #15]
 800ba22:	e023      	b.n	800ba6c <OS_TaskStatStkChk+0x54>
        err = OSTaskStkChk(prio, &stk_data);
 800ba24:	463a      	mov	r2, r7
 800ba26:	7bfb      	ldrb	r3, [r7, #15]
 800ba28:	4611      	mov	r1, r2
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f000 fcec 	bl	800c408 <OSTaskStkChk>
 800ba30:	4603      	mov	r3, r0
 800ba32:	73bb      	strb	r3, [r7, #14]
        if (err == OS_ERR_NONE) {
 800ba34:	7bbb      	ldrb	r3, [r7, #14]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d115      	bne.n	800ba66 <OS_TaskStatStkChk+0x4e>
            ptcb = OSTCBPrioTbl[prio];
 800ba3a:	7bfb      	ldrb	r3, [r7, #15]
 800ba3c:	4a0f      	ldr	r2, [pc, #60]	; (800ba7c <OS_TaskStatStkChk+0x64>)
 800ba3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba42:	60bb      	str	r3, [r7, #8]
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00d      	beq.n	800ba66 <OS_TaskStatStkChk+0x4e>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d00a      	beq.n	800ba66 <OS_TaskStatStkChk+0x4e>
#if OS_TASK_PROFILE_EN > 0u
                    #if OS_STK_GROWTH == 1u
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	689a      	ldr	r2, [r3, #8]
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	441a      	add	r2, r3
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	63da      	str	r2, [r3, #60]	; 0x3c
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	641a      	str	r2, [r3, #64]	; 0x40
    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 800ba66:	7bfb      	ldrb	r3, [r7, #15]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	73fb      	strb	r3, [r7, #15]
 800ba6c:	7bfb      	ldrb	r3, [r7, #15]
 800ba6e:	2b3f      	cmp	r3, #63	; 0x3f
 800ba70:	d9d8      	bls.n	800ba24 <OS_TaskStatStkChk+0xc>
#endif
                }
            }
        }
    }
}
 800ba72:	bf00      	nop
 800ba74:	3710      	adds	r7, #16
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	20009388 	.word	0x20009388

0800ba80 <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b088      	sub	sp, #32
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60b9      	str	r1, [r7, #8]
 800ba88:	607a      	str	r2, [r7, #4]
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	73fb      	strb	r3, [r7, #15]
 800ba90:	4613      	mov	r3, r2
 800ba92:	81bb      	strh	r3, [r7, #12]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 800ba94:	2300      	movs	r3, #0
 800ba96:	61bb      	str	r3, [r7, #24]
#if OS_TASK_REG_TBL_SIZE > 0u
    INT8U      i;
#endif


    OS_ENTER_CRITICAL();
 800ba98:	f7f4 fbc4 	bl	8000224 <OS_CPU_SR_Save>
 800ba9c:	61b8      	str	r0, [r7, #24]
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 800ba9e:	4b63      	ldr	r3, [pc, #396]	; (800bc2c <OS_TCBInit+0x1ac>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	617b      	str	r3, [r7, #20]
    if (ptcb != (OS_TCB *)0) {
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	f000 80b8 	beq.w	800bc1c <OS_TCBInit+0x19c>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	695b      	ldr	r3, [r3, #20]
 800bab0:	4a5e      	ldr	r2, [pc, #376]	; (800bc2c <OS_TCBInit+0x1ac>)
 800bab2:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 800bab4:	69b8      	ldr	r0, [r7, #24]
 800bab6:	f7f4 fbb9 	bl	800022c <OS_CPU_SR_Restore>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	68ba      	ldr	r2, [r7, #8]
 800babe:	601a      	str	r2, [r3, #0]
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	7bfa      	ldrb	r2, [r7, #15]
 800bac4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	2200      	movs	r2, #0
 800bacc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	2200      	movs	r2, #0
 800bad4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	2200      	movs	r2, #0
 800badc:	625a      	str	r2, [r3, #36]	; 0x24

#if OS_TASK_CREATE_EXT_EN > 0u
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bae2:	605a      	str	r2, [r3, #4]
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bae8:	60da      	str	r2, [r3, #12]
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	609a      	str	r2, [r3, #8]
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800baf4:	821a      	strh	r2, [r3, #16]
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	89ba      	ldrh	r2, [r7, #12]
 800bafa:	825a      	strh	r2, [r3, #18]
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
 800bb06:	08db      	lsrs	r3, r3, #3
 800bb08:	b2da      	uxtb	r2, r3
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
 800bb12:	f003 0307 	and.w	r3, r3, #7
 800bb16:	b2da      	uxtb	r2, r3
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bb24:	461a      	mov	r2, r3
 800bb26:	2301      	movs	r3, #1
 800bb28:	4093      	lsls	r3, r2
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bb38:	461a      	mov	r2, r3
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	4093      	lsls	r3, r2
 800bb3e:	b2da      	uxtb	r2, r3
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	61da      	str	r2, [r3, #28]
#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
#endif

#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	621a      	str	r2, [r3, #32]
#endif

#if OS_TASK_PROFILE_EN > 0u
        ptcb->OSTCBCtxSwCtr    = 0uL;                      /* Initialize profiling variables           */
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	2200      	movs	r2, #0
 800bb56:	631a      	str	r2, [r3, #48]	; 0x30
        ptcb->OSTCBCyclesStart = 0uL;
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	639a      	str	r2, [r3, #56]	; 0x38
        ptcb->OSTCBCyclesTot   = 0uL;
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	2200      	movs	r2, #0
 800bb62:	635a      	str	r2, [r3, #52]	; 0x34
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	2200      	movs	r2, #0
 800bb68:	63da      	str	r2, [r3, #60]	; 0x3c
        ptcb->OSTCBStkUsed     = 0uL;
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	641a      	str	r2, [r3, #64]	; 0x40
#endif

#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName    = (INT8U *)(void *)"?";
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	4a2f      	ldr	r2, [pc, #188]	; (800bc30 <OS_TCBInit+0x1b0>)
 800bb74:	645a      	str	r2, [r3, #68]	; 0x44
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 800bb76:	2300      	movs	r3, #0
 800bb78:	77fb      	strb	r3, [r7, #31]
 800bb7a:	e008      	b.n	800bb8e <OS_TCBInit+0x10e>
            ptcb->OSTCBRegTbl[i] = 0u;
 800bb7c:	7ffa      	ldrb	r2, [r7, #31]
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	3212      	adds	r2, #18
 800bb82:	2100      	movs	r1, #0
 800bb84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 800bb88:	7ffb      	ldrb	r3, [r7, #31]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	77fb      	strb	r3, [r7, #31]
 800bb8e:	7ffb      	ldrb	r3, [r7, #31]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d0f3      	beq.n	800bb7c <OS_TCBInit+0xfc>
        }
#endif

        OSTCBInitHook(ptcb);
 800bb94:	6978      	ldr	r0, [r7, #20]
 800bb96:	f7ff fa30 	bl	800affa <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 800bb9a:	6978      	ldr	r0, [r7, #20]
 800bb9c:	f7ff f996 	bl	800aecc <OSTaskCreateHook>

        OS_ENTER_CRITICAL();
 800bba0:	f7f4 fb40 	bl	8000224 <OS_CPU_SR_Save>
 800bba4:	61b8      	str	r0, [r7, #24]
        OSTCBPrioTbl[prio] = ptcb;
 800bba6:	7bfb      	ldrb	r3, [r7, #15]
 800bba8:	4922      	ldr	r1, [pc, #136]	; (800bc34 <OS_TCBInit+0x1b4>)
 800bbaa:	697a      	ldr	r2, [r7, #20]
 800bbac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 800bbb0:	4b21      	ldr	r3, [pc, #132]	; (800bc38 <OS_TCBInit+0x1b8>)
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	619a      	str	r2, [r3, #24]
        if (OSTCBList != (OS_TCB *)0) {
 800bbbe:	4b1e      	ldr	r3, [pc, #120]	; (800bc38 <OS_TCBInit+0x1b8>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d003      	beq.n	800bbce <OS_TCBInit+0x14e>
            OSTCBList->OSTCBPrev = ptcb;
 800bbc6:	4b1c      	ldr	r3, [pc, #112]	; (800bc38 <OS_TCBInit+0x1b8>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	697a      	ldr	r2, [r7, #20]
 800bbcc:	619a      	str	r2, [r3, #24]
        }
        OSTCBList               = ptcb;
 800bbce:	4a1a      	ldr	r2, [pc, #104]	; (800bc38 <OS_TCBInit+0x1b8>)
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	6013      	str	r3, [r2, #0]
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800bbda:	4b18      	ldr	r3, [pc, #96]	; (800bc3c <OS_TCBInit+0x1bc>)
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	b2da      	uxtb	r2, r3
 800bbe2:	4b16      	ldr	r3, [pc, #88]	; (800bc3c <OS_TCBInit+0x1bc>)
 800bbe4:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bbec:	461a      	mov	r2, r3
 800bbee:	4b14      	ldr	r3, [pc, #80]	; (800bc40 <OS_TCBInit+0x1c0>)
 800bbf0:	5c9a      	ldrb	r2, [r3, r2]
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bbf8:	6979      	ldr	r1, [r7, #20]
 800bbfa:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	4b0f      	ldr	r3, [pc, #60]	; (800bc40 <OS_TCBInit+0x1c0>)
 800bc04:	545a      	strb	r2, [r3, r1]
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 800bc06:	4b0f      	ldr	r3, [pc, #60]	; (800bc44 <OS_TCBInit+0x1c4>)
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	b2da      	uxtb	r2, r3
 800bc0e:	4b0d      	ldr	r3, [pc, #52]	; (800bc44 <OS_TCBInit+0x1c4>)
 800bc10:	701a      	strb	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 800bc12:	69b8      	ldr	r0, [r7, #24]
 800bc14:	f7f4 fb0a 	bl	800022c <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
 800bc18:	2300      	movs	r3, #0
 800bc1a:	e003      	b.n	800bc24 <OS_TCBInit+0x1a4>
    }
    OS_EXIT_CRITICAL();
 800bc1c:	69b8      	ldr	r0, [r7, #24]
 800bc1e:	f7f4 fb05 	bl	800022c <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NO_MORE_TCB);
 800bc22:	2342      	movs	r3, #66	; 0x42
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3720      	adds	r7, #32
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	200089a8 	.word	0x200089a8
 800bc30:	0800e898 	.word	0x0800e898
 800bc34:	20009388 	.word	0x20009388
 800bc38:	20008678 	.word	0x20008678
 800bc3c:	20008a18 	.word	0x20008a18
 800bc40:	20008a1c 	.word	0x20008a1c
 800bc44:	200089ad 	.word	0x200089ad

0800bc48 <OSQCreate>:
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void    **start,
                      INT16U    size)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b086      	sub	sp, #24
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	460b      	mov	r3, r1
 800bc52:	807b      	strh	r3, [r7, #2]
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800bc54:	2300      	movs	r3, #0
 800bc56:	613b      	str	r3, [r7, #16]
    if (OSSafetyCriticalStartFlag == OS_TRUE) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
 800bc58:	4b2f      	ldr	r3, [pc, #188]	; (800bd18 <OSQCreate+0xd0>)
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d001      	beq.n	800bc64 <OSQCreate+0x1c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 800bc60:	2300      	movs	r3, #0
 800bc62:	e054      	b.n	800bd0e <OSQCreate+0xc6>
    }
    OS_ENTER_CRITICAL();
 800bc64:	f7f4 fade 	bl	8000224 <OS_CPU_SR_Save>
 800bc68:	6138      	str	r0, [r7, #16]
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 800bc6a:	4b2c      	ldr	r3, [pc, #176]	; (800bd1c <OSQCreate+0xd4>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	617b      	str	r3, [r7, #20]
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 800bc70:	4b2a      	ldr	r3, [pc, #168]	; (800bd1c <OSQCreate+0xd4>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d004      	beq.n	800bc82 <OSQCreate+0x3a>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 800bc78:	4b28      	ldr	r3, [pc, #160]	; (800bd1c <OSQCreate+0xd4>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	4a27      	ldr	r2, [pc, #156]	; (800bd1c <OSQCreate+0xd4>)
 800bc80:	6013      	str	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();
 800bc82:	6938      	ldr	r0, [r7, #16]
 800bc84:	f7f4 fad2 	bl	800022c <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d03e      	beq.n	800bd0c <OSQCreate+0xc4>
        OS_ENTER_CRITICAL();
 800bc8e:	f7f4 fac9 	bl	8000224 <OS_CPU_SR_Save>
 800bc92:	6138      	str	r0, [r7, #16]
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 800bc94:	4b22      	ldr	r3, [pc, #136]	; (800bd20 <OSQCreate+0xd8>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	60fb      	str	r3, [r7, #12]
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d029      	beq.n	800bcf4 <OSQCreate+0xac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 800bca0:	4b1f      	ldr	r3, [pc, #124]	; (800bd20 <OSQCreate+0xd8>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a1e      	ldr	r2, [pc, #120]	; (800bd20 <OSQCreate+0xd8>)
 800bca8:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL();
 800bcaa:	6938      	ldr	r0, [r7, #16]
 800bcac:	f7f4 fabe 	bl	800022c <OS_CPU_SR_Restore>
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	605a      	str	r2, [r3, #4]
            pq->OSQEnd             = &start[size];
 800bcb6:	887b      	ldrh	r3, [r7, #2]
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	441a      	add	r2, r3
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	609a      	str	r2, [r3, #8]
            pq->OSQIn              = start;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	60da      	str	r2, [r3, #12]
            pq->OSQOut             = start;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	611a      	str	r2, [r3, #16]
            pq->OSQSize            = size;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	887a      	ldrh	r2, [r7, #2]
 800bcd2:	829a      	strh	r2, [r3, #20]
            pq->OSQEntries         = 0u;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	82da      	strh	r2, [r3, #22]
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	2202      	movs	r2, #2
 800bcde:	701a      	strb	r2, [r3, #0]
            pevent->OSEventCnt     = 0u;
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	2200      	movs	r2, #0
 800bce4:	811a      	strh	r2, [r3, #8]
            pevent->OSEventPtr     = pq;
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	68fa      	ldr	r2, [r7, #12]
 800bcea:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
            pevent->OSEventName    = (INT8U *)(void *)"?";
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 800bcec:	6978      	ldr	r0, [r7, #20]
 800bcee:	f7ff fc52 	bl	800b596 <OS_EventWaitListInit>
 800bcf2:	e00b      	b.n	800bd0c <OSQCreate+0xc4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 800bcf4:	4b09      	ldr	r3, [pc, #36]	; (800bd1c <OSQCreate+0xd4>)
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	605a      	str	r2, [r3, #4]
            OSEventFreeList    = pevent;
 800bcfc:	4a07      	ldr	r2, [pc, #28]	; (800bd1c <OSQCreate+0xd4>)
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL();
 800bd02:	6938      	ldr	r0, [r7, #16]
 800bd04:	f7f4 fa92 	bl	800022c <OS_CPU_SR_Restore>
            pevent = (OS_EVENT *)0;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	617b      	str	r3, [r7, #20]
        }
    }
    return (pevent);
 800bd0c:	697b      	ldr	r3, [r7, #20]
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3718      	adds	r7, #24
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop
 800bd18:	20008a28 	.word	0x20008a28
 800bd1c:	20008a24 	.word	0x20008a24
 800bd20:	20008a14 	.word	0x20008a14

0800bd24 <OSQPend>:
*/

void  *OSQPend (OS_EVENT  *pevent,
                INT32U     timeout,
                INT8U     *perr)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b088      	sub	sp, #32
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800bd30:	2300      	movs	r3, #0
 800bd32:	61bb      	str	r3, [r7, #24]
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
        *perr = OS_ERR_PEVENT_NULL;
        return ((void *)0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	2b02      	cmp	r3, #2
 800bd3a:	d004      	beq.n	800bd46 <OSQPend+0x22>
        *perr = OS_ERR_EVENT_TYPE;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	701a      	strb	r2, [r3, #0]
        return ((void *)0);
 800bd42:	2300      	movs	r3, #0
 800bd44:	e092      	b.n	800be6c <OSQPend+0x148>
    }
    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
 800bd46:	4b4b      	ldr	r3, [pc, #300]	; (800be74 <OSQPend+0x150>)
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d004      	beq.n	800bd58 <OSQPend+0x34>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2202      	movs	r2, #2
 800bd52:	701a      	strb	r2, [r3, #0]
        return ((void *)0);
 800bd54:	2300      	movs	r3, #0
 800bd56:	e089      	b.n	800be6c <OSQPend+0x148>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked ...            */
 800bd58:	4b47      	ldr	r3, [pc, #284]	; (800be78 <OSQPend+0x154>)
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d004      	beq.n	800bd6a <OSQPend+0x46>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	220d      	movs	r2, #13
 800bd64:	701a      	strb	r2, [r3, #0]
        return ((void *)0);
 800bd66:	2300      	movs	r3, #0
 800bd68:	e080      	b.n	800be6c <OSQPend+0x148>
    }
    OS_ENTER_CRITICAL();
 800bd6a:	f7f4 fa5b 	bl	8000224 <OS_CPU_SR_Save>
 800bd6e:	61b8      	str	r0, [r7, #24]
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	617b      	str	r3, [r7, #20]
    if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	8adb      	ldrh	r3, [r3, #22]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d01e      	beq.n	800bdbc <OSQPend+0x98>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	691b      	ldr	r3, [r3, #16]
 800bd82:	1d19      	adds	r1, r3, #4
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	6111      	str	r1, [r2, #16]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	61fb      	str	r3, [r7, #28]
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	8adb      	ldrh	r3, [r3, #22]
 800bd90:	3b01      	subs	r3, #1
 800bd92:	b29a      	uxth	r2, r3
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	82da      	strh	r2, [r3, #22]
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	691a      	ldr	r2, [r3, #16]
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d103      	bne.n	800bdac <OSQPend+0x88>
            pq->OSQOut = pq->OSQStart;
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	685a      	ldr	r2, [r3, #4]
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	611a      	str	r2, [r3, #16]
        }
        OS_EXIT_CRITICAL();
 800bdac:	69b8      	ldr	r0, [r7, #24]
 800bdae:	f7f4 fa3d 	bl	800022c <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	701a      	strb	r2, [r3, #0]
        return (pmsg);                           /* Return message received                            */
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	e057      	b.n	800be6c <OSQPend+0x148>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 800bdbc:	4b2f      	ldr	r3, [pc, #188]	; (800be7c <OSQPend+0x158>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800bdc4:	4b2d      	ldr	r3, [pc, #180]	; (800be7c <OSQPend+0x158>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f042 0204 	orr.w	r2, r2, #4
 800bdcc:	b2d2      	uxtb	r2, r2
 800bdce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 800bdd2:	4b2a      	ldr	r3, [pc, #168]	; (800be7c <OSQPend+0x158>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 800bddc:	4b27      	ldr	r3, [pc, #156]	; (800be7c <OSQPend+0x158>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	68ba      	ldr	r2, [r7, #8]
 800bde2:	625a      	str	r2, [r3, #36]	; 0x24
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f7ff fb51 	bl	800b48c <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 800bdea:	69b8      	ldr	r0, [r7, #24]
 800bdec:	f7f4 fa1e 	bl	800022c <OS_CPU_SR_Restore>
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 800bdf0:	f7ff fd48 	bl	800b884 <OS_Sched>
    OS_ENTER_CRITICAL();
 800bdf4:	f7f4 fa16 	bl	8000224 <OS_CPU_SR_Save>
 800bdf8:	61b8      	str	r0, [r7, #24]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 800bdfa:	4b20      	ldr	r3, [pc, #128]	; (800be7c <OSQPend+0x158>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800be02:	2b00      	cmp	r3, #0
 800be04:	d002      	beq.n	800be0c <OSQPend+0xe8>
 800be06:	2b02      	cmp	r3, #2
 800be08:	d008      	beq.n	800be1c <OSQPend+0xf8>
 800be0a:	e00d      	b.n	800be28 <OSQPend+0x104>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 800be0c:	4b1b      	ldr	r3, [pc, #108]	; (800be7c <OSQPend+0x158>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	6a1b      	ldr	r3, [r3, #32]
 800be12:	61fb      	str	r3, [r7, #28]
            *perr =  OS_ERR_NONE;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	701a      	strb	r2, [r3, #0]
             break;
 800be1a:	e011      	b.n	800be40 <OSQPend+0x11c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 800be1c:	2300      	movs	r3, #0
 800be1e:	61fb      	str	r3, [r7, #28]
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	220e      	movs	r2, #14
 800be24:	701a      	strb	r2, [r3, #0]
             break;
 800be26:	e00b      	b.n	800be40 <OSQPend+0x11c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 800be28:	4b14      	ldr	r3, [pc, #80]	; (800be7c <OSQPend+0x158>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	68f9      	ldr	r1, [r7, #12]
 800be2e:	4618      	mov	r0, r3
 800be30:	f7ff fb82 	bl	800b538 <OS_EventTaskRemove>
             pmsg = (void *)0;
 800be34:	2300      	movs	r3, #0
 800be36:	61fb      	str	r3, [r7, #28]
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	220a      	movs	r2, #10
 800be3c:	701a      	strb	r2, [r3, #0]
             break;
 800be3e:	bf00      	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 800be40:	4b0e      	ldr	r3, [pc, #56]	; (800be7c <OSQPend+0x158>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2200      	movs	r2, #0
 800be46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 800be4a:	4b0c      	ldr	r3, [pc, #48]	; (800be7c <OSQPend+0x158>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2200      	movs	r2, #0
 800be50:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 800be54:	4b09      	ldr	r3, [pc, #36]	; (800be7c <OSQPend+0x158>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2200      	movs	r2, #0
 800be5a:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 800be5c:	4b07      	ldr	r3, [pc, #28]	; (800be7c <OSQPend+0x158>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2200      	movs	r2, #0
 800be62:	621a      	str	r2, [r3, #32]
    OS_EXIT_CRITICAL();
 800be64:	69b8      	ldr	r0, [r7, #24]
 800be66:	f7f4 f9e1 	bl	800022c <OS_CPU_SR_Restore>
    return (pmsg);                                    /* Return received message                       */
 800be6a:	69fb      	ldr	r3, [r7, #28]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3720      	adds	r7, #32
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}
 800be74:	20008a28 	.word	0x20008a28
 800be78:	2000866c 	.word	0x2000866c
 800be7c:	20008a2c 	.word	0x20008a2c

0800be80 <OSQPost>:
*/

#if OS_Q_POST_EN > 0u
INT8U  OSQPost (OS_EVENT  *pevent,
                void      *pmsg)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 800be8a:	2300      	movs	r3, #0
 800be8c:	60fb      	str	r3, [r7, #12]
#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	2b02      	cmp	r3, #2
 800be94:	d001      	beq.n	800be9a <OSQPost+0x1a>
        return (OS_ERR_EVENT_TYPE);
 800be96:	2301      	movs	r3, #1
 800be98:	e03c      	b.n	800bf14 <OSQPost+0x94>
    }
    OS_ENTER_CRITICAL();
 800be9a:	f7f4 f9c3 	bl	8000224 <OS_CPU_SR_Save>
 800be9e:	60f8      	str	r0, [r7, #12]
    if (pevent->OSEventGrp != 0u) {                    /* See if any task pending on queue             */
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	7a9b      	ldrb	r3, [r3, #10]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00c      	beq.n	800bec2 <OSQPost+0x42>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 800bea8:	2300      	movs	r3, #0
 800beaa:	2204      	movs	r2, #4
 800beac:	6839      	ldr	r1, [r7, #0]
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f7ff fa86 	bl	800b3c0 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	f7f4 f9b9 	bl	800022c <OS_CPU_SR_Restore>
        OS_Sched();                                    /* Find highest priority task ready to run      */
 800beba:	f7ff fce3 	bl	800b884 <OS_Sched>
        return (OS_ERR_NONE);
 800bebe:	2300      	movs	r3, #0
 800bec0:	e028      	b.n	800bf14 <OSQPost+0x94>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	60bb      	str	r3, [r7, #8]
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	8ada      	ldrh	r2, [r3, #22]
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	8a9b      	ldrh	r3, [r3, #20]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d304      	bcc.n	800bede <OSQPost+0x5e>
        OS_EXIT_CRITICAL();
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f7f4 f9a9 	bl	800022c <OS_CPU_SR_Restore>
        return (OS_ERR_Q_FULL);
 800beda:	231e      	movs	r3, #30
 800bedc:	e01a      	b.n	800bf14 <OSQPost+0x94>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	1d19      	adds	r1, r3, #4
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	60d1      	str	r1, [r2, #12]
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	601a      	str	r2, [r3, #0]
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	8adb      	ldrh	r3, [r3, #22]
 800bef0:	3301      	adds	r3, #1
 800bef2:	b29a      	uxth	r2, r3
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	82da      	strh	r2, [r3, #22]
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	68da      	ldr	r2, [r3, #12]
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d103      	bne.n	800bf0c <OSQPost+0x8c>
        pq->OSQIn = pq->OSQStart;
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	685a      	ldr	r2, [r3, #4]
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	60da      	str	r2, [r3, #12]
    }
    OS_EXIT_CRITICAL();
 800bf0c:	68f8      	ldr	r0, [r7, #12]
 800bf0e:	f7f4 f98d 	bl	800022c <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
 800bf12:	2300      	movs	r3, #0
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3710      	adds	r7, #16
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 800bf22:	2160      	movs	r1, #96	; 0x60
 800bf24:	4819      	ldr	r0, [pc, #100]	; (800bf8c <OS_QInit+0x70>)
 800bf26:	f7ff fc95 	bl	800b854 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	81fb      	strh	r3, [r7, #14]
 800bf2e:	e018      	b.n	800bf62 <OS_QInit+0x46>
        ix_next = ix + 1u;
 800bf30:	89fb      	ldrh	r3, [r7, #14]
 800bf32:	3301      	adds	r3, #1
 800bf34:	80fb      	strh	r3, [r7, #6]
        pq1 = &OSQTbl[ix];
 800bf36:	89fa      	ldrh	r2, [r7, #14]
 800bf38:	4613      	mov	r3, r2
 800bf3a:	005b      	lsls	r3, r3, #1
 800bf3c:	4413      	add	r3, r2
 800bf3e:	00db      	lsls	r3, r3, #3
 800bf40:	4a12      	ldr	r2, [pc, #72]	; (800bf8c <OS_QInit+0x70>)
 800bf42:	4413      	add	r3, r2
 800bf44:	60bb      	str	r3, [r7, #8]
        pq2 = &OSQTbl[ix_next];
 800bf46:	88fa      	ldrh	r2, [r7, #6]
 800bf48:	4613      	mov	r3, r2
 800bf4a:	005b      	lsls	r3, r3, #1
 800bf4c:	4413      	add	r3, r2
 800bf4e:	00db      	lsls	r3, r3, #3
 800bf50:	4a0e      	ldr	r2, [pc, #56]	; (800bf8c <OS_QInit+0x70>)
 800bf52:	4413      	add	r3, r2
 800bf54:	603b      	str	r3, [r7, #0]
        pq1->OSQPtr = pq2;
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	683a      	ldr	r2, [r7, #0]
 800bf5a:	601a      	str	r2, [r3, #0]
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 800bf5c:	89fb      	ldrh	r3, [r7, #14]
 800bf5e:	3301      	adds	r3, #1
 800bf60:	81fb      	strh	r3, [r7, #14]
 800bf62:	89fb      	ldrh	r3, [r7, #14]
 800bf64:	2b02      	cmp	r3, #2
 800bf66:	d9e3      	bls.n	800bf30 <OS_QInit+0x14>
    }
    pq1         = &OSQTbl[ix];
 800bf68:	89fa      	ldrh	r2, [r7, #14]
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	005b      	lsls	r3, r3, #1
 800bf6e:	4413      	add	r3, r2
 800bf70:	00db      	lsls	r3, r3, #3
 800bf72:	4a06      	ldr	r2, [pc, #24]	; (800bf8c <OS_QInit+0x70>)
 800bf74:	4413      	add	r3, r2
 800bf76:	60bb      	str	r3, [r7, #8]
    pq1->OSQPtr = (OS_Q *)0;
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	601a      	str	r2, [r3, #0]
    OSQFreeList = &OSQTbl[0];
 800bf7e:	4b04      	ldr	r3, [pc, #16]	; (800bf90 <OS_QInit+0x74>)
 800bf80:	4a02      	ldr	r2, [pc, #8]	; (800bf8c <OS_QInit+0x70>)
 800bf82:	601a      	str	r2, [r3, #0]
#endif
}
 800bf84:	bf00      	nop
 800bf86:	3710      	adds	r7, #16
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	200089b0 	.word	0x200089b0
 800bf90:	20008a14 	.word	0x20008a14

0800bf94 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	80fb      	strh	r3, [r7, #6]
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	60fb      	str	r3, [r7, #12]
    if (OSSafetyCriticalStartFlag == OS_TRUE) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
 800bfa2:	4b16      	ldr	r3, [pc, #88]	; (800bffc <OSSemCreate+0x68>)
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d001      	beq.n	800bfae <OSSemCreate+0x1a>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 800bfaa:	2300      	movs	r3, #0
 800bfac:	e021      	b.n	800bff2 <OSSemCreate+0x5e>
    }
    OS_ENTER_CRITICAL();
 800bfae:	f7f4 f939 	bl	8000224 <OS_CPU_SR_Save>
 800bfb2:	60f8      	str	r0, [r7, #12]
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 800bfb4:	4b12      	ldr	r3, [pc, #72]	; (800c000 <OSSemCreate+0x6c>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	60bb      	str	r3, [r7, #8]
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 800bfba:	4b11      	ldr	r3, [pc, #68]	; (800c000 <OSSemCreate+0x6c>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d004      	beq.n	800bfcc <OSSemCreate+0x38>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 800bfc2:	4b0f      	ldr	r3, [pc, #60]	; (800c000 <OSSemCreate+0x6c>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	4a0d      	ldr	r2, [pc, #52]	; (800c000 <OSSemCreate+0x6c>)
 800bfca:	6013      	str	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();
 800bfcc:	68f8      	ldr	r0, [r7, #12]
 800bfce:	f7f4 f92d 	bl	800022c <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d00b      	beq.n	800bff0 <OSSemCreate+0x5c>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	2203      	movs	r2, #3
 800bfdc:	701a      	strb	r2, [r3, #0]
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	88fa      	ldrh	r2, [r7, #6]
 800bfe2:	811a      	strh	r2, [r3, #8]
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 800bfea:	68b8      	ldr	r0, [r7, #8]
 800bfec:	f7ff fad3 	bl	800b596 <OS_EventWaitListInit>
    }
    return (pevent);
 800bff0:	68bb      	ldr	r3, [r7, #8]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	20008a28 	.word	0x20008a28
 800c000:	20008a24 	.word	0x20008a24

0800c004 <OSSemPend>:
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b086      	sub	sp, #24
 800c008:	af00      	add	r7, sp, #0
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 800c010:	2300      	movs	r3, #0
 800c012:	617b      	str	r3, [r7, #20]
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	2b03      	cmp	r3, #3
 800c01a:	d003      	beq.n	800c024 <OSSemPend+0x20>
        *perr = OS_ERR_EVENT_TYPE;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2201      	movs	r2, #1
 800c020:	701a      	strb	r2, [r3, #0]
        return;
 800c022:	e06e      	b.n	800c102 <OSSemPend+0xfe>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
 800c024:	4b38      	ldr	r3, [pc, #224]	; (800c108 <OSSemPend+0x104>)
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d003      	beq.n	800c034 <OSSemPend+0x30>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2202      	movs	r2, #2
 800c030:	701a      	strb	r2, [r3, #0]
        return;
 800c032:	e066      	b.n	800c102 <OSSemPend+0xfe>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
 800c034:	4b35      	ldr	r3, [pc, #212]	; (800c10c <OSSemPend+0x108>)
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d003      	beq.n	800c044 <OSSemPend+0x40>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	220d      	movs	r2, #13
 800c040:	701a      	strb	r2, [r3, #0]
        return;
 800c042:	e05e      	b.n	800c102 <OSSemPend+0xfe>
    }
    OS_ENTER_CRITICAL();
 800c044:	f7f4 f8ee 	bl	8000224 <OS_CPU_SR_Save>
 800c048:	6178      	str	r0, [r7, #20]
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	891b      	ldrh	r3, [r3, #8]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00c      	beq.n	800c06c <OSSemPend+0x68>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	891b      	ldrh	r3, [r3, #8]
 800c056:	3b01      	subs	r3, #1
 800c058:	b29a      	uxth	r2, r3
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 800c05e:	6978      	ldr	r0, [r7, #20]
 800c060:	f7f4 f8e4 	bl	800022c <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	701a      	strb	r2, [r3, #0]
        return;
 800c06a:	e04a      	b.n	800c102 <OSSemPend+0xfe>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 800c06c:	4b28      	ldr	r3, [pc, #160]	; (800c110 <OSSemPend+0x10c>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800c074:	4b26      	ldr	r3, [pc, #152]	; (800c110 <OSSemPend+0x10c>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f042 0201 	orr.w	r2, r2, #1
 800c07c:	b2d2      	uxtb	r2, r2
 800c07e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 800c082:	4b23      	ldr	r3, [pc, #140]	; (800c110 <OSSemPend+0x10c>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2200      	movs	r2, #0
 800c088:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 800c08c:	4b20      	ldr	r3, [pc, #128]	; (800c110 <OSSemPend+0x10c>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	68ba      	ldr	r2, [r7, #8]
 800c092:	625a      	str	r2, [r3, #36]	; 0x24
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 800c094:	68f8      	ldr	r0, [r7, #12]
 800c096:	f7ff f9f9 	bl	800b48c <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 800c09a:	6978      	ldr	r0, [r7, #20]
 800c09c:	f7f4 f8c6 	bl	800022c <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready         */
 800c0a0:	f7ff fbf0 	bl	800b884 <OS_Sched>
    OS_ENTER_CRITICAL();
 800c0a4:	f7f4 f8be 	bl	8000224 <OS_CPU_SR_Save>
 800c0a8:	6178      	str	r0, [r7, #20]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 800c0aa:	4b19      	ldr	r3, [pc, #100]	; (800c110 <OSSemPend+0x10c>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d002      	beq.n	800c0bc <OSSemPend+0xb8>
 800c0b6:	2b02      	cmp	r3, #2
 800c0b8:	d004      	beq.n	800c0c4 <OSSemPend+0xc0>
 800c0ba:	e007      	b.n	800c0cc <OSSemPend+0xc8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	701a      	strb	r2, [r3, #0]
             break;
 800c0c2:	e00d      	b.n	800c0e0 <OSSemPend+0xdc>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	220e      	movs	r2, #14
 800c0c8:	701a      	strb	r2, [r3, #0]
             break;
 800c0ca:	e009      	b.n	800c0e0 <OSSemPend+0xdc>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 800c0cc:	4b10      	ldr	r3, [pc, #64]	; (800c110 <OSSemPend+0x10c>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	68f9      	ldr	r1, [r7, #12]
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7ff fa30 	bl	800b538 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	220a      	movs	r2, #10
 800c0dc:	701a      	strb	r2, [r3, #0]
             break;
 800c0de:	bf00      	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 800c0e0:	4b0b      	ldr	r3, [pc, #44]	; (800c110 <OSSemPend+0x10c>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 800c0ea:	4b09      	ldr	r3, [pc, #36]	; (800c110 <OSSemPend+0x10c>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 800c0f4:	4b06      	ldr	r3, [pc, #24]	; (800c110 <OSSemPend+0x10c>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
 800c0fc:	6978      	ldr	r0, [r7, #20]
 800c0fe:	f7f4 f895 	bl	800022c <OS_CPU_SR_Restore>
}
 800c102:	3718      	adds	r7, #24
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	20008a28 	.word	0x20008a28
 800c10c:	2000866c 	.word	0x2000866c
 800c110:	20008a2c 	.word	0x20008a2c

0800c114 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 800c11c:	2300      	movs	r3, #0
 800c11e:	60fb      	str	r3, [r7, #12]
#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	2b03      	cmp	r3, #3
 800c126:	d001      	beq.n	800c12c <OSSemPost+0x18>
        return (OS_ERR_EVENT_TYPE);
 800c128:	2301      	movs	r3, #1
 800c12a:	e028      	b.n	800c17e <OSSemPost+0x6a>
    }
    OS_ENTER_CRITICAL();
 800c12c:	f7f4 f87a 	bl	8000224 <OS_CPU_SR_Save>
 800c130:	60f8      	str	r0, [r7, #12]
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	7a9b      	ldrb	r3, [r3, #10]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d00c      	beq.n	800c154 <OSSemPost+0x40>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 800c13a:	2300      	movs	r3, #0
 800c13c:	2201      	movs	r2, #1
 800c13e:	2100      	movs	r1, #0
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f7ff f93d 	bl	800b3c0 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	f7f4 f870 	bl	800022c <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
 800c14c:	f7ff fb9a 	bl	800b884 <OS_Sched>
        return (OS_ERR_NONE);
 800c150:	2300      	movs	r3, #0
 800c152:	e014      	b.n	800c17e <OSSemPost+0x6a>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	891b      	ldrh	r3, [r3, #8]
 800c158:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d00a      	beq.n	800c176 <OSSemPost+0x62>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	891b      	ldrh	r3, [r3, #8]
 800c164:	3301      	adds	r3, #1
 800c166:	b29a      	uxth	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 800c16c:	68f8      	ldr	r0, [r7, #12]
 800c16e:	f7f4 f85d 	bl	800022c <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
 800c172:	2300      	movs	r3, #0
 800c174:	e003      	b.n	800c17e <OSSemPost+0x6a>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
 800c176:	68f8      	ldr	r0, [r7, #12]
 800c178:	f7f4 f858 	bl	800022c <OS_CPU_SR_Restore>
    return (OS_ERR_SEM_OVF);
 800c17c:	2333      	movs	r3, #51	; 0x33
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3710      	adds	r7, #16
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}

0800c186 <OSSemQuery>:
*/

#if OS_SEM_QUERY_EN > 0u
INT8U  OSSemQuery (OS_EVENT     *pevent,
                   OS_SEM_DATA  *p_sem_data)
{
 800c186:	b580      	push	{r7, lr}
 800c188:	b086      	sub	sp, #24
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
 800c18e:	6039      	str	r1, [r7, #0]
    INT8U       i;
    OS_PRIO    *psrc;
    OS_PRIO    *pdest;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR   cpu_sr = 0u;
 800c190:	2300      	movs	r3, #0
 800c192:	60bb      	str	r3, [r7, #8]
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	2b03      	cmp	r3, #3
 800c19a:	d001      	beq.n	800c1a0 <OSSemQuery+0x1a>
        return (OS_ERR_EVENT_TYPE);
 800c19c:	2301      	movs	r3, #1
 800c19e:	e025      	b.n	800c1ec <OSSemQuery+0x66>
    }
    OS_ENTER_CRITICAL();
 800c1a0:	f7f4 f840 	bl	8000224 <OS_CPU_SR_Save>
 800c1a4:	60b8      	str	r0, [r7, #8]
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	7a9a      	ldrb	r2, [r3, #10]
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	729a      	strb	r2, [r3, #10]
    psrc                   = &pevent->OSEventTbl[0];
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	330b      	adds	r3, #11
 800c1b2:	613b      	str	r3, [r7, #16]
    pdest                  = &p_sem_data->OSEventTbl[0];
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	3302      	adds	r3, #2
 800c1b8:	60fb      	str	r3, [r7, #12]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	75fb      	strb	r3, [r7, #23]
 800c1be:	e00a      	b.n	800c1d6 <OSSemQuery+0x50>
        *pdest++ = *psrc++;
 800c1c0:	693a      	ldr	r2, [r7, #16]
 800c1c2:	1c53      	adds	r3, r2, #1
 800c1c4:	613b      	str	r3, [r7, #16]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	1c59      	adds	r1, r3, #1
 800c1ca:	60f9      	str	r1, [r7, #12]
 800c1cc:	7812      	ldrb	r2, [r2, #0]
 800c1ce:	701a      	strb	r2, [r3, #0]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 800c1d0:	7dfb      	ldrb	r3, [r7, #23]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	75fb      	strb	r3, [r7, #23]
 800c1d6:	7dfb      	ldrb	r3, [r7, #23]
 800c1d8:	2b07      	cmp	r3, #7
 800c1da:	d9f1      	bls.n	800c1c0 <OSSemQuery+0x3a>
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	891a      	ldrh	r2, [r3, #8]
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	801a      	strh	r2, [r3, #0]
    OS_EXIT_CRITICAL();
 800c1e4:	68b8      	ldr	r0, [r7, #8]
 800c1e6:	f7f4 f821 	bl	800022c <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
 800c1ea:	2300      	movs	r3, #0
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3718      	adds	r7, #24
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <OSTaskCreate>:
#if OS_TASK_CREATE_EN > 0u
INT8U  OSTaskCreate (void   (*task)(void *p_arg),
                     void    *p_arg,
                     OS_STK  *ptos,
                     INT8U    prio)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b08c      	sub	sp, #48	; 0x30
 800c1f8:	af04      	add	r7, sp, #16
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	607a      	str	r2, [r7, #4]
 800c200:	70fb      	strb	r3, [r7, #3]
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0u;
 800c202:	2300      	movs	r3, #0
 800c204:	61fb      	str	r3, [r7, #28]
#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
 800c206:	f7f4 f80d 	bl	8000224 <OS_CPU_SR_Save>
 800c20a:	61f8      	str	r0, [r7, #28]
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 800c20c:	4b25      	ldr	r3, [pc, #148]	; (800c2a4 <OSTaskCreate+0xb0>)
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d004      	beq.n	800c21e <OSTaskCreate+0x2a>
        OS_EXIT_CRITICAL();
 800c214:	69f8      	ldr	r0, [r7, #28]
 800c216:	f7f4 f809 	bl	800022c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
 800c21a:	233c      	movs	r3, #60	; 0x3c
 800c21c:	e03d      	b.n	800c29a <OSTaskCreate+0xa6>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 800c21e:	78fb      	ldrb	r3, [r7, #3]
 800c220:	4a21      	ldr	r2, [pc, #132]	; (800c2a8 <OSTaskCreate+0xb4>)
 800c222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d133      	bne.n	800c292 <OSTaskCreate+0x9e>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 800c22a:	78fb      	ldrb	r3, [r7, #3]
 800c22c:	4a1e      	ldr	r2, [pc, #120]	; (800c2a8 <OSTaskCreate+0xb4>)
 800c22e:	2101      	movs	r1, #1
 800c230:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 800c234:	69f8      	ldr	r0, [r7, #28]
 800c236:	f7f3 fff9 	bl	800022c <OS_CPU_SR_Restore>
        psp = OSTaskStkInit(task, p_arg, ptos, 0u);             /* Initialize the task's stack         */
 800c23a:	2300      	movs	r3, #0
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	68b9      	ldr	r1, [r7, #8]
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	f7fe fe5a 	bl	800aefa <OSTaskStkInit>
 800c246:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0u, 0u, (void *)0, 0u);
 800c248:	78f8      	ldrb	r0, [r7, #3]
 800c24a:	2300      	movs	r3, #0
 800c24c:	9302      	str	r3, [sp, #8]
 800c24e:	2300      	movs	r3, #0
 800c250:	9301      	str	r3, [sp, #4]
 800c252:	2300      	movs	r3, #0
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	2300      	movs	r3, #0
 800c258:	2200      	movs	r2, #0
 800c25a:	69b9      	ldr	r1, [r7, #24]
 800c25c:	f7ff fc10 	bl	800ba80 <OS_TCBInit>
 800c260:	4603      	mov	r3, r0
 800c262:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 800c264:	7dfb      	ldrb	r3, [r7, #23]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d106      	bne.n	800c278 <OSTaskCreate+0x84>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 800c26a:	4b10      	ldr	r3, [pc, #64]	; (800c2ac <OSTaskCreate+0xb8>)
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d10d      	bne.n	800c28e <OSTaskCreate+0x9a>
                OS_Sched();
 800c272:	f7ff fb07 	bl	800b884 <OS_Sched>
 800c276:	e00a      	b.n	800c28e <OSTaskCreate+0x9a>
            }
        } else {
            OS_ENTER_CRITICAL();
 800c278:	f7f3 ffd4 	bl	8000224 <OS_CPU_SR_Save>
 800c27c:	61f8      	str	r0, [r7, #28]
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 800c27e:	78fb      	ldrb	r3, [r7, #3]
 800c280:	4a09      	ldr	r2, [pc, #36]	; (800c2a8 <OSTaskCreate+0xb4>)
 800c282:	2100      	movs	r1, #0
 800c284:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 800c288:	69f8      	ldr	r0, [r7, #28]
 800c28a:	f7f3 ffcf 	bl	800022c <OS_CPU_SR_Restore>
        }
        return (err);
 800c28e:	7dfb      	ldrb	r3, [r7, #23]
 800c290:	e003      	b.n	800c29a <OSTaskCreate+0xa6>
    }
    OS_EXIT_CRITICAL();
 800c292:	69f8      	ldr	r0, [r7, #28]
 800c294:	f7f3 ffca 	bl	800022c <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
 800c298:	2328      	movs	r3, #40	; 0x28
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3720      	adds	r7, #32
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	20008a28 	.word	0x20008a28
 800c2a8:	20009388 	.word	0x20009388
 800c2ac:	2000866d 	.word	0x2000866d

0800c2b0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b08c      	sub	sp, #48	; 0x30
 800c2b4:	af04      	add	r7, sp, #16
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	607a      	str	r2, [r7, #4]
 800c2bc:	70fb      	strb	r3, [r7, #3]
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0u;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	61fb      	str	r3, [r7, #28]
#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
 800c2c2:	f7f3 ffaf 	bl	8000224 <OS_CPU_SR_Save>
 800c2c6:	61f8      	str	r0, [r7, #28]
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 800c2c8:	4b28      	ldr	r3, [pc, #160]	; (800c36c <OSTaskCreateExt+0xbc>)
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d004      	beq.n	800c2da <OSTaskCreateExt+0x2a>
        OS_EXIT_CRITICAL();
 800c2d0:	69f8      	ldr	r0, [r7, #28]
 800c2d2:	f7f3 ffab 	bl	800022c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
 800c2d6:	233c      	movs	r3, #60	; 0x3c
 800c2d8:	e044      	b.n	800c364 <OSTaskCreateExt+0xb4>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 800c2da:	78fb      	ldrb	r3, [r7, #3]
 800c2dc:	4a24      	ldr	r2, [pc, #144]	; (800c370 <OSTaskCreateExt+0xc0>)
 800c2de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d13a      	bne.n	800c35c <OSTaskCreateExt+0xac>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 800c2e6:	78fb      	ldrb	r3, [r7, #3]
 800c2e8:	4a21      	ldr	r2, [pc, #132]	; (800c370 <OSTaskCreateExt+0xc0>)
 800c2ea:	2101      	movs	r1, #1
 800c2ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 800c2f0:	69f8      	ldr	r0, [r7, #28]
 800c2f2:	f7f3 ff9b 	bl	800022c <OS_CPU_SR_Restore>

#if (OS_TASK_STAT_STK_CHK_EN > 0u)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 800c2f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2fe:	f000 f95b 	bl	800c5b8 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 800c302:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	68b9      	ldr	r1, [r7, #8]
 800c308:	68f8      	ldr	r0, [r7, #12]
 800c30a:	f7fe fdf6 	bl	800aefa <OSTaskStkInit>
 800c30e:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 800c310:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800c312:	78f8      	ldrb	r0, [r7, #3]
 800c314:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c316:	9302      	str	r3, [sp, #8]
 800c318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c31a:	9301      	str	r3, [sp, #4]
 800c31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31e:	9300      	str	r3, [sp, #0]
 800c320:	4613      	mov	r3, r2
 800c322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c324:	69b9      	ldr	r1, [r7, #24]
 800c326:	f7ff fbab 	bl	800ba80 <OS_TCBInit>
 800c32a:	4603      	mov	r3, r0
 800c32c:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 800c32e:	7dfb      	ldrb	r3, [r7, #23]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d106      	bne.n	800c342 <OSTaskCreateExt+0x92>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 800c334:	4b0f      	ldr	r3, [pc, #60]	; (800c374 <OSTaskCreateExt+0xc4>)
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d10d      	bne.n	800c358 <OSTaskCreateExt+0xa8>
                OS_Sched();
 800c33c:	f7ff faa2 	bl	800b884 <OS_Sched>
 800c340:	e00a      	b.n	800c358 <OSTaskCreateExt+0xa8>
            }
        } else {
            OS_ENTER_CRITICAL();
 800c342:	f7f3 ff6f 	bl	8000224 <OS_CPU_SR_Save>
 800c346:	61f8      	str	r0, [r7, #28]
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 800c348:	78fb      	ldrb	r3, [r7, #3]
 800c34a:	4a09      	ldr	r2, [pc, #36]	; (800c370 <OSTaskCreateExt+0xc0>)
 800c34c:	2100      	movs	r1, #0
 800c34e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 800c352:	69f8      	ldr	r0, [r7, #28]
 800c354:	f7f3 ff6a 	bl	800022c <OS_CPU_SR_Restore>
        }
        return (err);
 800c358:	7dfb      	ldrb	r3, [r7, #23]
 800c35a:	e003      	b.n	800c364 <OSTaskCreateExt+0xb4>
    }
    OS_EXIT_CRITICAL();
 800c35c:	69f8      	ldr	r0, [r7, #28]
 800c35e:	f7f3 ff65 	bl	800022c <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
 800c362:	2328      	movs	r3, #40	; 0x28
}
 800c364:	4618      	mov	r0, r3
 800c366:	3720      	adds	r7, #32
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	20008a28 	.word	0x20008a28
 800c370:	20009388 	.word	0x20009388
 800c374:	2000866d 	.word	0x2000866d

0800c378 <OSTaskNameSet>:
*/
#if OS_TASK_NAME_EN > 0u
void  OSTaskNameSet (INT8U   prio,
                     INT8U  *pname,
                     INT8U  *perr)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b086      	sub	sp, #24
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	4603      	mov	r3, r0
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
 800c384:	73fb      	strb	r3, [r7, #15]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 800c386:	2300      	movs	r3, #0
 800c388:	617b      	str	r3, [r7, #20]
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
        return;
    }
#endif
    if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
 800c38a:	4b1c      	ldr	r3, [pc, #112]	; (800c3fc <OSTaskNameSet+0x84>)
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d003      	beq.n	800c39a <OSTaskNameSet+0x22>
        *perr = OS_ERR_NAME_SET_ISR;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2212      	movs	r2, #18
 800c396:	701a      	strb	r2, [r3, #0]
        return;
 800c398:	e02c      	b.n	800c3f4 <OSTaskNameSet+0x7c>
    }
    OS_ENTER_CRITICAL();
 800c39a:	f7f3 ff43 	bl	8000224 <OS_CPU_SR_Save>
 800c39e:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 800c3a0:	7bfb      	ldrb	r3, [r7, #15]
 800c3a2:	2bff      	cmp	r3, #255	; 0xff
 800c3a4:	d104      	bne.n	800c3b0 <OSTaskNameSet+0x38>
        prio = OSTCBCur->OSTCBPrio;
 800c3a6:	4b16      	ldr	r3, [pc, #88]	; (800c400 <OSTaskNameSet+0x88>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800c3ae:	73fb      	strb	r3, [r7, #15]
    }
    ptcb = OSTCBPrioTbl[prio];
 800c3b0:	7bfb      	ldrb	r3, [r7, #15]
 800c3b2:	4a14      	ldr	r2, [pc, #80]	; (800c404 <OSTaskNameSet+0x8c>)
 800c3b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3b8:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d106      	bne.n	800c3ce <OSTaskNameSet+0x56>
        OS_EXIT_CRITICAL();                          /* No                                             */
 800c3c0:	6978      	ldr	r0, [r7, #20]
 800c3c2:	f7f3 ff33 	bl	800022c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2243      	movs	r2, #67	; 0x43
 800c3ca:	701a      	strb	r2, [r3, #0]
        return;
 800c3cc:	e012      	b.n	800c3f4 <OSTaskNameSet+0x7c>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d106      	bne.n	800c3e2 <OSTaskNameSet+0x6a>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
 800c3d4:	6978      	ldr	r0, [r7, #20]
 800c3d6:	f7f3 ff29 	bl	800022c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2243      	movs	r2, #67	; 0x43
 800c3de:	701a      	strb	r2, [r3, #0]
        return;
 800c3e0:	e008      	b.n	800c3f4 <OSTaskNameSet+0x7c>
    }
    ptcb->OSTCBTaskName = pname;
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	68ba      	ldr	r2, [r7, #8]
 800c3e6:	645a      	str	r2, [r3, #68]	; 0x44
    OS_EXIT_CRITICAL();
 800c3e8:	6978      	ldr	r0, [r7, #20]
 800c3ea:	f7f3 ff1f 	bl	800022c <OS_CPU_SR_Restore>
    *perr               = OS_ERR_NONE;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	701a      	strb	r2, [r3, #0]
}
 800c3f4:	3718      	adds	r7, #24
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	20008a28 	.word	0x20008a28
 800c400:	20008a2c 	.word	0x20008a2c
 800c404:	20009388 	.word	0x20009388

0800c408 <OSTaskStkChk>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
INT8U  OSTaskStkChk (INT8U         prio,
                     OS_STK_DATA  *p_stk_data)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b088      	sub	sp, #32
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	4603      	mov	r3, r0
 800c410:	6039      	str	r1, [r7, #0]
 800c412:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 800c414:	2300      	movs	r3, #0
 800c416:	617b      	str	r3, [r7, #20]
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	2200      	movs	r2, #0
 800c41c:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = 0u;
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	2200      	movs	r2, #0
 800c422:	605a      	str	r2, [r3, #4]
    OS_ENTER_CRITICAL();
 800c424:	f7f3 fefe 	bl	8000224 <OS_CPU_SR_Save>
 800c428:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 800c42a:	79fb      	ldrb	r3, [r7, #7]
 800c42c:	2bff      	cmp	r3, #255	; 0xff
 800c42e:	d104      	bne.n	800c43a <OSTaskStkChk+0x32>
        prio = OSTCBCur->OSTCBPrio;
 800c430:	4b24      	ldr	r3, [pc, #144]	; (800c4c4 <OSTaskStkChk+0xbc>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800c438:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 800c43a:	79fb      	ldrb	r3, [r7, #7]
 800c43c:	4a22      	ldr	r2, [pc, #136]	; (800c4c8 <OSTaskStkChk+0xc0>)
 800c43e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c442:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d104      	bne.n	800c454 <OSTaskStkChk+0x4c>
        OS_EXIT_CRITICAL();
 800c44a:	6978      	ldr	r0, [r7, #20]
 800c44c:	f7f3 feee 	bl	800022c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 800c450:	2343      	movs	r3, #67	; 0x43
 800c452:	e032      	b.n	800c4ba <OSTaskStkChk+0xb2>
    }
    if (ptcb == OS_TCB_RESERVED) {
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	2b01      	cmp	r3, #1
 800c458:	d104      	bne.n	800c464 <OSTaskStkChk+0x5c>
        OS_EXIT_CRITICAL();
 800c45a:	6978      	ldr	r0, [r7, #20]
 800c45c:	f7f3 fee6 	bl	800022c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 800c460:	2343      	movs	r3, #67	; 0x43
 800c462:	e02a      	b.n	800c4ba <OSTaskStkChk+0xb2>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	8a1b      	ldrh	r3, [r3, #16]
 800c468:	f003 0301 	and.w	r3, r3, #1
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d104      	bne.n	800c47a <OSTaskStkChk+0x72>
        OS_EXIT_CRITICAL();
 800c470:	6978      	ldr	r0, [r7, #20]
 800c472:	f7f3 fedb 	bl	800022c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_OPT);
 800c476:	2345      	movs	r3, #69	; 0x45
 800c478:	e01f      	b.n	800c4ba <OSTaskStkChk+0xb2>
    }
    nfree = 0u;
 800c47a:	2300      	movs	r3, #0
 800c47c:	61bb      	str	r3, [r7, #24]
    size  = ptcb->OSTCBStkSize;
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	60fb      	str	r3, [r7, #12]
    pchk  = ptcb->OSTCBStkBottom;
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	689b      	ldr	r3, [r3, #8]
 800c488:	61fb      	str	r3, [r7, #28]
    OS_EXIT_CRITICAL();
 800c48a:	6978      	ldr	r0, [r7, #20]
 800c48c:	f7f3 fece 	bl	800022c <OS_CPU_SR_Restore>
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 800c490:	e002      	b.n	800c498 <OSTaskStkChk+0x90>
        nfree++;
 800c492:	69bb      	ldr	r3, [r7, #24]
 800c494:	3301      	adds	r3, #1
 800c496:	61bb      	str	r3, [r7, #24]
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	1d1a      	adds	r2, r3, #4
 800c49c:	61fa      	str	r2, [r7, #28]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d0f6      	beq.n	800c492 <OSTaskStkChk+0x8a>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	009a      	lsls	r2, r3, #2
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	1ad3      	subs	r3, r2, r3
 800c4b2:	009a      	lsls	r2, r3, #2
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	605a      	str	r2, [r3, #4]
    return (OS_ERR_NONE);
 800c4b8:	2300      	movs	r3, #0
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3720      	adds	r7, #32
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	20008a2c 	.word	0x20008a2c
 800c4c8:	20009388 	.word	0x20009388

0800c4cc <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskSuspend (INT8U prio)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b086      	sub	sp, #24
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	71fb      	strb	r3, [r7, #7]
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	613b      	str	r3, [r7, #16]
        if (prio != OS_PRIO_SELF) {
            return (OS_ERR_PRIO_INVALID);
        }
    }
#endif
    OS_ENTER_CRITICAL();
 800c4da:	f7f3 fea3 	bl	8000224 <OS_CPU_SR_Save>
 800c4de:	6138      	str	r0, [r7, #16]
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 800c4e0:	79fb      	ldrb	r3, [r7, #7]
 800c4e2:	2bff      	cmp	r3, #255	; 0xff
 800c4e4:	d107      	bne.n	800c4f6 <OSTaskSuspend+0x2a>
        prio = OSTCBCur->OSTCBPrio;
 800c4e6:	4b30      	ldr	r3, [pc, #192]	; (800c5a8 <OSTaskSuspend+0xdc>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800c4ee:	71fb      	strb	r3, [r7, #7]
        self = OS_TRUE;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	75fb      	strb	r3, [r7, #23]
 800c4f4:	e00b      	b.n	800c50e <OSTaskSuspend+0x42>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 800c4f6:	4b2c      	ldr	r3, [pc, #176]	; (800c5a8 <OSTaskSuspend+0xdc>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800c4fe:	79fa      	ldrb	r2, [r7, #7]
 800c500:	429a      	cmp	r2, r3
 800c502:	d102      	bne.n	800c50a <OSTaskSuspend+0x3e>
        self = OS_TRUE;
 800c504:	2301      	movs	r3, #1
 800c506:	75fb      	strb	r3, [r7, #23]
 800c508:	e001      	b.n	800c50e <OSTaskSuspend+0x42>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 800c50a:	2300      	movs	r3, #0
 800c50c:	75fb      	strb	r3, [r7, #23]
    }
    ptcb = OSTCBPrioTbl[prio];
 800c50e:	79fb      	ldrb	r3, [r7, #7]
 800c510:	4a26      	ldr	r2, [pc, #152]	; (800c5ac <OSTaskSuspend+0xe0>)
 800c512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c516:	60fb      	str	r3, [r7, #12]
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d104      	bne.n	800c528 <OSTaskSuspend+0x5c>
        OS_EXIT_CRITICAL();
 800c51e:	6938      	ldr	r0, [r7, #16]
 800c520:	f7f3 fe84 	bl	800022c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_SUSPEND_PRIO);
 800c524:	2348      	movs	r3, #72	; 0x48
 800c526:	e03a      	b.n	800c59e <OSTaskSuspend+0xd2>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	d104      	bne.n	800c538 <OSTaskSuspend+0x6c>
        OS_EXIT_CRITICAL();
 800c52e:	6938      	ldr	r0, [r7, #16]
 800c530:	f7f3 fe7c 	bl	800022c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 800c534:	2343      	movs	r3, #67	; 0x43
 800c536:	e032      	b.n	800c59e <OSTaskSuspend+0xd2>
    }
    y            = ptcb->OSTCBY;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c53e:	72fb      	strb	r3, [r7, #11]
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
 800c540:	7afb      	ldrb	r3, [r7, #11]
 800c542:	4a1b      	ldr	r2, [pc, #108]	; (800c5b0 <OSTaskSuspend+0xe4>)
 800c544:	5cd1      	ldrb	r1, [r2, r3]
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c54c:	43db      	mvns	r3, r3
 800c54e:	b2da      	uxtb	r2, r3
 800c550:	7afb      	ldrb	r3, [r7, #11]
 800c552:	400a      	ands	r2, r1
 800c554:	b2d1      	uxtb	r1, r2
 800c556:	4a16      	ldr	r2, [pc, #88]	; (800c5b0 <OSTaskSuspend+0xe4>)
 800c558:	54d1      	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {
 800c55a:	7afb      	ldrb	r3, [r7, #11]
 800c55c:	4a14      	ldr	r2, [pc, #80]	; (800c5b0 <OSTaskSuspend+0xe4>)
 800c55e:	5cd3      	ldrb	r3, [r2, r3]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d10a      	bne.n	800c57a <OSTaskSuspend+0xae>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c56a:	43db      	mvns	r3, r3
 800c56c:	b2da      	uxtb	r2, r3
 800c56e:	4b11      	ldr	r3, [pc, #68]	; (800c5b4 <OSTaskSuspend+0xe8>)
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	4013      	ands	r3, r2
 800c574:	b2da      	uxtb	r2, r3
 800c576:	4b0f      	ldr	r3, [pc, #60]	; (800c5b4 <OSTaskSuspend+0xe8>)
 800c578:	701a      	strb	r2, [r3, #0]
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c580:	f043 0308 	orr.w	r3, r3, #8
 800c584:	b2da      	uxtb	r2, r3
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    OS_EXIT_CRITICAL();
 800c58c:	6938      	ldr	r0, [r7, #16]
 800c58e:	f7f3 fe4d 	bl	800022c <OS_CPU_SR_Restore>
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 800c592:	7dfb      	ldrb	r3, [r7, #23]
 800c594:	2b01      	cmp	r3, #1
 800c596:	d101      	bne.n	800c59c <OSTaskSuspend+0xd0>
        OS_Sched();                                             /* Find new highest priority task      */
 800c598:	f7ff f974 	bl	800b884 <OS_Sched>
    }
    return (OS_ERR_NONE);
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3718      	adds	r7, #24
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	20008a2c 	.word	0x20008a2c
 800c5ac:	20009388 	.word	0x20009388
 800c5b0:	20008a1c 	.word	0x20008a1c
 800c5b4:	20008a18 	.word	0x20008a18

0800c5b8 <OS_TaskStkClr>:
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStkClr (OS_STK  *pbos,
                     INT32U   size,
                     INT16U   opt)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	60f8      	str	r0, [r7, #12]
 800c5c0:	60b9      	str	r1, [r7, #8]
 800c5c2:	4613      	mov	r3, r2
 800c5c4:	80fb      	strh	r3, [r7, #6]
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
 800c5c6:	88fb      	ldrh	r3, [r7, #6]
 800c5c8:	f003 0301 	and.w	r3, r3, #1
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d010      	beq.n	800c5f2 <OS_TaskStkClr+0x3a>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
 800c5d0:	88fb      	ldrh	r3, [r7, #6]
 800c5d2:	f003 0302 	and.w	r3, r3, #2
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d00b      	beq.n	800c5f2 <OS_TaskStkClr+0x3a>
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 800c5da:	e007      	b.n	800c5ec <OS_TaskStkClr+0x34>
                size--;
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	60bb      	str	r3, [r7, #8]
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	1d1a      	adds	r2, r3, #4
 800c5e6:	60fa      	str	r2, [r7, #12]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	601a      	str	r2, [r3, #0]
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1f4      	bne.n	800c5dc <OS_TaskStkClr+0x24>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 800c5f2:	bf00      	nop
 800c5f4:	3714      	adds	r7, #20
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bc80      	pop	{r7}
 800c5fa:	4770      	bx	lr

0800c5fc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800c604:	2300      	movs	r3, #0
 800c606:	60fb      	str	r3, [r7, #12]
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 800c608:	4b20      	ldr	r3, [pc, #128]	; (800c68c <OSTimeDly+0x90>)
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d137      	bne.n	800c680 <OSTimeDly+0x84>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 800c610:	4b1f      	ldr	r3, [pc, #124]	; (800c690 <OSTimeDly+0x94>)
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d135      	bne.n	800c684 <OSTimeDly+0x88>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d033      	beq.n	800c686 <OSTimeDly+0x8a>
        OS_ENTER_CRITICAL();
 800c61e:	f7f3 fe01 	bl	8000224 <OS_CPU_SR_Save>
 800c622:	60f8      	str	r0, [r7, #12]
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 800c624:	4b1b      	ldr	r3, [pc, #108]	; (800c694 <OSTimeDly+0x98>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c62c:	72fb      	strb	r3, [r7, #11]
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 800c62e:	7afb      	ldrb	r3, [r7, #11]
 800c630:	4a19      	ldr	r2, [pc, #100]	; (800c698 <OSTimeDly+0x9c>)
 800c632:	5cd1      	ldrb	r1, [r2, r3]
 800c634:	4b17      	ldr	r3, [pc, #92]	; (800c694 <OSTimeDly+0x98>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c63c:	43db      	mvns	r3, r3
 800c63e:	b2da      	uxtb	r2, r3
 800c640:	7afb      	ldrb	r3, [r7, #11]
 800c642:	400a      	ands	r2, r1
 800c644:	b2d1      	uxtb	r1, r2
 800c646:	4a14      	ldr	r2, [pc, #80]	; (800c698 <OSTimeDly+0x9c>)
 800c648:	54d1      	strb	r1, [r2, r3]
        if (OSRdyTbl[y] == 0u) {
 800c64a:	7afb      	ldrb	r3, [r7, #11]
 800c64c:	4a12      	ldr	r2, [pc, #72]	; (800c698 <OSTimeDly+0x9c>)
 800c64e:	5cd3      	ldrb	r3, [r2, r3]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d10b      	bne.n	800c66c <OSTimeDly+0x70>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 800c654:	4b0f      	ldr	r3, [pc, #60]	; (800c694 <OSTimeDly+0x98>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c65c:	43db      	mvns	r3, r3
 800c65e:	b2da      	uxtb	r2, r3
 800c660:	4b0e      	ldr	r3, [pc, #56]	; (800c69c <OSTimeDly+0xa0>)
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	4013      	ands	r3, r2
 800c666:	b2da      	uxtb	r2, r3
 800c668:	4b0c      	ldr	r3, [pc, #48]	; (800c69c <OSTimeDly+0xa0>)
 800c66a:	701a      	strb	r2, [r3, #0]
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 800c66c:	4b09      	ldr	r3, [pc, #36]	; (800c694 <OSTimeDly+0x98>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	625a      	str	r2, [r3, #36]	; 0x24
        OS_EXIT_CRITICAL();
 800c674:	68f8      	ldr	r0, [r7, #12]
 800c676:	f7f3 fdd9 	bl	800022c <OS_CPU_SR_Restore>
        OS_Sched();                              /* Find next task to run!                             */
 800c67a:	f7ff f903 	bl	800b884 <OS_Sched>
 800c67e:	e002      	b.n	800c686 <OSTimeDly+0x8a>
        return;
 800c680:	bf00      	nop
 800c682:	e000      	b.n	800c686 <OSTimeDly+0x8a>
        return;
 800c684:	bf00      	nop
    }
}
 800c686:	3710      	adds	r7, #16
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	20008a28 	.word	0x20008a28
 800c690:	2000866c 	.word	0x2000866c
 800c694:	20008a2c 	.word	0x20008a2c
 800c698:	20008a1c 	.word	0x20008a1c
 800c69c:	20008a18 	.word	0x20008a18

0800c6a0 <OSTimeDlyHMSM>:
#if OS_TIME_DLY_HMSM_EN > 0u
INT8U  OSTimeDlyHMSM (INT8U   hours,
                      INT8U   minutes,
                      INT8U   seconds,
                      INT16U  ms)
{
 800c6a0:	b590      	push	{r4, r7, lr}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	4604      	mov	r4, r0
 800c6a8:	4608      	mov	r0, r1
 800c6aa:	4611      	mov	r1, r2
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	4623      	mov	r3, r4
 800c6b0:	71fb      	strb	r3, [r7, #7]
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	71bb      	strb	r3, [r7, #6]
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	717b      	strb	r3, [r7, #5]
 800c6ba:	4613      	mov	r3, r2
 800c6bc:	807b      	strh	r3, [r7, #2]
    INT32U ticks;


    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 800c6be:	4b18      	ldr	r3, [pc, #96]	; (800c720 <OSTimeDlyHMSM+0x80>)
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d001      	beq.n	800c6ca <OSTimeDlyHMSM+0x2a>
        return (OS_ERR_TIME_DLY_ISR);
 800c6c6:	2355      	movs	r3, #85	; 0x55
 800c6c8:	e025      	b.n	800c716 <OSTimeDlyHMSM+0x76>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 800c6ca:	4b16      	ldr	r3, [pc, #88]	; (800c724 <OSTimeDlyHMSM+0x84>)
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d001      	beq.n	800c6d6 <OSTimeDlyHMSM+0x36>
        return (OS_ERR_SCHED_LOCKED);
 800c6d2:	2332      	movs	r3, #50	; 0x32
 800c6d4:	e01f      	b.n	800c716 <OSTimeDlyHMSM+0x76>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 800c6d6:	79fb      	ldrb	r3, [r7, #7]
 800c6d8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800c6dc:	fb02 f103 	mul.w	r1, r2, r3
 800c6e0:	79ba      	ldrb	r2, [r7, #6]
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	011b      	lsls	r3, r3, #4
 800c6e6:	1a9b      	subs	r3, r3, r2
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	18ca      	adds	r2, r1, r3
 800c6ec:	797b      	ldrb	r3, [r7, #5]
 800c6ee:	4413      	add	r3, r2
 800c6f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c6f4:	fb02 f203 	mul.w	r2, r2, r3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
 800c6f8:	887b      	ldrh	r3, [r7, #2]
 800c6fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c6fe:	fb01 f303 	mul.w	r3, r1, r3
 800c702:	4909      	ldr	r1, [pc, #36]	; (800c728 <OSTimeDlyHMSM+0x88>)
 800c704:	fba1 1303 	umull	r1, r3, r1, r3
 800c708:	099b      	lsrs	r3, r3, #6
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 800c70a:	4413      	add	r3, r2
 800c70c:	60fb      	str	r3, [r7, #12]
    OSTimeDly(ticks);
 800c70e:	68f8      	ldr	r0, [r7, #12]
 800c710:	f7ff ff74 	bl	800c5fc <OSTimeDly>
    return (OS_ERR_NONE);
 800c714:	2300      	movs	r3, #0
}
 800c716:	4618      	mov	r0, r3
 800c718:	3714      	adds	r7, #20
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd90      	pop	{r4, r7, pc}
 800c71e:	bf00      	nop
 800c720:	20008a28 	.word	0x20008a28
 800c724:	2000866c 	.word	0x2000866c
 800c728:	10624dd3 	.word	0x10624dd3

0800c72c <Reset_Handler>:
 800c72c:	2100      	movs	r1, #0
 800c72e:	e003      	b.n	800c738 <LoopCopyDataInit>

0800c730 <CopyDataInit>:
 800c730:	4b0b      	ldr	r3, [pc, #44]	; (800c760 <LoopFillZerobss+0x14>)
 800c732:	585b      	ldr	r3, [r3, r1]
 800c734:	5043      	str	r3, [r0, r1]
 800c736:	3104      	adds	r1, #4

0800c738 <LoopCopyDataInit>:
 800c738:	480a      	ldr	r0, [pc, #40]	; (800c764 <LoopFillZerobss+0x18>)
 800c73a:	4b0b      	ldr	r3, [pc, #44]	; (800c768 <LoopFillZerobss+0x1c>)
 800c73c:	1842      	adds	r2, r0, r1
 800c73e:	429a      	cmp	r2, r3
 800c740:	d3f6      	bcc.n	800c730 <CopyDataInit>
 800c742:	4a0a      	ldr	r2, [pc, #40]	; (800c76c <LoopFillZerobss+0x20>)
 800c744:	e002      	b.n	800c74c <LoopFillZerobss>

0800c746 <FillZerobss>:
 800c746:	2300      	movs	r3, #0
 800c748:	f842 3b04 	str.w	r3, [r2], #4

0800c74c <LoopFillZerobss>:
 800c74c:	4b08      	ldr	r3, [pc, #32]	; (800c770 <LoopFillZerobss+0x24>)
 800c74e:	429a      	cmp	r2, r3
 800c750:	d3f9      	bcc.n	800c746 <FillZerobss>
 800c752:	f7f4 fe8f 	bl	8001474 <SystemInit>
 800c756:	f000 f80f 	bl	800c778 <__libc_init_array>
 800c75a:	f7f4 fda3 	bl	80012a4 <main>
 800c75e:	4770      	bx	lr
 800c760:	0800eb9c 	.word	0x0800eb9c
 800c764:	20000000 	.word	0x20000000
 800c768:	20005bd0 	.word	0x20005bd0
 800c76c:	20005bd0 	.word	0x20005bd0
 800c770:	20009490 	.word	0x20009490

0800c774 <ADC1_2_IRQHandler>:
 800c774:	e7fe      	b.n	800c774 <ADC1_2_IRQHandler>
	...

0800c778 <__libc_init_array>:
 800c778:	b570      	push	{r4, r5, r6, lr}
 800c77a:	2500      	movs	r5, #0
 800c77c:	4e0c      	ldr	r6, [pc, #48]	; (800c7b0 <__libc_init_array+0x38>)
 800c77e:	4c0d      	ldr	r4, [pc, #52]	; (800c7b4 <__libc_init_array+0x3c>)
 800c780:	1ba4      	subs	r4, r4, r6
 800c782:	10a4      	asrs	r4, r4, #2
 800c784:	42a5      	cmp	r5, r4
 800c786:	d109      	bne.n	800c79c <__libc_init_array+0x24>
 800c788:	f000 ffc4 	bl	800d714 <_init>
 800c78c:	2500      	movs	r5, #0
 800c78e:	4e0a      	ldr	r6, [pc, #40]	; (800c7b8 <__libc_init_array+0x40>)
 800c790:	4c0a      	ldr	r4, [pc, #40]	; (800c7bc <__libc_init_array+0x44>)
 800c792:	1ba4      	subs	r4, r4, r6
 800c794:	10a4      	asrs	r4, r4, #2
 800c796:	42a5      	cmp	r5, r4
 800c798:	d105      	bne.n	800c7a6 <__libc_init_array+0x2e>
 800c79a:	bd70      	pop	{r4, r5, r6, pc}
 800c79c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c7a0:	4798      	blx	r3
 800c7a2:	3501      	adds	r5, #1
 800c7a4:	e7ee      	b.n	800c784 <__libc_init_array+0xc>
 800c7a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c7aa:	4798      	blx	r3
 800c7ac:	3501      	adds	r5, #1
 800c7ae:	e7f2      	b.n	800c796 <__libc_init_array+0x1e>
 800c7b0:	0800eb94 	.word	0x0800eb94
 800c7b4:	0800eb94 	.word	0x0800eb94
 800c7b8:	0800eb94 	.word	0x0800eb94
 800c7bc:	0800eb98 	.word	0x0800eb98

0800c7c0 <memcmp>:
 800c7c0:	b530      	push	{r4, r5, lr}
 800c7c2:	2400      	movs	r4, #0
 800c7c4:	42a2      	cmp	r2, r4
 800c7c6:	d101      	bne.n	800c7cc <memcmp+0xc>
 800c7c8:	2000      	movs	r0, #0
 800c7ca:	e007      	b.n	800c7dc <memcmp+0x1c>
 800c7cc:	5d03      	ldrb	r3, [r0, r4]
 800c7ce:	3401      	adds	r4, #1
 800c7d0:	190d      	adds	r5, r1, r4
 800c7d2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800c7d6:	42ab      	cmp	r3, r5
 800c7d8:	d0f4      	beq.n	800c7c4 <memcmp+0x4>
 800c7da:	1b58      	subs	r0, r3, r5
 800c7dc:	bd30      	pop	{r4, r5, pc}

0800c7de <memcpy>:
 800c7de:	b510      	push	{r4, lr}
 800c7e0:	1e43      	subs	r3, r0, #1
 800c7e2:	440a      	add	r2, r1
 800c7e4:	4291      	cmp	r1, r2
 800c7e6:	d100      	bne.n	800c7ea <memcpy+0xc>
 800c7e8:	bd10      	pop	{r4, pc}
 800c7ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7f2:	e7f7      	b.n	800c7e4 <memcpy+0x6>

0800c7f4 <memset>:
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	4402      	add	r2, r0
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d100      	bne.n	800c7fe <memset+0xa>
 800c7fc:	4770      	bx	lr
 800c7fe:	f803 1b01 	strb.w	r1, [r3], #1
 800c802:	e7f9      	b.n	800c7f8 <memset+0x4>

0800c804 <iprintf>:
 800c804:	b40f      	push	{r0, r1, r2, r3}
 800c806:	4b0a      	ldr	r3, [pc, #40]	; (800c830 <iprintf+0x2c>)
 800c808:	b513      	push	{r0, r1, r4, lr}
 800c80a:	681c      	ldr	r4, [r3, #0]
 800c80c:	b124      	cbz	r4, 800c818 <iprintf+0x14>
 800c80e:	69a3      	ldr	r3, [r4, #24]
 800c810:	b913      	cbnz	r3, 800c818 <iprintf+0x14>
 800c812:	4620      	mov	r0, r4
 800c814:	f000 fa22 	bl	800cc5c <__sinit>
 800c818:	ab05      	add	r3, sp, #20
 800c81a:	9a04      	ldr	r2, [sp, #16]
 800c81c:	68a1      	ldr	r1, [r4, #8]
 800c81e:	4620      	mov	r0, r4
 800c820:	9301      	str	r3, [sp, #4]
 800c822:	f000 fbd7 	bl	800cfd4 <_vfiprintf_r>
 800c826:	b002      	add	sp, #8
 800c828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c82c:	b004      	add	sp, #16
 800c82e:	4770      	bx	lr
 800c830:	20005b6c 	.word	0x20005b6c

0800c834 <_puts_r>:
 800c834:	b570      	push	{r4, r5, r6, lr}
 800c836:	460e      	mov	r6, r1
 800c838:	4605      	mov	r5, r0
 800c83a:	b118      	cbz	r0, 800c844 <_puts_r+0x10>
 800c83c:	6983      	ldr	r3, [r0, #24]
 800c83e:	b90b      	cbnz	r3, 800c844 <_puts_r+0x10>
 800c840:	f000 fa0c 	bl	800cc5c <__sinit>
 800c844:	69ab      	ldr	r3, [r5, #24]
 800c846:	68ac      	ldr	r4, [r5, #8]
 800c848:	b913      	cbnz	r3, 800c850 <_puts_r+0x1c>
 800c84a:	4628      	mov	r0, r5
 800c84c:	f000 fa06 	bl	800cc5c <__sinit>
 800c850:	4b23      	ldr	r3, [pc, #140]	; (800c8e0 <_puts_r+0xac>)
 800c852:	429c      	cmp	r4, r3
 800c854:	d117      	bne.n	800c886 <_puts_r+0x52>
 800c856:	686c      	ldr	r4, [r5, #4]
 800c858:	89a3      	ldrh	r3, [r4, #12]
 800c85a:	071b      	lsls	r3, r3, #28
 800c85c:	d51d      	bpl.n	800c89a <_puts_r+0x66>
 800c85e:	6923      	ldr	r3, [r4, #16]
 800c860:	b1db      	cbz	r3, 800c89a <_puts_r+0x66>
 800c862:	3e01      	subs	r6, #1
 800c864:	68a3      	ldr	r3, [r4, #8]
 800c866:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c86a:	3b01      	subs	r3, #1
 800c86c:	60a3      	str	r3, [r4, #8]
 800c86e:	b9e9      	cbnz	r1, 800c8ac <_puts_r+0x78>
 800c870:	2b00      	cmp	r3, #0
 800c872:	da2e      	bge.n	800c8d2 <_puts_r+0x9e>
 800c874:	4622      	mov	r2, r4
 800c876:	210a      	movs	r1, #10
 800c878:	4628      	mov	r0, r5
 800c87a:	f000 f83f 	bl	800c8fc <__swbuf_r>
 800c87e:	3001      	adds	r0, #1
 800c880:	d011      	beq.n	800c8a6 <_puts_r+0x72>
 800c882:	200a      	movs	r0, #10
 800c884:	e011      	b.n	800c8aa <_puts_r+0x76>
 800c886:	4b17      	ldr	r3, [pc, #92]	; (800c8e4 <_puts_r+0xb0>)
 800c888:	429c      	cmp	r4, r3
 800c88a:	d101      	bne.n	800c890 <_puts_r+0x5c>
 800c88c:	68ac      	ldr	r4, [r5, #8]
 800c88e:	e7e3      	b.n	800c858 <_puts_r+0x24>
 800c890:	4b15      	ldr	r3, [pc, #84]	; (800c8e8 <_puts_r+0xb4>)
 800c892:	429c      	cmp	r4, r3
 800c894:	bf08      	it	eq
 800c896:	68ec      	ldreq	r4, [r5, #12]
 800c898:	e7de      	b.n	800c858 <_puts_r+0x24>
 800c89a:	4621      	mov	r1, r4
 800c89c:	4628      	mov	r0, r5
 800c89e:	f000 f87f 	bl	800c9a0 <__swsetup_r>
 800c8a2:	2800      	cmp	r0, #0
 800c8a4:	d0dd      	beq.n	800c862 <_puts_r+0x2e>
 800c8a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8aa:	bd70      	pop	{r4, r5, r6, pc}
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	da04      	bge.n	800c8ba <_puts_r+0x86>
 800c8b0:	69a2      	ldr	r2, [r4, #24]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	dc06      	bgt.n	800c8c4 <_puts_r+0x90>
 800c8b6:	290a      	cmp	r1, #10
 800c8b8:	d004      	beq.n	800c8c4 <_puts_r+0x90>
 800c8ba:	6823      	ldr	r3, [r4, #0]
 800c8bc:	1c5a      	adds	r2, r3, #1
 800c8be:	6022      	str	r2, [r4, #0]
 800c8c0:	7019      	strb	r1, [r3, #0]
 800c8c2:	e7cf      	b.n	800c864 <_puts_r+0x30>
 800c8c4:	4622      	mov	r2, r4
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	f000 f818 	bl	800c8fc <__swbuf_r>
 800c8cc:	3001      	adds	r0, #1
 800c8ce:	d1c9      	bne.n	800c864 <_puts_r+0x30>
 800c8d0:	e7e9      	b.n	800c8a6 <_puts_r+0x72>
 800c8d2:	200a      	movs	r0, #10
 800c8d4:	6823      	ldr	r3, [r4, #0]
 800c8d6:	1c5a      	adds	r2, r3, #1
 800c8d8:	6022      	str	r2, [r4, #0]
 800c8da:	7018      	strb	r0, [r3, #0]
 800c8dc:	e7e5      	b.n	800c8aa <_puts_r+0x76>
 800c8de:	bf00      	nop
 800c8e0:	0800eb20 	.word	0x0800eb20
 800c8e4:	0800eb40 	.word	0x0800eb40
 800c8e8:	0800eb00 	.word	0x0800eb00

0800c8ec <puts>:
 800c8ec:	4b02      	ldr	r3, [pc, #8]	; (800c8f8 <puts+0xc>)
 800c8ee:	4601      	mov	r1, r0
 800c8f0:	6818      	ldr	r0, [r3, #0]
 800c8f2:	f7ff bf9f 	b.w	800c834 <_puts_r>
 800c8f6:	bf00      	nop
 800c8f8:	20005b6c 	.word	0x20005b6c

0800c8fc <__swbuf_r>:
 800c8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8fe:	460e      	mov	r6, r1
 800c900:	4614      	mov	r4, r2
 800c902:	4605      	mov	r5, r0
 800c904:	b118      	cbz	r0, 800c90e <__swbuf_r+0x12>
 800c906:	6983      	ldr	r3, [r0, #24]
 800c908:	b90b      	cbnz	r3, 800c90e <__swbuf_r+0x12>
 800c90a:	f000 f9a7 	bl	800cc5c <__sinit>
 800c90e:	4b21      	ldr	r3, [pc, #132]	; (800c994 <__swbuf_r+0x98>)
 800c910:	429c      	cmp	r4, r3
 800c912:	d12a      	bne.n	800c96a <__swbuf_r+0x6e>
 800c914:	686c      	ldr	r4, [r5, #4]
 800c916:	69a3      	ldr	r3, [r4, #24]
 800c918:	60a3      	str	r3, [r4, #8]
 800c91a:	89a3      	ldrh	r3, [r4, #12]
 800c91c:	071a      	lsls	r2, r3, #28
 800c91e:	d52e      	bpl.n	800c97e <__swbuf_r+0x82>
 800c920:	6923      	ldr	r3, [r4, #16]
 800c922:	b363      	cbz	r3, 800c97e <__swbuf_r+0x82>
 800c924:	6923      	ldr	r3, [r4, #16]
 800c926:	6820      	ldr	r0, [r4, #0]
 800c928:	b2f6      	uxtb	r6, r6
 800c92a:	1ac0      	subs	r0, r0, r3
 800c92c:	6963      	ldr	r3, [r4, #20]
 800c92e:	4637      	mov	r7, r6
 800c930:	4283      	cmp	r3, r0
 800c932:	dc04      	bgt.n	800c93e <__swbuf_r+0x42>
 800c934:	4621      	mov	r1, r4
 800c936:	4628      	mov	r0, r5
 800c938:	f000 f926 	bl	800cb88 <_fflush_r>
 800c93c:	bb28      	cbnz	r0, 800c98a <__swbuf_r+0x8e>
 800c93e:	68a3      	ldr	r3, [r4, #8]
 800c940:	3001      	adds	r0, #1
 800c942:	3b01      	subs	r3, #1
 800c944:	60a3      	str	r3, [r4, #8]
 800c946:	6823      	ldr	r3, [r4, #0]
 800c948:	1c5a      	adds	r2, r3, #1
 800c94a:	6022      	str	r2, [r4, #0]
 800c94c:	701e      	strb	r6, [r3, #0]
 800c94e:	6963      	ldr	r3, [r4, #20]
 800c950:	4283      	cmp	r3, r0
 800c952:	d004      	beq.n	800c95e <__swbuf_r+0x62>
 800c954:	89a3      	ldrh	r3, [r4, #12]
 800c956:	07db      	lsls	r3, r3, #31
 800c958:	d519      	bpl.n	800c98e <__swbuf_r+0x92>
 800c95a:	2e0a      	cmp	r6, #10
 800c95c:	d117      	bne.n	800c98e <__swbuf_r+0x92>
 800c95e:	4621      	mov	r1, r4
 800c960:	4628      	mov	r0, r5
 800c962:	f000 f911 	bl	800cb88 <_fflush_r>
 800c966:	b190      	cbz	r0, 800c98e <__swbuf_r+0x92>
 800c968:	e00f      	b.n	800c98a <__swbuf_r+0x8e>
 800c96a:	4b0b      	ldr	r3, [pc, #44]	; (800c998 <__swbuf_r+0x9c>)
 800c96c:	429c      	cmp	r4, r3
 800c96e:	d101      	bne.n	800c974 <__swbuf_r+0x78>
 800c970:	68ac      	ldr	r4, [r5, #8]
 800c972:	e7d0      	b.n	800c916 <__swbuf_r+0x1a>
 800c974:	4b09      	ldr	r3, [pc, #36]	; (800c99c <__swbuf_r+0xa0>)
 800c976:	429c      	cmp	r4, r3
 800c978:	bf08      	it	eq
 800c97a:	68ec      	ldreq	r4, [r5, #12]
 800c97c:	e7cb      	b.n	800c916 <__swbuf_r+0x1a>
 800c97e:	4621      	mov	r1, r4
 800c980:	4628      	mov	r0, r5
 800c982:	f000 f80d 	bl	800c9a0 <__swsetup_r>
 800c986:	2800      	cmp	r0, #0
 800c988:	d0cc      	beq.n	800c924 <__swbuf_r+0x28>
 800c98a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c98e:	4638      	mov	r0, r7
 800c990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c992:	bf00      	nop
 800c994:	0800eb20 	.word	0x0800eb20
 800c998:	0800eb40 	.word	0x0800eb40
 800c99c:	0800eb00 	.word	0x0800eb00

0800c9a0 <__swsetup_r>:
 800c9a0:	4b32      	ldr	r3, [pc, #200]	; (800ca6c <__swsetup_r+0xcc>)
 800c9a2:	b570      	push	{r4, r5, r6, lr}
 800c9a4:	681d      	ldr	r5, [r3, #0]
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	460c      	mov	r4, r1
 800c9aa:	b125      	cbz	r5, 800c9b6 <__swsetup_r+0x16>
 800c9ac:	69ab      	ldr	r3, [r5, #24]
 800c9ae:	b913      	cbnz	r3, 800c9b6 <__swsetup_r+0x16>
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	f000 f953 	bl	800cc5c <__sinit>
 800c9b6:	4b2e      	ldr	r3, [pc, #184]	; (800ca70 <__swsetup_r+0xd0>)
 800c9b8:	429c      	cmp	r4, r3
 800c9ba:	d10f      	bne.n	800c9dc <__swsetup_r+0x3c>
 800c9bc:	686c      	ldr	r4, [r5, #4]
 800c9be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9c2:	b29a      	uxth	r2, r3
 800c9c4:	0715      	lsls	r5, r2, #28
 800c9c6:	d42c      	bmi.n	800ca22 <__swsetup_r+0x82>
 800c9c8:	06d0      	lsls	r0, r2, #27
 800c9ca:	d411      	bmi.n	800c9f0 <__swsetup_r+0x50>
 800c9cc:	2209      	movs	r2, #9
 800c9ce:	6032      	str	r2, [r6, #0]
 800c9d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9d4:	81a3      	strh	r3, [r4, #12]
 800c9d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c9da:	e03e      	b.n	800ca5a <__swsetup_r+0xba>
 800c9dc:	4b25      	ldr	r3, [pc, #148]	; (800ca74 <__swsetup_r+0xd4>)
 800c9de:	429c      	cmp	r4, r3
 800c9e0:	d101      	bne.n	800c9e6 <__swsetup_r+0x46>
 800c9e2:	68ac      	ldr	r4, [r5, #8]
 800c9e4:	e7eb      	b.n	800c9be <__swsetup_r+0x1e>
 800c9e6:	4b24      	ldr	r3, [pc, #144]	; (800ca78 <__swsetup_r+0xd8>)
 800c9e8:	429c      	cmp	r4, r3
 800c9ea:	bf08      	it	eq
 800c9ec:	68ec      	ldreq	r4, [r5, #12]
 800c9ee:	e7e6      	b.n	800c9be <__swsetup_r+0x1e>
 800c9f0:	0751      	lsls	r1, r2, #29
 800c9f2:	d512      	bpl.n	800ca1a <__swsetup_r+0x7a>
 800c9f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9f6:	b141      	cbz	r1, 800ca0a <__swsetup_r+0x6a>
 800c9f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9fc:	4299      	cmp	r1, r3
 800c9fe:	d002      	beq.n	800ca06 <__swsetup_r+0x66>
 800ca00:	4630      	mov	r0, r6
 800ca02:	f000 fa19 	bl	800ce38 <_free_r>
 800ca06:	2300      	movs	r3, #0
 800ca08:	6363      	str	r3, [r4, #52]	; 0x34
 800ca0a:	89a3      	ldrh	r3, [r4, #12]
 800ca0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca10:	81a3      	strh	r3, [r4, #12]
 800ca12:	2300      	movs	r3, #0
 800ca14:	6063      	str	r3, [r4, #4]
 800ca16:	6923      	ldr	r3, [r4, #16]
 800ca18:	6023      	str	r3, [r4, #0]
 800ca1a:	89a3      	ldrh	r3, [r4, #12]
 800ca1c:	f043 0308 	orr.w	r3, r3, #8
 800ca20:	81a3      	strh	r3, [r4, #12]
 800ca22:	6923      	ldr	r3, [r4, #16]
 800ca24:	b94b      	cbnz	r3, 800ca3a <__swsetup_r+0x9a>
 800ca26:	89a3      	ldrh	r3, [r4, #12]
 800ca28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca30:	d003      	beq.n	800ca3a <__swsetup_r+0x9a>
 800ca32:	4621      	mov	r1, r4
 800ca34:	4630      	mov	r0, r6
 800ca36:	f000 f9bf 	bl	800cdb8 <__smakebuf_r>
 800ca3a:	89a2      	ldrh	r2, [r4, #12]
 800ca3c:	f012 0301 	ands.w	r3, r2, #1
 800ca40:	d00c      	beq.n	800ca5c <__swsetup_r+0xbc>
 800ca42:	2300      	movs	r3, #0
 800ca44:	60a3      	str	r3, [r4, #8]
 800ca46:	6963      	ldr	r3, [r4, #20]
 800ca48:	425b      	negs	r3, r3
 800ca4a:	61a3      	str	r3, [r4, #24]
 800ca4c:	6923      	ldr	r3, [r4, #16]
 800ca4e:	b953      	cbnz	r3, 800ca66 <__swsetup_r+0xc6>
 800ca50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca54:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ca58:	d1ba      	bne.n	800c9d0 <__swsetup_r+0x30>
 800ca5a:	bd70      	pop	{r4, r5, r6, pc}
 800ca5c:	0792      	lsls	r2, r2, #30
 800ca5e:	bf58      	it	pl
 800ca60:	6963      	ldrpl	r3, [r4, #20]
 800ca62:	60a3      	str	r3, [r4, #8]
 800ca64:	e7f2      	b.n	800ca4c <__swsetup_r+0xac>
 800ca66:	2000      	movs	r0, #0
 800ca68:	e7f7      	b.n	800ca5a <__swsetup_r+0xba>
 800ca6a:	bf00      	nop
 800ca6c:	20005b6c 	.word	0x20005b6c
 800ca70:	0800eb20 	.word	0x0800eb20
 800ca74:	0800eb40 	.word	0x0800eb40
 800ca78:	0800eb00 	.word	0x0800eb00

0800ca7c <__sflush_r>:
 800ca7c:	898a      	ldrh	r2, [r1, #12]
 800ca7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca82:	4605      	mov	r5, r0
 800ca84:	0710      	lsls	r0, r2, #28
 800ca86:	460c      	mov	r4, r1
 800ca88:	d458      	bmi.n	800cb3c <__sflush_r+0xc0>
 800ca8a:	684b      	ldr	r3, [r1, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	dc05      	bgt.n	800ca9c <__sflush_r+0x20>
 800ca90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	dc02      	bgt.n	800ca9c <__sflush_r+0x20>
 800ca96:	2000      	movs	r0, #0
 800ca98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca9e:	2e00      	cmp	r6, #0
 800caa0:	d0f9      	beq.n	800ca96 <__sflush_r+0x1a>
 800caa2:	2300      	movs	r3, #0
 800caa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800caa8:	682f      	ldr	r7, [r5, #0]
 800caaa:	6a21      	ldr	r1, [r4, #32]
 800caac:	602b      	str	r3, [r5, #0]
 800caae:	d032      	beq.n	800cb16 <__sflush_r+0x9a>
 800cab0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cab2:	89a3      	ldrh	r3, [r4, #12]
 800cab4:	075a      	lsls	r2, r3, #29
 800cab6:	d505      	bpl.n	800cac4 <__sflush_r+0x48>
 800cab8:	6863      	ldr	r3, [r4, #4]
 800caba:	1ac0      	subs	r0, r0, r3
 800cabc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cabe:	b10b      	cbz	r3, 800cac4 <__sflush_r+0x48>
 800cac0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cac2:	1ac0      	subs	r0, r0, r3
 800cac4:	2300      	movs	r3, #0
 800cac6:	4602      	mov	r2, r0
 800cac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800caca:	6a21      	ldr	r1, [r4, #32]
 800cacc:	4628      	mov	r0, r5
 800cace:	47b0      	blx	r6
 800cad0:	1c43      	adds	r3, r0, #1
 800cad2:	89a3      	ldrh	r3, [r4, #12]
 800cad4:	d106      	bne.n	800cae4 <__sflush_r+0x68>
 800cad6:	6829      	ldr	r1, [r5, #0]
 800cad8:	291d      	cmp	r1, #29
 800cada:	d848      	bhi.n	800cb6e <__sflush_r+0xf2>
 800cadc:	4a29      	ldr	r2, [pc, #164]	; (800cb84 <__sflush_r+0x108>)
 800cade:	40ca      	lsrs	r2, r1
 800cae0:	07d6      	lsls	r6, r2, #31
 800cae2:	d544      	bpl.n	800cb6e <__sflush_r+0xf2>
 800cae4:	2200      	movs	r2, #0
 800cae6:	6062      	str	r2, [r4, #4]
 800cae8:	6922      	ldr	r2, [r4, #16]
 800caea:	04d9      	lsls	r1, r3, #19
 800caec:	6022      	str	r2, [r4, #0]
 800caee:	d504      	bpl.n	800cafa <__sflush_r+0x7e>
 800caf0:	1c42      	adds	r2, r0, #1
 800caf2:	d101      	bne.n	800caf8 <__sflush_r+0x7c>
 800caf4:	682b      	ldr	r3, [r5, #0]
 800caf6:	b903      	cbnz	r3, 800cafa <__sflush_r+0x7e>
 800caf8:	6560      	str	r0, [r4, #84]	; 0x54
 800cafa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cafc:	602f      	str	r7, [r5, #0]
 800cafe:	2900      	cmp	r1, #0
 800cb00:	d0c9      	beq.n	800ca96 <__sflush_r+0x1a>
 800cb02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb06:	4299      	cmp	r1, r3
 800cb08:	d002      	beq.n	800cb10 <__sflush_r+0x94>
 800cb0a:	4628      	mov	r0, r5
 800cb0c:	f000 f994 	bl	800ce38 <_free_r>
 800cb10:	2000      	movs	r0, #0
 800cb12:	6360      	str	r0, [r4, #52]	; 0x34
 800cb14:	e7c0      	b.n	800ca98 <__sflush_r+0x1c>
 800cb16:	2301      	movs	r3, #1
 800cb18:	4628      	mov	r0, r5
 800cb1a:	47b0      	blx	r6
 800cb1c:	1c41      	adds	r1, r0, #1
 800cb1e:	d1c8      	bne.n	800cab2 <__sflush_r+0x36>
 800cb20:	682b      	ldr	r3, [r5, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d0c5      	beq.n	800cab2 <__sflush_r+0x36>
 800cb26:	2b1d      	cmp	r3, #29
 800cb28:	d001      	beq.n	800cb2e <__sflush_r+0xb2>
 800cb2a:	2b16      	cmp	r3, #22
 800cb2c:	d101      	bne.n	800cb32 <__sflush_r+0xb6>
 800cb2e:	602f      	str	r7, [r5, #0]
 800cb30:	e7b1      	b.n	800ca96 <__sflush_r+0x1a>
 800cb32:	89a3      	ldrh	r3, [r4, #12]
 800cb34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb38:	81a3      	strh	r3, [r4, #12]
 800cb3a:	e7ad      	b.n	800ca98 <__sflush_r+0x1c>
 800cb3c:	690f      	ldr	r7, [r1, #16]
 800cb3e:	2f00      	cmp	r7, #0
 800cb40:	d0a9      	beq.n	800ca96 <__sflush_r+0x1a>
 800cb42:	0793      	lsls	r3, r2, #30
 800cb44:	bf18      	it	ne
 800cb46:	2300      	movne	r3, #0
 800cb48:	680e      	ldr	r6, [r1, #0]
 800cb4a:	bf08      	it	eq
 800cb4c:	694b      	ldreq	r3, [r1, #20]
 800cb4e:	eba6 0807 	sub.w	r8, r6, r7
 800cb52:	600f      	str	r7, [r1, #0]
 800cb54:	608b      	str	r3, [r1, #8]
 800cb56:	f1b8 0f00 	cmp.w	r8, #0
 800cb5a:	dd9c      	ble.n	800ca96 <__sflush_r+0x1a>
 800cb5c:	4643      	mov	r3, r8
 800cb5e:	463a      	mov	r2, r7
 800cb60:	6a21      	ldr	r1, [r4, #32]
 800cb62:	4628      	mov	r0, r5
 800cb64:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb66:	47b0      	blx	r6
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	dc06      	bgt.n	800cb7a <__sflush_r+0xfe>
 800cb6c:	89a3      	ldrh	r3, [r4, #12]
 800cb6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb72:	81a3      	strh	r3, [r4, #12]
 800cb74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb78:	e78e      	b.n	800ca98 <__sflush_r+0x1c>
 800cb7a:	4407      	add	r7, r0
 800cb7c:	eba8 0800 	sub.w	r8, r8, r0
 800cb80:	e7e9      	b.n	800cb56 <__sflush_r+0xda>
 800cb82:	bf00      	nop
 800cb84:	20400001 	.word	0x20400001

0800cb88 <_fflush_r>:
 800cb88:	b538      	push	{r3, r4, r5, lr}
 800cb8a:	690b      	ldr	r3, [r1, #16]
 800cb8c:	4605      	mov	r5, r0
 800cb8e:	460c      	mov	r4, r1
 800cb90:	b1db      	cbz	r3, 800cbca <_fflush_r+0x42>
 800cb92:	b118      	cbz	r0, 800cb9c <_fflush_r+0x14>
 800cb94:	6983      	ldr	r3, [r0, #24]
 800cb96:	b90b      	cbnz	r3, 800cb9c <_fflush_r+0x14>
 800cb98:	f000 f860 	bl	800cc5c <__sinit>
 800cb9c:	4b0c      	ldr	r3, [pc, #48]	; (800cbd0 <_fflush_r+0x48>)
 800cb9e:	429c      	cmp	r4, r3
 800cba0:	d109      	bne.n	800cbb6 <_fflush_r+0x2e>
 800cba2:	686c      	ldr	r4, [r5, #4]
 800cba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cba8:	b17b      	cbz	r3, 800cbca <_fflush_r+0x42>
 800cbaa:	4621      	mov	r1, r4
 800cbac:	4628      	mov	r0, r5
 800cbae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbb2:	f7ff bf63 	b.w	800ca7c <__sflush_r>
 800cbb6:	4b07      	ldr	r3, [pc, #28]	; (800cbd4 <_fflush_r+0x4c>)
 800cbb8:	429c      	cmp	r4, r3
 800cbba:	d101      	bne.n	800cbc0 <_fflush_r+0x38>
 800cbbc:	68ac      	ldr	r4, [r5, #8]
 800cbbe:	e7f1      	b.n	800cba4 <_fflush_r+0x1c>
 800cbc0:	4b05      	ldr	r3, [pc, #20]	; (800cbd8 <_fflush_r+0x50>)
 800cbc2:	429c      	cmp	r4, r3
 800cbc4:	bf08      	it	eq
 800cbc6:	68ec      	ldreq	r4, [r5, #12]
 800cbc8:	e7ec      	b.n	800cba4 <_fflush_r+0x1c>
 800cbca:	2000      	movs	r0, #0
 800cbcc:	bd38      	pop	{r3, r4, r5, pc}
 800cbce:	bf00      	nop
 800cbd0:	0800eb20 	.word	0x0800eb20
 800cbd4:	0800eb40 	.word	0x0800eb40
 800cbd8:	0800eb00 	.word	0x0800eb00

0800cbdc <std>:
 800cbdc:	2300      	movs	r3, #0
 800cbde:	b510      	push	{r4, lr}
 800cbe0:	4604      	mov	r4, r0
 800cbe2:	e9c0 3300 	strd	r3, r3, [r0]
 800cbe6:	6083      	str	r3, [r0, #8]
 800cbe8:	8181      	strh	r1, [r0, #12]
 800cbea:	6643      	str	r3, [r0, #100]	; 0x64
 800cbec:	81c2      	strh	r2, [r0, #14]
 800cbee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cbf2:	6183      	str	r3, [r0, #24]
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	2208      	movs	r2, #8
 800cbf8:	305c      	adds	r0, #92	; 0x5c
 800cbfa:	f7ff fdfb 	bl	800c7f4 <memset>
 800cbfe:	4b05      	ldr	r3, [pc, #20]	; (800cc14 <std+0x38>)
 800cc00:	6224      	str	r4, [r4, #32]
 800cc02:	6263      	str	r3, [r4, #36]	; 0x24
 800cc04:	4b04      	ldr	r3, [pc, #16]	; (800cc18 <std+0x3c>)
 800cc06:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc08:	4b04      	ldr	r3, [pc, #16]	; (800cc1c <std+0x40>)
 800cc0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc0c:	4b04      	ldr	r3, [pc, #16]	; (800cc20 <std+0x44>)
 800cc0e:	6323      	str	r3, [r4, #48]	; 0x30
 800cc10:	bd10      	pop	{r4, pc}
 800cc12:	bf00      	nop
 800cc14:	0800d531 	.word	0x0800d531
 800cc18:	0800d553 	.word	0x0800d553
 800cc1c:	0800d58b 	.word	0x0800d58b
 800cc20:	0800d5af 	.word	0x0800d5af

0800cc24 <_cleanup_r>:
 800cc24:	4901      	ldr	r1, [pc, #4]	; (800cc2c <_cleanup_r+0x8>)
 800cc26:	f000 b885 	b.w	800cd34 <_fwalk_reent>
 800cc2a:	bf00      	nop
 800cc2c:	0800cb89 	.word	0x0800cb89

0800cc30 <__sfmoreglue>:
 800cc30:	b570      	push	{r4, r5, r6, lr}
 800cc32:	2568      	movs	r5, #104	; 0x68
 800cc34:	1e4a      	subs	r2, r1, #1
 800cc36:	4355      	muls	r5, r2
 800cc38:	460e      	mov	r6, r1
 800cc3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cc3e:	f000 f947 	bl	800ced0 <_malloc_r>
 800cc42:	4604      	mov	r4, r0
 800cc44:	b140      	cbz	r0, 800cc58 <__sfmoreglue+0x28>
 800cc46:	2100      	movs	r1, #0
 800cc48:	e9c0 1600 	strd	r1, r6, [r0]
 800cc4c:	300c      	adds	r0, #12
 800cc4e:	60a0      	str	r0, [r4, #8]
 800cc50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cc54:	f7ff fdce 	bl	800c7f4 <memset>
 800cc58:	4620      	mov	r0, r4
 800cc5a:	bd70      	pop	{r4, r5, r6, pc}

0800cc5c <__sinit>:
 800cc5c:	6983      	ldr	r3, [r0, #24]
 800cc5e:	b510      	push	{r4, lr}
 800cc60:	4604      	mov	r4, r0
 800cc62:	bb33      	cbnz	r3, 800ccb2 <__sinit+0x56>
 800cc64:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cc68:	6503      	str	r3, [r0, #80]	; 0x50
 800cc6a:	4b12      	ldr	r3, [pc, #72]	; (800ccb4 <__sinit+0x58>)
 800cc6c:	4a12      	ldr	r2, [pc, #72]	; (800ccb8 <__sinit+0x5c>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	6282      	str	r2, [r0, #40]	; 0x28
 800cc72:	4298      	cmp	r0, r3
 800cc74:	bf04      	itt	eq
 800cc76:	2301      	moveq	r3, #1
 800cc78:	6183      	streq	r3, [r0, #24]
 800cc7a:	f000 f81f 	bl	800ccbc <__sfp>
 800cc7e:	6060      	str	r0, [r4, #4]
 800cc80:	4620      	mov	r0, r4
 800cc82:	f000 f81b 	bl	800ccbc <__sfp>
 800cc86:	60a0      	str	r0, [r4, #8]
 800cc88:	4620      	mov	r0, r4
 800cc8a:	f000 f817 	bl	800ccbc <__sfp>
 800cc8e:	2200      	movs	r2, #0
 800cc90:	60e0      	str	r0, [r4, #12]
 800cc92:	2104      	movs	r1, #4
 800cc94:	6860      	ldr	r0, [r4, #4]
 800cc96:	f7ff ffa1 	bl	800cbdc <std>
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	2109      	movs	r1, #9
 800cc9e:	68a0      	ldr	r0, [r4, #8]
 800cca0:	f7ff ff9c 	bl	800cbdc <std>
 800cca4:	2202      	movs	r2, #2
 800cca6:	2112      	movs	r1, #18
 800cca8:	68e0      	ldr	r0, [r4, #12]
 800ccaa:	f7ff ff97 	bl	800cbdc <std>
 800ccae:	2301      	movs	r3, #1
 800ccb0:	61a3      	str	r3, [r4, #24]
 800ccb2:	bd10      	pop	{r4, pc}
 800ccb4:	0800eafc 	.word	0x0800eafc
 800ccb8:	0800cc25 	.word	0x0800cc25

0800ccbc <__sfp>:
 800ccbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccbe:	4b1b      	ldr	r3, [pc, #108]	; (800cd2c <__sfp+0x70>)
 800ccc0:	4607      	mov	r7, r0
 800ccc2:	681e      	ldr	r6, [r3, #0]
 800ccc4:	69b3      	ldr	r3, [r6, #24]
 800ccc6:	b913      	cbnz	r3, 800ccce <__sfp+0x12>
 800ccc8:	4630      	mov	r0, r6
 800ccca:	f7ff ffc7 	bl	800cc5c <__sinit>
 800ccce:	3648      	adds	r6, #72	; 0x48
 800ccd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ccd4:	3b01      	subs	r3, #1
 800ccd6:	d503      	bpl.n	800cce0 <__sfp+0x24>
 800ccd8:	6833      	ldr	r3, [r6, #0]
 800ccda:	b133      	cbz	r3, 800ccea <__sfp+0x2e>
 800ccdc:	6836      	ldr	r6, [r6, #0]
 800ccde:	e7f7      	b.n	800ccd0 <__sfp+0x14>
 800cce0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cce4:	b16d      	cbz	r5, 800cd02 <__sfp+0x46>
 800cce6:	3468      	adds	r4, #104	; 0x68
 800cce8:	e7f4      	b.n	800ccd4 <__sfp+0x18>
 800ccea:	2104      	movs	r1, #4
 800ccec:	4638      	mov	r0, r7
 800ccee:	f7ff ff9f 	bl	800cc30 <__sfmoreglue>
 800ccf2:	6030      	str	r0, [r6, #0]
 800ccf4:	2800      	cmp	r0, #0
 800ccf6:	d1f1      	bne.n	800ccdc <__sfp+0x20>
 800ccf8:	230c      	movs	r3, #12
 800ccfa:	4604      	mov	r4, r0
 800ccfc:	603b      	str	r3, [r7, #0]
 800ccfe:	4620      	mov	r0, r4
 800cd00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd02:	4b0b      	ldr	r3, [pc, #44]	; (800cd30 <__sfp+0x74>)
 800cd04:	6665      	str	r5, [r4, #100]	; 0x64
 800cd06:	e9c4 5500 	strd	r5, r5, [r4]
 800cd0a:	60a5      	str	r5, [r4, #8]
 800cd0c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cd10:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cd14:	2208      	movs	r2, #8
 800cd16:	4629      	mov	r1, r5
 800cd18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cd1c:	f7ff fd6a 	bl	800c7f4 <memset>
 800cd20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cd24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cd28:	e7e9      	b.n	800ccfe <__sfp+0x42>
 800cd2a:	bf00      	nop
 800cd2c:	0800eafc 	.word	0x0800eafc
 800cd30:	ffff0001 	.word	0xffff0001

0800cd34 <_fwalk_reent>:
 800cd34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd38:	4680      	mov	r8, r0
 800cd3a:	4689      	mov	r9, r1
 800cd3c:	2600      	movs	r6, #0
 800cd3e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cd42:	b914      	cbnz	r4, 800cd4a <_fwalk_reent+0x16>
 800cd44:	4630      	mov	r0, r6
 800cd46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd4a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800cd4e:	3f01      	subs	r7, #1
 800cd50:	d501      	bpl.n	800cd56 <_fwalk_reent+0x22>
 800cd52:	6824      	ldr	r4, [r4, #0]
 800cd54:	e7f5      	b.n	800cd42 <_fwalk_reent+0xe>
 800cd56:	89ab      	ldrh	r3, [r5, #12]
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d907      	bls.n	800cd6c <_fwalk_reent+0x38>
 800cd5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd60:	3301      	adds	r3, #1
 800cd62:	d003      	beq.n	800cd6c <_fwalk_reent+0x38>
 800cd64:	4629      	mov	r1, r5
 800cd66:	4640      	mov	r0, r8
 800cd68:	47c8      	blx	r9
 800cd6a:	4306      	orrs	r6, r0
 800cd6c:	3568      	adds	r5, #104	; 0x68
 800cd6e:	e7ee      	b.n	800cd4e <_fwalk_reent+0x1a>

0800cd70 <__swhatbuf_r>:
 800cd70:	b570      	push	{r4, r5, r6, lr}
 800cd72:	460e      	mov	r6, r1
 800cd74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd78:	b096      	sub	sp, #88	; 0x58
 800cd7a:	2900      	cmp	r1, #0
 800cd7c:	4614      	mov	r4, r2
 800cd7e:	461d      	mov	r5, r3
 800cd80:	da07      	bge.n	800cd92 <__swhatbuf_r+0x22>
 800cd82:	2300      	movs	r3, #0
 800cd84:	602b      	str	r3, [r5, #0]
 800cd86:	89b3      	ldrh	r3, [r6, #12]
 800cd88:	061a      	lsls	r2, r3, #24
 800cd8a:	d410      	bmi.n	800cdae <__swhatbuf_r+0x3e>
 800cd8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd90:	e00e      	b.n	800cdb0 <__swhatbuf_r+0x40>
 800cd92:	466a      	mov	r2, sp
 800cd94:	f000 fc32 	bl	800d5fc <_fstat_r>
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	dbf2      	blt.n	800cd82 <__swhatbuf_r+0x12>
 800cd9c:	9a01      	ldr	r2, [sp, #4]
 800cd9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cda2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cda6:	425a      	negs	r2, r3
 800cda8:	415a      	adcs	r2, r3
 800cdaa:	602a      	str	r2, [r5, #0]
 800cdac:	e7ee      	b.n	800cd8c <__swhatbuf_r+0x1c>
 800cdae:	2340      	movs	r3, #64	; 0x40
 800cdb0:	2000      	movs	r0, #0
 800cdb2:	6023      	str	r3, [r4, #0]
 800cdb4:	b016      	add	sp, #88	; 0x58
 800cdb6:	bd70      	pop	{r4, r5, r6, pc}

0800cdb8 <__smakebuf_r>:
 800cdb8:	898b      	ldrh	r3, [r1, #12]
 800cdba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cdbc:	079d      	lsls	r5, r3, #30
 800cdbe:	4606      	mov	r6, r0
 800cdc0:	460c      	mov	r4, r1
 800cdc2:	d507      	bpl.n	800cdd4 <__smakebuf_r+0x1c>
 800cdc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cdc8:	6023      	str	r3, [r4, #0]
 800cdca:	6123      	str	r3, [r4, #16]
 800cdcc:	2301      	movs	r3, #1
 800cdce:	6163      	str	r3, [r4, #20]
 800cdd0:	b002      	add	sp, #8
 800cdd2:	bd70      	pop	{r4, r5, r6, pc}
 800cdd4:	ab01      	add	r3, sp, #4
 800cdd6:	466a      	mov	r2, sp
 800cdd8:	f7ff ffca 	bl	800cd70 <__swhatbuf_r>
 800cddc:	9900      	ldr	r1, [sp, #0]
 800cdde:	4605      	mov	r5, r0
 800cde0:	4630      	mov	r0, r6
 800cde2:	f000 f875 	bl	800ced0 <_malloc_r>
 800cde6:	b948      	cbnz	r0, 800cdfc <__smakebuf_r+0x44>
 800cde8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdec:	059a      	lsls	r2, r3, #22
 800cdee:	d4ef      	bmi.n	800cdd0 <__smakebuf_r+0x18>
 800cdf0:	f023 0303 	bic.w	r3, r3, #3
 800cdf4:	f043 0302 	orr.w	r3, r3, #2
 800cdf8:	81a3      	strh	r3, [r4, #12]
 800cdfa:	e7e3      	b.n	800cdc4 <__smakebuf_r+0xc>
 800cdfc:	4b0d      	ldr	r3, [pc, #52]	; (800ce34 <__smakebuf_r+0x7c>)
 800cdfe:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce00:	89a3      	ldrh	r3, [r4, #12]
 800ce02:	6020      	str	r0, [r4, #0]
 800ce04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce08:	81a3      	strh	r3, [r4, #12]
 800ce0a:	9b00      	ldr	r3, [sp, #0]
 800ce0c:	6120      	str	r0, [r4, #16]
 800ce0e:	6163      	str	r3, [r4, #20]
 800ce10:	9b01      	ldr	r3, [sp, #4]
 800ce12:	b15b      	cbz	r3, 800ce2c <__smakebuf_r+0x74>
 800ce14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f000 fc01 	bl	800d620 <_isatty_r>
 800ce1e:	b128      	cbz	r0, 800ce2c <__smakebuf_r+0x74>
 800ce20:	89a3      	ldrh	r3, [r4, #12]
 800ce22:	f023 0303 	bic.w	r3, r3, #3
 800ce26:	f043 0301 	orr.w	r3, r3, #1
 800ce2a:	81a3      	strh	r3, [r4, #12]
 800ce2c:	89a3      	ldrh	r3, [r4, #12]
 800ce2e:	431d      	orrs	r5, r3
 800ce30:	81a5      	strh	r5, [r4, #12]
 800ce32:	e7cd      	b.n	800cdd0 <__smakebuf_r+0x18>
 800ce34:	0800cc25 	.word	0x0800cc25

0800ce38 <_free_r>:
 800ce38:	b538      	push	{r3, r4, r5, lr}
 800ce3a:	4605      	mov	r5, r0
 800ce3c:	2900      	cmp	r1, #0
 800ce3e:	d043      	beq.n	800cec8 <_free_r+0x90>
 800ce40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce44:	1f0c      	subs	r4, r1, #4
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	bfb8      	it	lt
 800ce4a:	18e4      	addlt	r4, r4, r3
 800ce4c:	f000 fc18 	bl	800d680 <__malloc_lock>
 800ce50:	4a1e      	ldr	r2, [pc, #120]	; (800cecc <_free_r+0x94>)
 800ce52:	6813      	ldr	r3, [r2, #0]
 800ce54:	4610      	mov	r0, r2
 800ce56:	b933      	cbnz	r3, 800ce66 <_free_r+0x2e>
 800ce58:	6063      	str	r3, [r4, #4]
 800ce5a:	6014      	str	r4, [r2, #0]
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce62:	f000 bc0e 	b.w	800d682 <__malloc_unlock>
 800ce66:	42a3      	cmp	r3, r4
 800ce68:	d90b      	bls.n	800ce82 <_free_r+0x4a>
 800ce6a:	6821      	ldr	r1, [r4, #0]
 800ce6c:	1862      	adds	r2, r4, r1
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	bf01      	itttt	eq
 800ce72:	681a      	ldreq	r2, [r3, #0]
 800ce74:	685b      	ldreq	r3, [r3, #4]
 800ce76:	1852      	addeq	r2, r2, r1
 800ce78:	6022      	streq	r2, [r4, #0]
 800ce7a:	6063      	str	r3, [r4, #4]
 800ce7c:	6004      	str	r4, [r0, #0]
 800ce7e:	e7ed      	b.n	800ce5c <_free_r+0x24>
 800ce80:	4613      	mov	r3, r2
 800ce82:	685a      	ldr	r2, [r3, #4]
 800ce84:	b10a      	cbz	r2, 800ce8a <_free_r+0x52>
 800ce86:	42a2      	cmp	r2, r4
 800ce88:	d9fa      	bls.n	800ce80 <_free_r+0x48>
 800ce8a:	6819      	ldr	r1, [r3, #0]
 800ce8c:	1858      	adds	r0, r3, r1
 800ce8e:	42a0      	cmp	r0, r4
 800ce90:	d10b      	bne.n	800ceaa <_free_r+0x72>
 800ce92:	6820      	ldr	r0, [r4, #0]
 800ce94:	4401      	add	r1, r0
 800ce96:	1858      	adds	r0, r3, r1
 800ce98:	4282      	cmp	r2, r0
 800ce9a:	6019      	str	r1, [r3, #0]
 800ce9c:	d1de      	bne.n	800ce5c <_free_r+0x24>
 800ce9e:	6810      	ldr	r0, [r2, #0]
 800cea0:	6852      	ldr	r2, [r2, #4]
 800cea2:	4401      	add	r1, r0
 800cea4:	6019      	str	r1, [r3, #0]
 800cea6:	605a      	str	r2, [r3, #4]
 800cea8:	e7d8      	b.n	800ce5c <_free_r+0x24>
 800ceaa:	d902      	bls.n	800ceb2 <_free_r+0x7a>
 800ceac:	230c      	movs	r3, #12
 800ceae:	602b      	str	r3, [r5, #0]
 800ceb0:	e7d4      	b.n	800ce5c <_free_r+0x24>
 800ceb2:	6820      	ldr	r0, [r4, #0]
 800ceb4:	1821      	adds	r1, r4, r0
 800ceb6:	428a      	cmp	r2, r1
 800ceb8:	bf01      	itttt	eq
 800ceba:	6811      	ldreq	r1, [r2, #0]
 800cebc:	6852      	ldreq	r2, [r2, #4]
 800cebe:	1809      	addeq	r1, r1, r0
 800cec0:	6021      	streq	r1, [r4, #0]
 800cec2:	6062      	str	r2, [r4, #4]
 800cec4:	605c      	str	r4, [r3, #4]
 800cec6:	e7c9      	b.n	800ce5c <_free_r+0x24>
 800cec8:	bd38      	pop	{r3, r4, r5, pc}
 800ceca:	bf00      	nop
 800cecc:	20005d18 	.word	0x20005d18

0800ced0 <_malloc_r>:
 800ced0:	b570      	push	{r4, r5, r6, lr}
 800ced2:	1ccd      	adds	r5, r1, #3
 800ced4:	f025 0503 	bic.w	r5, r5, #3
 800ced8:	3508      	adds	r5, #8
 800ceda:	2d0c      	cmp	r5, #12
 800cedc:	bf38      	it	cc
 800cede:	250c      	movcc	r5, #12
 800cee0:	2d00      	cmp	r5, #0
 800cee2:	4606      	mov	r6, r0
 800cee4:	db01      	blt.n	800ceea <_malloc_r+0x1a>
 800cee6:	42a9      	cmp	r1, r5
 800cee8:	d903      	bls.n	800cef2 <_malloc_r+0x22>
 800ceea:	230c      	movs	r3, #12
 800ceec:	6033      	str	r3, [r6, #0]
 800ceee:	2000      	movs	r0, #0
 800cef0:	bd70      	pop	{r4, r5, r6, pc}
 800cef2:	f000 fbc5 	bl	800d680 <__malloc_lock>
 800cef6:	4a21      	ldr	r2, [pc, #132]	; (800cf7c <_malloc_r+0xac>)
 800cef8:	6814      	ldr	r4, [r2, #0]
 800cefa:	4621      	mov	r1, r4
 800cefc:	b991      	cbnz	r1, 800cf24 <_malloc_r+0x54>
 800cefe:	4c20      	ldr	r4, [pc, #128]	; (800cf80 <_malloc_r+0xb0>)
 800cf00:	6823      	ldr	r3, [r4, #0]
 800cf02:	b91b      	cbnz	r3, 800cf0c <_malloc_r+0x3c>
 800cf04:	4630      	mov	r0, r6
 800cf06:	f000 fb03 	bl	800d510 <_sbrk_r>
 800cf0a:	6020      	str	r0, [r4, #0]
 800cf0c:	4629      	mov	r1, r5
 800cf0e:	4630      	mov	r0, r6
 800cf10:	f000 fafe 	bl	800d510 <_sbrk_r>
 800cf14:	1c43      	adds	r3, r0, #1
 800cf16:	d124      	bne.n	800cf62 <_malloc_r+0x92>
 800cf18:	230c      	movs	r3, #12
 800cf1a:	4630      	mov	r0, r6
 800cf1c:	6033      	str	r3, [r6, #0]
 800cf1e:	f000 fbb0 	bl	800d682 <__malloc_unlock>
 800cf22:	e7e4      	b.n	800ceee <_malloc_r+0x1e>
 800cf24:	680b      	ldr	r3, [r1, #0]
 800cf26:	1b5b      	subs	r3, r3, r5
 800cf28:	d418      	bmi.n	800cf5c <_malloc_r+0x8c>
 800cf2a:	2b0b      	cmp	r3, #11
 800cf2c:	d90f      	bls.n	800cf4e <_malloc_r+0x7e>
 800cf2e:	600b      	str	r3, [r1, #0]
 800cf30:	18cc      	adds	r4, r1, r3
 800cf32:	50cd      	str	r5, [r1, r3]
 800cf34:	4630      	mov	r0, r6
 800cf36:	f000 fba4 	bl	800d682 <__malloc_unlock>
 800cf3a:	f104 000b 	add.w	r0, r4, #11
 800cf3e:	1d23      	adds	r3, r4, #4
 800cf40:	f020 0007 	bic.w	r0, r0, #7
 800cf44:	1ac3      	subs	r3, r0, r3
 800cf46:	d0d3      	beq.n	800cef0 <_malloc_r+0x20>
 800cf48:	425a      	negs	r2, r3
 800cf4a:	50e2      	str	r2, [r4, r3]
 800cf4c:	e7d0      	b.n	800cef0 <_malloc_r+0x20>
 800cf4e:	684b      	ldr	r3, [r1, #4]
 800cf50:	428c      	cmp	r4, r1
 800cf52:	bf16      	itet	ne
 800cf54:	6063      	strne	r3, [r4, #4]
 800cf56:	6013      	streq	r3, [r2, #0]
 800cf58:	460c      	movne	r4, r1
 800cf5a:	e7eb      	b.n	800cf34 <_malloc_r+0x64>
 800cf5c:	460c      	mov	r4, r1
 800cf5e:	6849      	ldr	r1, [r1, #4]
 800cf60:	e7cc      	b.n	800cefc <_malloc_r+0x2c>
 800cf62:	1cc4      	adds	r4, r0, #3
 800cf64:	f024 0403 	bic.w	r4, r4, #3
 800cf68:	42a0      	cmp	r0, r4
 800cf6a:	d005      	beq.n	800cf78 <_malloc_r+0xa8>
 800cf6c:	1a21      	subs	r1, r4, r0
 800cf6e:	4630      	mov	r0, r6
 800cf70:	f000 face 	bl	800d510 <_sbrk_r>
 800cf74:	3001      	adds	r0, #1
 800cf76:	d0cf      	beq.n	800cf18 <_malloc_r+0x48>
 800cf78:	6025      	str	r5, [r4, #0]
 800cf7a:	e7db      	b.n	800cf34 <_malloc_r+0x64>
 800cf7c:	20005d18 	.word	0x20005d18
 800cf80:	20005d1c 	.word	0x20005d1c

0800cf84 <__sfputc_r>:
 800cf84:	6893      	ldr	r3, [r2, #8]
 800cf86:	b410      	push	{r4}
 800cf88:	3b01      	subs	r3, #1
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	6093      	str	r3, [r2, #8]
 800cf8e:	da07      	bge.n	800cfa0 <__sfputc_r+0x1c>
 800cf90:	6994      	ldr	r4, [r2, #24]
 800cf92:	42a3      	cmp	r3, r4
 800cf94:	db01      	blt.n	800cf9a <__sfputc_r+0x16>
 800cf96:	290a      	cmp	r1, #10
 800cf98:	d102      	bne.n	800cfa0 <__sfputc_r+0x1c>
 800cf9a:	bc10      	pop	{r4}
 800cf9c:	f7ff bcae 	b.w	800c8fc <__swbuf_r>
 800cfa0:	6813      	ldr	r3, [r2, #0]
 800cfa2:	1c58      	adds	r0, r3, #1
 800cfa4:	6010      	str	r0, [r2, #0]
 800cfa6:	7019      	strb	r1, [r3, #0]
 800cfa8:	4608      	mov	r0, r1
 800cfaa:	bc10      	pop	{r4}
 800cfac:	4770      	bx	lr

0800cfae <__sfputs_r>:
 800cfae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfb0:	4606      	mov	r6, r0
 800cfb2:	460f      	mov	r7, r1
 800cfb4:	4614      	mov	r4, r2
 800cfb6:	18d5      	adds	r5, r2, r3
 800cfb8:	42ac      	cmp	r4, r5
 800cfba:	d101      	bne.n	800cfc0 <__sfputs_r+0x12>
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	e007      	b.n	800cfd0 <__sfputs_r+0x22>
 800cfc0:	463a      	mov	r2, r7
 800cfc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	f7ff ffdc 	bl	800cf84 <__sfputc_r>
 800cfcc:	1c43      	adds	r3, r0, #1
 800cfce:	d1f3      	bne.n	800cfb8 <__sfputs_r+0xa>
 800cfd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfd4 <_vfiprintf_r>:
 800cfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd8:	460c      	mov	r4, r1
 800cfda:	b09d      	sub	sp, #116	; 0x74
 800cfdc:	4617      	mov	r7, r2
 800cfde:	461d      	mov	r5, r3
 800cfe0:	4606      	mov	r6, r0
 800cfe2:	b118      	cbz	r0, 800cfec <_vfiprintf_r+0x18>
 800cfe4:	6983      	ldr	r3, [r0, #24]
 800cfe6:	b90b      	cbnz	r3, 800cfec <_vfiprintf_r+0x18>
 800cfe8:	f7ff fe38 	bl	800cc5c <__sinit>
 800cfec:	4b7c      	ldr	r3, [pc, #496]	; (800d1e0 <_vfiprintf_r+0x20c>)
 800cfee:	429c      	cmp	r4, r3
 800cff0:	d158      	bne.n	800d0a4 <_vfiprintf_r+0xd0>
 800cff2:	6874      	ldr	r4, [r6, #4]
 800cff4:	89a3      	ldrh	r3, [r4, #12]
 800cff6:	0718      	lsls	r0, r3, #28
 800cff8:	d55e      	bpl.n	800d0b8 <_vfiprintf_r+0xe4>
 800cffa:	6923      	ldr	r3, [r4, #16]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d05b      	beq.n	800d0b8 <_vfiprintf_r+0xe4>
 800d000:	2300      	movs	r3, #0
 800d002:	9309      	str	r3, [sp, #36]	; 0x24
 800d004:	2320      	movs	r3, #32
 800d006:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d00a:	2330      	movs	r3, #48	; 0x30
 800d00c:	f04f 0b01 	mov.w	fp, #1
 800d010:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d014:	9503      	str	r5, [sp, #12]
 800d016:	46b8      	mov	r8, r7
 800d018:	4645      	mov	r5, r8
 800d01a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d01e:	b10b      	cbz	r3, 800d024 <_vfiprintf_r+0x50>
 800d020:	2b25      	cmp	r3, #37	; 0x25
 800d022:	d154      	bne.n	800d0ce <_vfiprintf_r+0xfa>
 800d024:	ebb8 0a07 	subs.w	sl, r8, r7
 800d028:	d00b      	beq.n	800d042 <_vfiprintf_r+0x6e>
 800d02a:	4653      	mov	r3, sl
 800d02c:	463a      	mov	r2, r7
 800d02e:	4621      	mov	r1, r4
 800d030:	4630      	mov	r0, r6
 800d032:	f7ff ffbc 	bl	800cfae <__sfputs_r>
 800d036:	3001      	adds	r0, #1
 800d038:	f000 80c2 	beq.w	800d1c0 <_vfiprintf_r+0x1ec>
 800d03c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d03e:	4453      	add	r3, sl
 800d040:	9309      	str	r3, [sp, #36]	; 0x24
 800d042:	f898 3000 	ldrb.w	r3, [r8]
 800d046:	2b00      	cmp	r3, #0
 800d048:	f000 80ba 	beq.w	800d1c0 <_vfiprintf_r+0x1ec>
 800d04c:	2300      	movs	r3, #0
 800d04e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d056:	9304      	str	r3, [sp, #16]
 800d058:	9307      	str	r3, [sp, #28]
 800d05a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d05e:	931a      	str	r3, [sp, #104]	; 0x68
 800d060:	46a8      	mov	r8, r5
 800d062:	2205      	movs	r2, #5
 800d064:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d068:	485e      	ldr	r0, [pc, #376]	; (800d1e4 <_vfiprintf_r+0x210>)
 800d06a:	f000 fafb 	bl	800d664 <memchr>
 800d06e:	9b04      	ldr	r3, [sp, #16]
 800d070:	bb78      	cbnz	r0, 800d0d2 <_vfiprintf_r+0xfe>
 800d072:	06d9      	lsls	r1, r3, #27
 800d074:	bf44      	itt	mi
 800d076:	2220      	movmi	r2, #32
 800d078:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d07c:	071a      	lsls	r2, r3, #28
 800d07e:	bf44      	itt	mi
 800d080:	222b      	movmi	r2, #43	; 0x2b
 800d082:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d086:	782a      	ldrb	r2, [r5, #0]
 800d088:	2a2a      	cmp	r2, #42	; 0x2a
 800d08a:	d02a      	beq.n	800d0e2 <_vfiprintf_r+0x10e>
 800d08c:	46a8      	mov	r8, r5
 800d08e:	2000      	movs	r0, #0
 800d090:	250a      	movs	r5, #10
 800d092:	9a07      	ldr	r2, [sp, #28]
 800d094:	4641      	mov	r1, r8
 800d096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d09a:	3b30      	subs	r3, #48	; 0x30
 800d09c:	2b09      	cmp	r3, #9
 800d09e:	d969      	bls.n	800d174 <_vfiprintf_r+0x1a0>
 800d0a0:	b360      	cbz	r0, 800d0fc <_vfiprintf_r+0x128>
 800d0a2:	e024      	b.n	800d0ee <_vfiprintf_r+0x11a>
 800d0a4:	4b50      	ldr	r3, [pc, #320]	; (800d1e8 <_vfiprintf_r+0x214>)
 800d0a6:	429c      	cmp	r4, r3
 800d0a8:	d101      	bne.n	800d0ae <_vfiprintf_r+0xda>
 800d0aa:	68b4      	ldr	r4, [r6, #8]
 800d0ac:	e7a2      	b.n	800cff4 <_vfiprintf_r+0x20>
 800d0ae:	4b4f      	ldr	r3, [pc, #316]	; (800d1ec <_vfiprintf_r+0x218>)
 800d0b0:	429c      	cmp	r4, r3
 800d0b2:	bf08      	it	eq
 800d0b4:	68f4      	ldreq	r4, [r6, #12]
 800d0b6:	e79d      	b.n	800cff4 <_vfiprintf_r+0x20>
 800d0b8:	4621      	mov	r1, r4
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	f7ff fc70 	bl	800c9a0 <__swsetup_r>
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	d09d      	beq.n	800d000 <_vfiprintf_r+0x2c>
 800d0c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0c8:	b01d      	add	sp, #116	; 0x74
 800d0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ce:	46a8      	mov	r8, r5
 800d0d0:	e7a2      	b.n	800d018 <_vfiprintf_r+0x44>
 800d0d2:	4a44      	ldr	r2, [pc, #272]	; (800d1e4 <_vfiprintf_r+0x210>)
 800d0d4:	4645      	mov	r5, r8
 800d0d6:	1a80      	subs	r0, r0, r2
 800d0d8:	fa0b f000 	lsl.w	r0, fp, r0
 800d0dc:	4318      	orrs	r0, r3
 800d0de:	9004      	str	r0, [sp, #16]
 800d0e0:	e7be      	b.n	800d060 <_vfiprintf_r+0x8c>
 800d0e2:	9a03      	ldr	r2, [sp, #12]
 800d0e4:	1d11      	adds	r1, r2, #4
 800d0e6:	6812      	ldr	r2, [r2, #0]
 800d0e8:	9103      	str	r1, [sp, #12]
 800d0ea:	2a00      	cmp	r2, #0
 800d0ec:	db01      	blt.n	800d0f2 <_vfiprintf_r+0x11e>
 800d0ee:	9207      	str	r2, [sp, #28]
 800d0f0:	e004      	b.n	800d0fc <_vfiprintf_r+0x128>
 800d0f2:	4252      	negs	r2, r2
 800d0f4:	f043 0302 	orr.w	r3, r3, #2
 800d0f8:	9207      	str	r2, [sp, #28]
 800d0fa:	9304      	str	r3, [sp, #16]
 800d0fc:	f898 3000 	ldrb.w	r3, [r8]
 800d100:	2b2e      	cmp	r3, #46	; 0x2e
 800d102:	d10e      	bne.n	800d122 <_vfiprintf_r+0x14e>
 800d104:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d108:	2b2a      	cmp	r3, #42	; 0x2a
 800d10a:	d138      	bne.n	800d17e <_vfiprintf_r+0x1aa>
 800d10c:	9b03      	ldr	r3, [sp, #12]
 800d10e:	f108 0802 	add.w	r8, r8, #2
 800d112:	1d1a      	adds	r2, r3, #4
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	9203      	str	r2, [sp, #12]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	bfb8      	it	lt
 800d11c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d120:	9305      	str	r3, [sp, #20]
 800d122:	4d33      	ldr	r5, [pc, #204]	; (800d1f0 <_vfiprintf_r+0x21c>)
 800d124:	2203      	movs	r2, #3
 800d126:	f898 1000 	ldrb.w	r1, [r8]
 800d12a:	4628      	mov	r0, r5
 800d12c:	f000 fa9a 	bl	800d664 <memchr>
 800d130:	b140      	cbz	r0, 800d144 <_vfiprintf_r+0x170>
 800d132:	2340      	movs	r3, #64	; 0x40
 800d134:	1b40      	subs	r0, r0, r5
 800d136:	fa03 f000 	lsl.w	r0, r3, r0
 800d13a:	9b04      	ldr	r3, [sp, #16]
 800d13c:	f108 0801 	add.w	r8, r8, #1
 800d140:	4303      	orrs	r3, r0
 800d142:	9304      	str	r3, [sp, #16]
 800d144:	f898 1000 	ldrb.w	r1, [r8]
 800d148:	2206      	movs	r2, #6
 800d14a:	482a      	ldr	r0, [pc, #168]	; (800d1f4 <_vfiprintf_r+0x220>)
 800d14c:	f108 0701 	add.w	r7, r8, #1
 800d150:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d154:	f000 fa86 	bl	800d664 <memchr>
 800d158:	2800      	cmp	r0, #0
 800d15a:	d037      	beq.n	800d1cc <_vfiprintf_r+0x1f8>
 800d15c:	4b26      	ldr	r3, [pc, #152]	; (800d1f8 <_vfiprintf_r+0x224>)
 800d15e:	bb1b      	cbnz	r3, 800d1a8 <_vfiprintf_r+0x1d4>
 800d160:	9b03      	ldr	r3, [sp, #12]
 800d162:	3307      	adds	r3, #7
 800d164:	f023 0307 	bic.w	r3, r3, #7
 800d168:	3308      	adds	r3, #8
 800d16a:	9303      	str	r3, [sp, #12]
 800d16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d16e:	444b      	add	r3, r9
 800d170:	9309      	str	r3, [sp, #36]	; 0x24
 800d172:	e750      	b.n	800d016 <_vfiprintf_r+0x42>
 800d174:	fb05 3202 	mla	r2, r5, r2, r3
 800d178:	2001      	movs	r0, #1
 800d17a:	4688      	mov	r8, r1
 800d17c:	e78a      	b.n	800d094 <_vfiprintf_r+0xc0>
 800d17e:	2300      	movs	r3, #0
 800d180:	250a      	movs	r5, #10
 800d182:	4619      	mov	r1, r3
 800d184:	f108 0801 	add.w	r8, r8, #1
 800d188:	9305      	str	r3, [sp, #20]
 800d18a:	4640      	mov	r0, r8
 800d18c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d190:	3a30      	subs	r2, #48	; 0x30
 800d192:	2a09      	cmp	r2, #9
 800d194:	d903      	bls.n	800d19e <_vfiprintf_r+0x1ca>
 800d196:	2b00      	cmp	r3, #0
 800d198:	d0c3      	beq.n	800d122 <_vfiprintf_r+0x14e>
 800d19a:	9105      	str	r1, [sp, #20]
 800d19c:	e7c1      	b.n	800d122 <_vfiprintf_r+0x14e>
 800d19e:	fb05 2101 	mla	r1, r5, r1, r2
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	4680      	mov	r8, r0
 800d1a6:	e7f0      	b.n	800d18a <_vfiprintf_r+0x1b6>
 800d1a8:	ab03      	add	r3, sp, #12
 800d1aa:	9300      	str	r3, [sp, #0]
 800d1ac:	4622      	mov	r2, r4
 800d1ae:	4b13      	ldr	r3, [pc, #76]	; (800d1fc <_vfiprintf_r+0x228>)
 800d1b0:	a904      	add	r1, sp, #16
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	f3af 8000 	nop.w
 800d1b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d1bc:	4681      	mov	r9, r0
 800d1be:	d1d5      	bne.n	800d16c <_vfiprintf_r+0x198>
 800d1c0:	89a3      	ldrh	r3, [r4, #12]
 800d1c2:	065b      	lsls	r3, r3, #25
 800d1c4:	f53f af7e 	bmi.w	800d0c4 <_vfiprintf_r+0xf0>
 800d1c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1ca:	e77d      	b.n	800d0c8 <_vfiprintf_r+0xf4>
 800d1cc:	ab03      	add	r3, sp, #12
 800d1ce:	9300      	str	r3, [sp, #0]
 800d1d0:	4622      	mov	r2, r4
 800d1d2:	4b0a      	ldr	r3, [pc, #40]	; (800d1fc <_vfiprintf_r+0x228>)
 800d1d4:	a904      	add	r1, sp, #16
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	f000 f888 	bl	800d2ec <_printf_i>
 800d1dc:	e7ec      	b.n	800d1b8 <_vfiprintf_r+0x1e4>
 800d1de:	bf00      	nop
 800d1e0:	0800eb20 	.word	0x0800eb20
 800d1e4:	0800eb60 	.word	0x0800eb60
 800d1e8:	0800eb40 	.word	0x0800eb40
 800d1ec:	0800eb00 	.word	0x0800eb00
 800d1f0:	0800eb66 	.word	0x0800eb66
 800d1f4:	0800eb6a 	.word	0x0800eb6a
 800d1f8:	00000000 	.word	0x00000000
 800d1fc:	0800cfaf 	.word	0x0800cfaf

0800d200 <_printf_common>:
 800d200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d204:	4691      	mov	r9, r2
 800d206:	461f      	mov	r7, r3
 800d208:	688a      	ldr	r2, [r1, #8]
 800d20a:	690b      	ldr	r3, [r1, #16]
 800d20c:	4606      	mov	r6, r0
 800d20e:	4293      	cmp	r3, r2
 800d210:	bfb8      	it	lt
 800d212:	4613      	movlt	r3, r2
 800d214:	f8c9 3000 	str.w	r3, [r9]
 800d218:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d21c:	460c      	mov	r4, r1
 800d21e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d222:	b112      	cbz	r2, 800d22a <_printf_common+0x2a>
 800d224:	3301      	adds	r3, #1
 800d226:	f8c9 3000 	str.w	r3, [r9]
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	0699      	lsls	r1, r3, #26
 800d22e:	bf42      	ittt	mi
 800d230:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d234:	3302      	addmi	r3, #2
 800d236:	f8c9 3000 	strmi.w	r3, [r9]
 800d23a:	6825      	ldr	r5, [r4, #0]
 800d23c:	f015 0506 	ands.w	r5, r5, #6
 800d240:	d107      	bne.n	800d252 <_printf_common+0x52>
 800d242:	f104 0a19 	add.w	sl, r4, #25
 800d246:	68e3      	ldr	r3, [r4, #12]
 800d248:	f8d9 2000 	ldr.w	r2, [r9]
 800d24c:	1a9b      	subs	r3, r3, r2
 800d24e:	42ab      	cmp	r3, r5
 800d250:	dc29      	bgt.n	800d2a6 <_printf_common+0xa6>
 800d252:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d256:	6822      	ldr	r2, [r4, #0]
 800d258:	3300      	adds	r3, #0
 800d25a:	bf18      	it	ne
 800d25c:	2301      	movne	r3, #1
 800d25e:	0692      	lsls	r2, r2, #26
 800d260:	d42e      	bmi.n	800d2c0 <_printf_common+0xc0>
 800d262:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d266:	4639      	mov	r1, r7
 800d268:	4630      	mov	r0, r6
 800d26a:	47c0      	blx	r8
 800d26c:	3001      	adds	r0, #1
 800d26e:	d021      	beq.n	800d2b4 <_printf_common+0xb4>
 800d270:	6823      	ldr	r3, [r4, #0]
 800d272:	68e5      	ldr	r5, [r4, #12]
 800d274:	f003 0306 	and.w	r3, r3, #6
 800d278:	2b04      	cmp	r3, #4
 800d27a:	bf18      	it	ne
 800d27c:	2500      	movne	r5, #0
 800d27e:	f8d9 2000 	ldr.w	r2, [r9]
 800d282:	f04f 0900 	mov.w	r9, #0
 800d286:	bf08      	it	eq
 800d288:	1aad      	subeq	r5, r5, r2
 800d28a:	68a3      	ldr	r3, [r4, #8]
 800d28c:	6922      	ldr	r2, [r4, #16]
 800d28e:	bf08      	it	eq
 800d290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d294:	4293      	cmp	r3, r2
 800d296:	bfc4      	itt	gt
 800d298:	1a9b      	subgt	r3, r3, r2
 800d29a:	18ed      	addgt	r5, r5, r3
 800d29c:	341a      	adds	r4, #26
 800d29e:	454d      	cmp	r5, r9
 800d2a0:	d11a      	bne.n	800d2d8 <_printf_common+0xd8>
 800d2a2:	2000      	movs	r0, #0
 800d2a4:	e008      	b.n	800d2b8 <_printf_common+0xb8>
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	4652      	mov	r2, sl
 800d2aa:	4639      	mov	r1, r7
 800d2ac:	4630      	mov	r0, r6
 800d2ae:	47c0      	blx	r8
 800d2b0:	3001      	adds	r0, #1
 800d2b2:	d103      	bne.n	800d2bc <_printf_common+0xbc>
 800d2b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2bc:	3501      	adds	r5, #1
 800d2be:	e7c2      	b.n	800d246 <_printf_common+0x46>
 800d2c0:	2030      	movs	r0, #48	; 0x30
 800d2c2:	18e1      	adds	r1, r4, r3
 800d2c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2c8:	1c5a      	adds	r2, r3, #1
 800d2ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2ce:	4422      	add	r2, r4
 800d2d0:	3302      	adds	r3, #2
 800d2d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d2d6:	e7c4      	b.n	800d262 <_printf_common+0x62>
 800d2d8:	2301      	movs	r3, #1
 800d2da:	4622      	mov	r2, r4
 800d2dc:	4639      	mov	r1, r7
 800d2de:	4630      	mov	r0, r6
 800d2e0:	47c0      	blx	r8
 800d2e2:	3001      	adds	r0, #1
 800d2e4:	d0e6      	beq.n	800d2b4 <_printf_common+0xb4>
 800d2e6:	f109 0901 	add.w	r9, r9, #1
 800d2ea:	e7d8      	b.n	800d29e <_printf_common+0x9e>

0800d2ec <_printf_i>:
 800d2ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d2f4:	460c      	mov	r4, r1
 800d2f6:	7e09      	ldrb	r1, [r1, #24]
 800d2f8:	b085      	sub	sp, #20
 800d2fa:	296e      	cmp	r1, #110	; 0x6e
 800d2fc:	4617      	mov	r7, r2
 800d2fe:	4606      	mov	r6, r0
 800d300:	4698      	mov	r8, r3
 800d302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d304:	f000 80b3 	beq.w	800d46e <_printf_i+0x182>
 800d308:	d822      	bhi.n	800d350 <_printf_i+0x64>
 800d30a:	2963      	cmp	r1, #99	; 0x63
 800d30c:	d036      	beq.n	800d37c <_printf_i+0x90>
 800d30e:	d80a      	bhi.n	800d326 <_printf_i+0x3a>
 800d310:	2900      	cmp	r1, #0
 800d312:	f000 80b9 	beq.w	800d488 <_printf_i+0x19c>
 800d316:	2958      	cmp	r1, #88	; 0x58
 800d318:	f000 8083 	beq.w	800d422 <_printf_i+0x136>
 800d31c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d320:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d324:	e032      	b.n	800d38c <_printf_i+0xa0>
 800d326:	2964      	cmp	r1, #100	; 0x64
 800d328:	d001      	beq.n	800d32e <_printf_i+0x42>
 800d32a:	2969      	cmp	r1, #105	; 0x69
 800d32c:	d1f6      	bne.n	800d31c <_printf_i+0x30>
 800d32e:	6820      	ldr	r0, [r4, #0]
 800d330:	6813      	ldr	r3, [r2, #0]
 800d332:	0605      	lsls	r5, r0, #24
 800d334:	f103 0104 	add.w	r1, r3, #4
 800d338:	d52a      	bpl.n	800d390 <_printf_i+0xa4>
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	6011      	str	r1, [r2, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	da03      	bge.n	800d34a <_printf_i+0x5e>
 800d342:	222d      	movs	r2, #45	; 0x2d
 800d344:	425b      	negs	r3, r3
 800d346:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d34a:	486f      	ldr	r0, [pc, #444]	; (800d508 <_printf_i+0x21c>)
 800d34c:	220a      	movs	r2, #10
 800d34e:	e039      	b.n	800d3c4 <_printf_i+0xd8>
 800d350:	2973      	cmp	r1, #115	; 0x73
 800d352:	f000 809d 	beq.w	800d490 <_printf_i+0x1a4>
 800d356:	d808      	bhi.n	800d36a <_printf_i+0x7e>
 800d358:	296f      	cmp	r1, #111	; 0x6f
 800d35a:	d020      	beq.n	800d39e <_printf_i+0xb2>
 800d35c:	2970      	cmp	r1, #112	; 0x70
 800d35e:	d1dd      	bne.n	800d31c <_printf_i+0x30>
 800d360:	6823      	ldr	r3, [r4, #0]
 800d362:	f043 0320 	orr.w	r3, r3, #32
 800d366:	6023      	str	r3, [r4, #0]
 800d368:	e003      	b.n	800d372 <_printf_i+0x86>
 800d36a:	2975      	cmp	r1, #117	; 0x75
 800d36c:	d017      	beq.n	800d39e <_printf_i+0xb2>
 800d36e:	2978      	cmp	r1, #120	; 0x78
 800d370:	d1d4      	bne.n	800d31c <_printf_i+0x30>
 800d372:	2378      	movs	r3, #120	; 0x78
 800d374:	4865      	ldr	r0, [pc, #404]	; (800d50c <_printf_i+0x220>)
 800d376:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d37a:	e055      	b.n	800d428 <_printf_i+0x13c>
 800d37c:	6813      	ldr	r3, [r2, #0]
 800d37e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d382:	1d19      	adds	r1, r3, #4
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	6011      	str	r1, [r2, #0]
 800d388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d38c:	2301      	movs	r3, #1
 800d38e:	e08c      	b.n	800d4aa <_printf_i+0x1be>
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d396:	6011      	str	r1, [r2, #0]
 800d398:	bf18      	it	ne
 800d39a:	b21b      	sxthne	r3, r3
 800d39c:	e7cf      	b.n	800d33e <_printf_i+0x52>
 800d39e:	6813      	ldr	r3, [r2, #0]
 800d3a0:	6825      	ldr	r5, [r4, #0]
 800d3a2:	1d18      	adds	r0, r3, #4
 800d3a4:	6010      	str	r0, [r2, #0]
 800d3a6:	0628      	lsls	r0, r5, #24
 800d3a8:	d501      	bpl.n	800d3ae <_printf_i+0xc2>
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	e002      	b.n	800d3b4 <_printf_i+0xc8>
 800d3ae:	0668      	lsls	r0, r5, #25
 800d3b0:	d5fb      	bpl.n	800d3aa <_printf_i+0xbe>
 800d3b2:	881b      	ldrh	r3, [r3, #0]
 800d3b4:	296f      	cmp	r1, #111	; 0x6f
 800d3b6:	bf14      	ite	ne
 800d3b8:	220a      	movne	r2, #10
 800d3ba:	2208      	moveq	r2, #8
 800d3bc:	4852      	ldr	r0, [pc, #328]	; (800d508 <_printf_i+0x21c>)
 800d3be:	2100      	movs	r1, #0
 800d3c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3c4:	6865      	ldr	r5, [r4, #4]
 800d3c6:	2d00      	cmp	r5, #0
 800d3c8:	60a5      	str	r5, [r4, #8]
 800d3ca:	f2c0 8095 	blt.w	800d4f8 <_printf_i+0x20c>
 800d3ce:	6821      	ldr	r1, [r4, #0]
 800d3d0:	f021 0104 	bic.w	r1, r1, #4
 800d3d4:	6021      	str	r1, [r4, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d13d      	bne.n	800d456 <_printf_i+0x16a>
 800d3da:	2d00      	cmp	r5, #0
 800d3dc:	f040 808e 	bne.w	800d4fc <_printf_i+0x210>
 800d3e0:	4665      	mov	r5, ip
 800d3e2:	2a08      	cmp	r2, #8
 800d3e4:	d10b      	bne.n	800d3fe <_printf_i+0x112>
 800d3e6:	6823      	ldr	r3, [r4, #0]
 800d3e8:	07db      	lsls	r3, r3, #31
 800d3ea:	d508      	bpl.n	800d3fe <_printf_i+0x112>
 800d3ec:	6923      	ldr	r3, [r4, #16]
 800d3ee:	6862      	ldr	r2, [r4, #4]
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	bfde      	ittt	le
 800d3f4:	2330      	movle	r3, #48	; 0x30
 800d3f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3fa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d3fe:	ebac 0305 	sub.w	r3, ip, r5
 800d402:	6123      	str	r3, [r4, #16]
 800d404:	f8cd 8000 	str.w	r8, [sp]
 800d408:	463b      	mov	r3, r7
 800d40a:	aa03      	add	r2, sp, #12
 800d40c:	4621      	mov	r1, r4
 800d40e:	4630      	mov	r0, r6
 800d410:	f7ff fef6 	bl	800d200 <_printf_common>
 800d414:	3001      	adds	r0, #1
 800d416:	d14d      	bne.n	800d4b4 <_printf_i+0x1c8>
 800d418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d41c:	b005      	add	sp, #20
 800d41e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d422:	4839      	ldr	r0, [pc, #228]	; (800d508 <_printf_i+0x21c>)
 800d424:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d428:	6813      	ldr	r3, [r2, #0]
 800d42a:	6821      	ldr	r1, [r4, #0]
 800d42c:	1d1d      	adds	r5, r3, #4
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	6015      	str	r5, [r2, #0]
 800d432:	060a      	lsls	r2, r1, #24
 800d434:	d50b      	bpl.n	800d44e <_printf_i+0x162>
 800d436:	07ca      	lsls	r2, r1, #31
 800d438:	bf44      	itt	mi
 800d43a:	f041 0120 	orrmi.w	r1, r1, #32
 800d43e:	6021      	strmi	r1, [r4, #0]
 800d440:	b91b      	cbnz	r3, 800d44a <_printf_i+0x15e>
 800d442:	6822      	ldr	r2, [r4, #0]
 800d444:	f022 0220 	bic.w	r2, r2, #32
 800d448:	6022      	str	r2, [r4, #0]
 800d44a:	2210      	movs	r2, #16
 800d44c:	e7b7      	b.n	800d3be <_printf_i+0xd2>
 800d44e:	064d      	lsls	r5, r1, #25
 800d450:	bf48      	it	mi
 800d452:	b29b      	uxthmi	r3, r3
 800d454:	e7ef      	b.n	800d436 <_printf_i+0x14a>
 800d456:	4665      	mov	r5, ip
 800d458:	fbb3 f1f2 	udiv	r1, r3, r2
 800d45c:	fb02 3311 	mls	r3, r2, r1, r3
 800d460:	5cc3      	ldrb	r3, [r0, r3]
 800d462:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d466:	460b      	mov	r3, r1
 800d468:	2900      	cmp	r1, #0
 800d46a:	d1f5      	bne.n	800d458 <_printf_i+0x16c>
 800d46c:	e7b9      	b.n	800d3e2 <_printf_i+0xf6>
 800d46e:	6813      	ldr	r3, [r2, #0]
 800d470:	6825      	ldr	r5, [r4, #0]
 800d472:	1d18      	adds	r0, r3, #4
 800d474:	6961      	ldr	r1, [r4, #20]
 800d476:	6010      	str	r0, [r2, #0]
 800d478:	0628      	lsls	r0, r5, #24
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	d501      	bpl.n	800d482 <_printf_i+0x196>
 800d47e:	6019      	str	r1, [r3, #0]
 800d480:	e002      	b.n	800d488 <_printf_i+0x19c>
 800d482:	066a      	lsls	r2, r5, #25
 800d484:	d5fb      	bpl.n	800d47e <_printf_i+0x192>
 800d486:	8019      	strh	r1, [r3, #0]
 800d488:	2300      	movs	r3, #0
 800d48a:	4665      	mov	r5, ip
 800d48c:	6123      	str	r3, [r4, #16]
 800d48e:	e7b9      	b.n	800d404 <_printf_i+0x118>
 800d490:	6813      	ldr	r3, [r2, #0]
 800d492:	1d19      	adds	r1, r3, #4
 800d494:	6011      	str	r1, [r2, #0]
 800d496:	681d      	ldr	r5, [r3, #0]
 800d498:	6862      	ldr	r2, [r4, #4]
 800d49a:	2100      	movs	r1, #0
 800d49c:	4628      	mov	r0, r5
 800d49e:	f000 f8e1 	bl	800d664 <memchr>
 800d4a2:	b108      	cbz	r0, 800d4a8 <_printf_i+0x1bc>
 800d4a4:	1b40      	subs	r0, r0, r5
 800d4a6:	6060      	str	r0, [r4, #4]
 800d4a8:	6863      	ldr	r3, [r4, #4]
 800d4aa:	6123      	str	r3, [r4, #16]
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4b2:	e7a7      	b.n	800d404 <_printf_i+0x118>
 800d4b4:	6923      	ldr	r3, [r4, #16]
 800d4b6:	462a      	mov	r2, r5
 800d4b8:	4639      	mov	r1, r7
 800d4ba:	4630      	mov	r0, r6
 800d4bc:	47c0      	blx	r8
 800d4be:	3001      	adds	r0, #1
 800d4c0:	d0aa      	beq.n	800d418 <_printf_i+0x12c>
 800d4c2:	6823      	ldr	r3, [r4, #0]
 800d4c4:	079b      	lsls	r3, r3, #30
 800d4c6:	d413      	bmi.n	800d4f0 <_printf_i+0x204>
 800d4c8:	68e0      	ldr	r0, [r4, #12]
 800d4ca:	9b03      	ldr	r3, [sp, #12]
 800d4cc:	4298      	cmp	r0, r3
 800d4ce:	bfb8      	it	lt
 800d4d0:	4618      	movlt	r0, r3
 800d4d2:	e7a3      	b.n	800d41c <_printf_i+0x130>
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	464a      	mov	r2, r9
 800d4d8:	4639      	mov	r1, r7
 800d4da:	4630      	mov	r0, r6
 800d4dc:	47c0      	blx	r8
 800d4de:	3001      	adds	r0, #1
 800d4e0:	d09a      	beq.n	800d418 <_printf_i+0x12c>
 800d4e2:	3501      	adds	r5, #1
 800d4e4:	68e3      	ldr	r3, [r4, #12]
 800d4e6:	9a03      	ldr	r2, [sp, #12]
 800d4e8:	1a9b      	subs	r3, r3, r2
 800d4ea:	42ab      	cmp	r3, r5
 800d4ec:	dcf2      	bgt.n	800d4d4 <_printf_i+0x1e8>
 800d4ee:	e7eb      	b.n	800d4c8 <_printf_i+0x1dc>
 800d4f0:	2500      	movs	r5, #0
 800d4f2:	f104 0919 	add.w	r9, r4, #25
 800d4f6:	e7f5      	b.n	800d4e4 <_printf_i+0x1f8>
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d1ac      	bne.n	800d456 <_printf_i+0x16a>
 800d4fc:	7803      	ldrb	r3, [r0, #0]
 800d4fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d502:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d506:	e76c      	b.n	800d3e2 <_printf_i+0xf6>
 800d508:	0800eb71 	.word	0x0800eb71
 800d50c:	0800eb82 	.word	0x0800eb82

0800d510 <_sbrk_r>:
 800d510:	b538      	push	{r3, r4, r5, lr}
 800d512:	2300      	movs	r3, #0
 800d514:	4c05      	ldr	r4, [pc, #20]	; (800d52c <_sbrk_r+0x1c>)
 800d516:	4605      	mov	r5, r0
 800d518:	4608      	mov	r0, r1
 800d51a:	6023      	str	r3, [r4, #0]
 800d51c:	f000 f8ec 	bl	800d6f8 <_sbrk>
 800d520:	1c43      	adds	r3, r0, #1
 800d522:	d102      	bne.n	800d52a <_sbrk_r+0x1a>
 800d524:	6823      	ldr	r3, [r4, #0]
 800d526:	b103      	cbz	r3, 800d52a <_sbrk_r+0x1a>
 800d528:	602b      	str	r3, [r5, #0]
 800d52a:	bd38      	pop	{r3, r4, r5, pc}
 800d52c:	2000948c 	.word	0x2000948c

0800d530 <__sread>:
 800d530:	b510      	push	{r4, lr}
 800d532:	460c      	mov	r4, r1
 800d534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d538:	f000 f8a4 	bl	800d684 <_read_r>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	bfab      	itete	ge
 800d540:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d542:	89a3      	ldrhlt	r3, [r4, #12]
 800d544:	181b      	addge	r3, r3, r0
 800d546:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d54a:	bfac      	ite	ge
 800d54c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d54e:	81a3      	strhlt	r3, [r4, #12]
 800d550:	bd10      	pop	{r4, pc}

0800d552 <__swrite>:
 800d552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d556:	461f      	mov	r7, r3
 800d558:	898b      	ldrh	r3, [r1, #12]
 800d55a:	4605      	mov	r5, r0
 800d55c:	05db      	lsls	r3, r3, #23
 800d55e:	460c      	mov	r4, r1
 800d560:	4616      	mov	r6, r2
 800d562:	d505      	bpl.n	800d570 <__swrite+0x1e>
 800d564:	2302      	movs	r3, #2
 800d566:	2200      	movs	r2, #0
 800d568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d56c:	f000 f868 	bl	800d640 <_lseek_r>
 800d570:	89a3      	ldrh	r3, [r4, #12]
 800d572:	4632      	mov	r2, r6
 800d574:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d578:	81a3      	strh	r3, [r4, #12]
 800d57a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d57e:	463b      	mov	r3, r7
 800d580:	4628      	mov	r0, r5
 800d582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d586:	f000 b817 	b.w	800d5b8 <_write_r>

0800d58a <__sseek>:
 800d58a:	b510      	push	{r4, lr}
 800d58c:	460c      	mov	r4, r1
 800d58e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d592:	f000 f855 	bl	800d640 <_lseek_r>
 800d596:	1c43      	adds	r3, r0, #1
 800d598:	89a3      	ldrh	r3, [r4, #12]
 800d59a:	bf15      	itete	ne
 800d59c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d59e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d5a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d5a6:	81a3      	strheq	r3, [r4, #12]
 800d5a8:	bf18      	it	ne
 800d5aa:	81a3      	strhne	r3, [r4, #12]
 800d5ac:	bd10      	pop	{r4, pc}

0800d5ae <__sclose>:
 800d5ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5b2:	f000 b813 	b.w	800d5dc <_close_r>
	...

0800d5b8 <_write_r>:
 800d5b8:	b538      	push	{r3, r4, r5, lr}
 800d5ba:	4605      	mov	r5, r0
 800d5bc:	4608      	mov	r0, r1
 800d5be:	4611      	mov	r1, r2
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	4c05      	ldr	r4, [pc, #20]	; (800d5d8 <_write_r+0x20>)
 800d5c4:	6022      	str	r2, [r4, #0]
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	f7f3 fc8a 	bl	8000ee0 <_write>
 800d5cc:	1c43      	adds	r3, r0, #1
 800d5ce:	d102      	bne.n	800d5d6 <_write_r+0x1e>
 800d5d0:	6823      	ldr	r3, [r4, #0]
 800d5d2:	b103      	cbz	r3, 800d5d6 <_write_r+0x1e>
 800d5d4:	602b      	str	r3, [r5, #0]
 800d5d6:	bd38      	pop	{r3, r4, r5, pc}
 800d5d8:	2000948c 	.word	0x2000948c

0800d5dc <_close_r>:
 800d5dc:	b538      	push	{r3, r4, r5, lr}
 800d5de:	2300      	movs	r3, #0
 800d5e0:	4c05      	ldr	r4, [pc, #20]	; (800d5f8 <_close_r+0x1c>)
 800d5e2:	4605      	mov	r5, r0
 800d5e4:	4608      	mov	r0, r1
 800d5e6:	6023      	str	r3, [r4, #0]
 800d5e8:	f000 f85e 	bl	800d6a8 <_close>
 800d5ec:	1c43      	adds	r3, r0, #1
 800d5ee:	d102      	bne.n	800d5f6 <_close_r+0x1a>
 800d5f0:	6823      	ldr	r3, [r4, #0]
 800d5f2:	b103      	cbz	r3, 800d5f6 <_close_r+0x1a>
 800d5f4:	602b      	str	r3, [r5, #0]
 800d5f6:	bd38      	pop	{r3, r4, r5, pc}
 800d5f8:	2000948c 	.word	0x2000948c

0800d5fc <_fstat_r>:
 800d5fc:	b538      	push	{r3, r4, r5, lr}
 800d5fe:	2300      	movs	r3, #0
 800d600:	4c06      	ldr	r4, [pc, #24]	; (800d61c <_fstat_r+0x20>)
 800d602:	4605      	mov	r5, r0
 800d604:	4608      	mov	r0, r1
 800d606:	4611      	mov	r1, r2
 800d608:	6023      	str	r3, [r4, #0]
 800d60a:	f000 f855 	bl	800d6b8 <_fstat>
 800d60e:	1c43      	adds	r3, r0, #1
 800d610:	d102      	bne.n	800d618 <_fstat_r+0x1c>
 800d612:	6823      	ldr	r3, [r4, #0]
 800d614:	b103      	cbz	r3, 800d618 <_fstat_r+0x1c>
 800d616:	602b      	str	r3, [r5, #0]
 800d618:	bd38      	pop	{r3, r4, r5, pc}
 800d61a:	bf00      	nop
 800d61c:	2000948c 	.word	0x2000948c

0800d620 <_isatty_r>:
 800d620:	b538      	push	{r3, r4, r5, lr}
 800d622:	2300      	movs	r3, #0
 800d624:	4c05      	ldr	r4, [pc, #20]	; (800d63c <_isatty_r+0x1c>)
 800d626:	4605      	mov	r5, r0
 800d628:	4608      	mov	r0, r1
 800d62a:	6023      	str	r3, [r4, #0]
 800d62c:	f000 f84c 	bl	800d6c8 <_isatty>
 800d630:	1c43      	adds	r3, r0, #1
 800d632:	d102      	bne.n	800d63a <_isatty_r+0x1a>
 800d634:	6823      	ldr	r3, [r4, #0]
 800d636:	b103      	cbz	r3, 800d63a <_isatty_r+0x1a>
 800d638:	602b      	str	r3, [r5, #0]
 800d63a:	bd38      	pop	{r3, r4, r5, pc}
 800d63c:	2000948c 	.word	0x2000948c

0800d640 <_lseek_r>:
 800d640:	b538      	push	{r3, r4, r5, lr}
 800d642:	4605      	mov	r5, r0
 800d644:	4608      	mov	r0, r1
 800d646:	4611      	mov	r1, r2
 800d648:	2200      	movs	r2, #0
 800d64a:	4c05      	ldr	r4, [pc, #20]	; (800d660 <_lseek_r+0x20>)
 800d64c:	6022      	str	r2, [r4, #0]
 800d64e:	461a      	mov	r2, r3
 800d650:	f000 f842 	bl	800d6d8 <_lseek>
 800d654:	1c43      	adds	r3, r0, #1
 800d656:	d102      	bne.n	800d65e <_lseek_r+0x1e>
 800d658:	6823      	ldr	r3, [r4, #0]
 800d65a:	b103      	cbz	r3, 800d65e <_lseek_r+0x1e>
 800d65c:	602b      	str	r3, [r5, #0]
 800d65e:	bd38      	pop	{r3, r4, r5, pc}
 800d660:	2000948c 	.word	0x2000948c

0800d664 <memchr>:
 800d664:	b510      	push	{r4, lr}
 800d666:	b2c9      	uxtb	r1, r1
 800d668:	4402      	add	r2, r0
 800d66a:	4290      	cmp	r0, r2
 800d66c:	4603      	mov	r3, r0
 800d66e:	d101      	bne.n	800d674 <memchr+0x10>
 800d670:	2300      	movs	r3, #0
 800d672:	e003      	b.n	800d67c <memchr+0x18>
 800d674:	781c      	ldrb	r4, [r3, #0]
 800d676:	3001      	adds	r0, #1
 800d678:	428c      	cmp	r4, r1
 800d67a:	d1f6      	bne.n	800d66a <memchr+0x6>
 800d67c:	4618      	mov	r0, r3
 800d67e:	bd10      	pop	{r4, pc}

0800d680 <__malloc_lock>:
 800d680:	4770      	bx	lr

0800d682 <__malloc_unlock>:
 800d682:	4770      	bx	lr

0800d684 <_read_r>:
 800d684:	b538      	push	{r3, r4, r5, lr}
 800d686:	4605      	mov	r5, r0
 800d688:	4608      	mov	r0, r1
 800d68a:	4611      	mov	r1, r2
 800d68c:	2200      	movs	r2, #0
 800d68e:	4c05      	ldr	r4, [pc, #20]	; (800d6a4 <_read_r+0x20>)
 800d690:	6022      	str	r2, [r4, #0]
 800d692:	461a      	mov	r2, r3
 800d694:	f000 f828 	bl	800d6e8 <_read>
 800d698:	1c43      	adds	r3, r0, #1
 800d69a:	d102      	bne.n	800d6a2 <_read_r+0x1e>
 800d69c:	6823      	ldr	r3, [r4, #0]
 800d69e:	b103      	cbz	r3, 800d6a2 <_read_r+0x1e>
 800d6a0:	602b      	str	r3, [r5, #0]
 800d6a2:	bd38      	pop	{r3, r4, r5, pc}
 800d6a4:	2000948c 	.word	0x2000948c

0800d6a8 <_close>:
 800d6a8:	2258      	movs	r2, #88	; 0x58
 800d6aa:	4b02      	ldr	r3, [pc, #8]	; (800d6b4 <_close+0xc>)
 800d6ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6b0:	601a      	str	r2, [r3, #0]
 800d6b2:	4770      	bx	lr
 800d6b4:	2000948c 	.word	0x2000948c

0800d6b8 <_fstat>:
 800d6b8:	2258      	movs	r2, #88	; 0x58
 800d6ba:	4b02      	ldr	r3, [pc, #8]	; (800d6c4 <_fstat+0xc>)
 800d6bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6c0:	601a      	str	r2, [r3, #0]
 800d6c2:	4770      	bx	lr
 800d6c4:	2000948c 	.word	0x2000948c

0800d6c8 <_isatty>:
 800d6c8:	2258      	movs	r2, #88	; 0x58
 800d6ca:	4b02      	ldr	r3, [pc, #8]	; (800d6d4 <_isatty+0xc>)
 800d6cc:	2000      	movs	r0, #0
 800d6ce:	601a      	str	r2, [r3, #0]
 800d6d0:	4770      	bx	lr
 800d6d2:	bf00      	nop
 800d6d4:	2000948c 	.word	0x2000948c

0800d6d8 <_lseek>:
 800d6d8:	2258      	movs	r2, #88	; 0x58
 800d6da:	4b02      	ldr	r3, [pc, #8]	; (800d6e4 <_lseek+0xc>)
 800d6dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6e0:	601a      	str	r2, [r3, #0]
 800d6e2:	4770      	bx	lr
 800d6e4:	2000948c 	.word	0x2000948c

0800d6e8 <_read>:
 800d6e8:	2258      	movs	r2, #88	; 0x58
 800d6ea:	4b02      	ldr	r3, [pc, #8]	; (800d6f4 <_read+0xc>)
 800d6ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6f0:	601a      	str	r2, [r3, #0]
 800d6f2:	4770      	bx	lr
 800d6f4:	2000948c 	.word	0x2000948c

0800d6f8 <_sbrk>:
 800d6f8:	4b04      	ldr	r3, [pc, #16]	; (800d70c <_sbrk+0x14>)
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	6819      	ldr	r1, [r3, #0]
 800d6fe:	b909      	cbnz	r1, 800d704 <_sbrk+0xc>
 800d700:	4903      	ldr	r1, [pc, #12]	; (800d710 <_sbrk+0x18>)
 800d702:	6019      	str	r1, [r3, #0]
 800d704:	6818      	ldr	r0, [r3, #0]
 800d706:	4402      	add	r2, r0
 800d708:	601a      	str	r2, [r3, #0]
 800d70a:	4770      	bx	lr
 800d70c:	20005d20 	.word	0x20005d20
 800d710:	20009490 	.word	0x20009490

0800d714 <_init>:
 800d714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d716:	bf00      	nop
 800d718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d71a:	bc08      	pop	{r3}
 800d71c:	469e      	mov	lr, r3
 800d71e:	4770      	bx	lr

0800d720 <_fini>:
 800d720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d722:	bf00      	nop
 800d724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d726:	bc08      	pop	{r3}
 800d728:	469e      	mov	lr, r3
 800d72a:	4770      	bx	lr
